// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firmware_requests.proto

#include "firmware_requests.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Error;
}  // namespace protobuf_common_2eproto
namespace protobuf_firmware_5frequests_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetFirmwareUpdateProgressRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetLatestFirmwareByProductIdRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateAllFirmwareRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateFirmwareByProductIdRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GetFirmwareUpdateProgressResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GetLatestFirmwareByProductIdResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UpdateAllFirmwareResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_UpdateFirmwareByProductIdResponse;
}  // namespace protobuf_firmware_5frequests_2eproto
namespace protobuf_firmware_5fstructures_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareUpdateProgress;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatestDeviceFirmwareInfo;
}  // namespace protobuf_firmware_5fstructures_2eproto
namespace logi {
namespace proto {
class GetFirmwareUpdateProgressRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetFirmwareUpdateProgressRequest>
      _instance;
} _GetFirmwareUpdateProgressRequest_default_instance_;
class GetFirmwareUpdateProgressResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetFirmwareUpdateProgressResponse>
      _instance;
} _GetFirmwareUpdateProgressResponse_default_instance_;
class GetLatestFirmwareByProductIdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLatestFirmwareByProductIdRequest>
      _instance;
} _GetLatestFirmwareByProductIdRequest_default_instance_;
class GetLatestFirmwareByProductIdResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLatestFirmwareByProductIdResponse>
      _instance;
} _GetLatestFirmwareByProductIdResponse_default_instance_;
class UpdateAllFirmwareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateAllFirmwareRequest>
      _instance;
} _UpdateAllFirmwareRequest_default_instance_;
class UpdateAllFirmwareResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateAllFirmwareResponse>
      _instance;
} _UpdateAllFirmwareResponse_default_instance_;
class UpdateFirmwareByProductIdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateFirmwareByProductIdRequest>
      _instance;
} _UpdateFirmwareByProductIdRequest_default_instance_;
class UpdateFirmwareByProductIdResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateFirmwareByProductIdResponse>
      _instance;
} _UpdateFirmwareByProductIdResponse_default_instance_;
class FirmwareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareRequest>
      _instance;
  const ::logi::proto::GetFirmwareUpdateProgressRequest* get_firmware_update_progress_request_;
  const ::logi::proto::GetLatestFirmwareByProductIdRequest* get_latest_firmware_by_product_id_request_;
  const ::logi::proto::UpdateFirmwareByProductIdRequest* update_firmware_by_id_request_;
  const ::logi::proto::UpdateAllFirmwareRequest* update_all_firmware_request_;
} _FirmwareRequest_default_instance_;
class FirmwareResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareResponse>
      _instance;
  const ::logi::proto::GetFirmwareUpdateProgressResponse* get_firmware_update_progress_response_;
  const ::logi::proto::GetLatestFirmwareByProductIdResponse* get_latest_firmware_by_product_id_response_;
  const ::logi::proto::UpdateFirmwareByProductIdResponse* update_firmware_by_id_response_;
  const ::logi::proto::UpdateAllFirmwareResponse* update_all_firmware_response_;
} _FirmwareResponse_default_instance_;
}  // namespace proto
}  // namespace logi
namespace protobuf_firmware_5frequests_2eproto {
static void InitDefaultsGetFirmwareUpdateProgressRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_GetFirmwareUpdateProgressRequest_default_instance_;
    new (ptr) ::logi::proto::GetFirmwareUpdateProgressRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::GetFirmwareUpdateProgressRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetFirmwareUpdateProgressRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetFirmwareUpdateProgressRequest}, {}};

static void InitDefaultsGetFirmwareUpdateProgressResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_GetFirmwareUpdateProgressResponse_default_instance_;
    new (ptr) ::logi::proto::GetFirmwareUpdateProgressResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::GetFirmwareUpdateProgressResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetFirmwareUpdateProgressResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetFirmwareUpdateProgressResponse}, {
      &protobuf_common_2eproto::scc_info_Error.base,
      &protobuf_firmware_5fstructures_2eproto::scc_info_FirmwareUpdateProgress.base,}};

static void InitDefaultsGetLatestFirmwareByProductIdRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_GetLatestFirmwareByProductIdRequest_default_instance_;
    new (ptr) ::logi::proto::GetLatestFirmwareByProductIdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::GetLatestFirmwareByProductIdRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetLatestFirmwareByProductIdRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetLatestFirmwareByProductIdRequest}, {}};

static void InitDefaultsGetLatestFirmwareByProductIdResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_GetLatestFirmwareByProductIdResponse_default_instance_;
    new (ptr) ::logi::proto::GetLatestFirmwareByProductIdResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::GetLatestFirmwareByProductIdResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetLatestFirmwareByProductIdResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetLatestFirmwareByProductIdResponse}, {
      &protobuf_common_2eproto::scc_info_Error.base,
      &protobuf_firmware_5fstructures_2eproto::scc_info_LatestDeviceFirmwareInfo.base,}};

static void InitDefaultsUpdateAllFirmwareRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_UpdateAllFirmwareRequest_default_instance_;
    new (ptr) ::logi::proto::UpdateAllFirmwareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::UpdateAllFirmwareRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateAllFirmwareRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateAllFirmwareRequest}, {}};

static void InitDefaultsUpdateAllFirmwareResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_UpdateAllFirmwareResponse_default_instance_;
    new (ptr) ::logi::proto::UpdateAllFirmwareResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::UpdateAllFirmwareResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateAllFirmwareResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateAllFirmwareResponse}, {
      &protobuf_common_2eproto::scc_info_Error.base,
      &protobuf_firmware_5fstructures_2eproto::scc_info_FirmwareUpdateProgress.base,}};

static void InitDefaultsUpdateFirmwareByProductIdRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_UpdateFirmwareByProductIdRequest_default_instance_;
    new (ptr) ::logi::proto::UpdateFirmwareByProductIdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::UpdateFirmwareByProductIdRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateFirmwareByProductIdRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateFirmwareByProductIdRequest}, {}};

static void InitDefaultsUpdateFirmwareByProductIdResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_UpdateFirmwareByProductIdResponse_default_instance_;
    new (ptr) ::logi::proto::UpdateFirmwareByProductIdResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::UpdateFirmwareByProductIdResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateFirmwareByProductIdResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateFirmwareByProductIdResponse}, {
      &protobuf_common_2eproto::scc_info_Error.base,
      &protobuf_firmware_5fstructures_2eproto::scc_info_FirmwareUpdateProgress.base,}};

static void InitDefaultsFirmwareRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_FirmwareRequest_default_instance_;
    new (ptr) ::logi::proto::FirmwareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::FirmwareRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_FirmwareRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFirmwareRequest}, {
      &protobuf_firmware_5frequests_2eproto::scc_info_GetFirmwareUpdateProgressRequest.base,
      &protobuf_firmware_5frequests_2eproto::scc_info_GetLatestFirmwareByProductIdRequest.base,
      &protobuf_firmware_5frequests_2eproto::scc_info_UpdateFirmwareByProductIdRequest.base,
      &protobuf_firmware_5frequests_2eproto::scc_info_UpdateAllFirmwareRequest.base,}};

static void InitDefaultsFirmwareResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_FirmwareResponse_default_instance_;
    new (ptr) ::logi::proto::FirmwareResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::FirmwareResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_FirmwareResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFirmwareResponse}, {
      &protobuf_firmware_5frequests_2eproto::scc_info_GetFirmwareUpdateProgressResponse.base,
      &protobuf_firmware_5frequests_2eproto::scc_info_GetLatestFirmwareByProductIdResponse.base,
      &protobuf_firmware_5frequests_2eproto::scc_info_UpdateFirmwareByProductIdResponse.base,
      &protobuf_firmware_5frequests_2eproto::scc_info_UpdateAllFirmwareResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetFirmwareUpdateProgressRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetFirmwareUpdateProgressResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLatestFirmwareByProductIdRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLatestFirmwareByProductIdResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateAllFirmwareRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateAllFirmwareResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateFirmwareByProductIdRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateFirmwareByProductIdResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareResponse.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetFirmwareUpdateProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetFirmwareUpdateProgressRequest, reserved_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetFirmwareUpdateProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetFirmwareUpdateProgressResponse, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetFirmwareUpdateProgressResponse, updates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdRequest, product_uuid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdResponse, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdResponse, product_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdResponse, latest_firmware_package_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdResponse, latest_firmware_published_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdResponse, latest_firmware_release_notes_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::GetLatestFirmwareByProductIdResponse, latest_device_firmware_versions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateAllFirmwareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateAllFirmwareRequest, reserved_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateAllFirmwareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateAllFirmwareResponse, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateAllFirmwareResponse, updates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateFirmwareByProductIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateFirmwareByProductIdRequest, product_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateFirmwareByProductIdRequest, firmware_package_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateFirmwareByProductIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateFirmwareByProductIdResponse, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::UpdateFirmwareByProductIdResponse, update_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::logi::proto::FirmwareRequestDefaultTypeInternal, get_firmware_update_progress_request_),
  offsetof(::logi::proto::FirmwareRequestDefaultTypeInternal, get_latest_firmware_by_product_id_request_),
  offsetof(::logi::proto::FirmwareRequestDefaultTypeInternal, update_firmware_by_id_request_),
  offsetof(::logi::proto::FirmwareRequestDefaultTypeInternal, update_all_firmware_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareRequest, request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::logi::proto::FirmwareResponseDefaultTypeInternal, get_firmware_update_progress_response_),
  offsetof(::logi::proto::FirmwareResponseDefaultTypeInternal, get_latest_firmware_by_product_id_response_),
  offsetof(::logi::proto::FirmwareResponseDefaultTypeInternal, update_firmware_by_id_response_),
  offsetof(::logi::proto::FirmwareResponseDefaultTypeInternal, update_all_firmware_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareResponse, response_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logi::proto::GetFirmwareUpdateProgressRequest)},
  { 6, -1, sizeof(::logi::proto::GetFirmwareUpdateProgressResponse)},
  { 13, -1, sizeof(::logi::proto::GetLatestFirmwareByProductIdRequest)},
  { 19, -1, sizeof(::logi::proto::GetLatestFirmwareByProductIdResponse)},
  { 30, -1, sizeof(::logi::proto::UpdateAllFirmwareRequest)},
  { 36, -1, sizeof(::logi::proto::UpdateAllFirmwareResponse)},
  { 43, -1, sizeof(::logi::proto::UpdateFirmwareByProductIdRequest)},
  { 50, -1, sizeof(::logi::proto::UpdateFirmwareByProductIdResponse)},
  { 57, -1, sizeof(::logi::proto::FirmwareRequest)},
  { 67, -1, sizeof(::logi::proto::FirmwareResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_GetFirmwareUpdateProgressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_GetFirmwareUpdateProgressResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_GetLatestFirmwareByProductIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_GetLatestFirmwareByProductIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_UpdateAllFirmwareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_UpdateAllFirmwareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_UpdateFirmwareByProductIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_UpdateFirmwareByProductIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_FirmwareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_FirmwareResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "firmware_requests.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027firmware_requests.proto\022\nlogi.proto\032\014c"
      "ommon.proto\032\031firmware_structures.proto\"4"
      "\n GetFirmwareUpdateProgressRequest\022\020\n\010re"
      "served\030\001 \001(\010\"{\n!GetFirmwareUpdateProgres"
      "sResponse\022!\n\006errors\030\001 \003(\0132\021.logi.proto.E"
      "rror\0223\n\007updates\030\002 \003(\0132\".logi.proto.Firmw"
      "areUpdateProgress\";\n#GetLatestFirmwareBy"
      "ProductIdRequest\022\024\n\014product_uuid\030\001 \001(\t\"\252"
      "\002\n$GetLatestFirmwareByProductIdResponse\022"
      "!\n\006errors\030\001 \003(\0132\021.logi.proto.Error\022\024\n\014pr"
      "oduct_uuid\030\002 \001(\t\022\'\n\037latest_firmware_pack"
      "age_version\030\003 \001(\t\022&\n\036latest_firmware_pub"
      "lished_date\030\004 \001(\r\022)\n!latest_firmware_rel"
      "ease_notes_uri\030\005 \001(\t\022M\n\037latest_device_fi"
      "rmware_versions\030\006 \003(\0132$.logi.proto.Lates"
      "tDeviceFirmwareInfo\",\n\030UpdateAllFirmware"
      "Request\022\020\n\010reserved\030\001 \001(\010\"s\n\031UpdateAllFi"
      "rmwareResponse\022!\n\006errors\030\001 \003(\0132\021.logi.pr"
      "oto.Error\0223\n\007updates\030\002 \003(\0132\".logi.proto."
      "FirmwareUpdateProgress\"Z\n UpdateFirmware"
      "ByProductIdRequest\022\024\n\014product_uuid\030\001 \001(\t"
      "\022 \n\030firmware_package_version\030\002 \001(\t\"z\n!Up"
      "dateFirmwareByProductIdResponse\022!\n\006error"
      "s\030\001 \003(\0132\021.logi.proto.Error\0222\n\006update\030\002 \001"
      "(\0132\".logi.proto.FirmwareUpdateProgress\"\204"
      "\003\n\017FirmwareRequest\022\\\n$get_firmware_updat"
      "e_progress_request\030\001 \001(\0132,.logi.proto.Ge"
      "tFirmwareUpdateProgressRequestH\000\022d\n)get_"
      "latest_firmware_by_product_id_request\030\002 "
      "\001(\0132/.logi.proto.GetLatestFirmwareByProd"
      "uctIdRequestH\000\022U\n\035update_firmware_by_id_"
      "request\030\003 \001(\0132,.logi.proto.UpdateFirmwar"
      "eByProductIdRequestH\000\022K\n\033update_all_firm"
      "ware_request\030\004 \001(\0132$.logi.proto.UpdateAl"
      "lFirmwareRequestH\000B\t\n\007request\"\216\003\n\020Firmwa"
      "reResponse\022^\n%get_firmware_update_progre"
      "ss_response\030\002 \001(\0132-.logi.proto.GetFirmwa"
      "reUpdateProgressResponseH\000\022f\n*get_latest"
      "_firmware_by_product_id_response\030\003 \001(\01320"
      ".logi.proto.GetLatestFirmwareByProductId"
      "ResponseH\000\022W\n\036update_firmware_by_id_resp"
      "onse\030\004 \001(\0132-.logi.proto.UpdateFirmwareBy"
      "ProductIdResponseH\000\022M\n\034update_all_firmwa"
      "re_response\030\005 \001(\0132%.logi.proto.UpdateAll"
      "FirmwareResponseH\000B\n\n\010responseB%\n#com.lo"
      "gitech.vc.sync.proto.messagesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1837);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "firmware_requests.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_firmware_5fstructures_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_firmware_5frequests_2eproto
namespace logi {
namespace proto {

// ===================================================================

void GetFirmwareUpdateProgressRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFirmwareUpdateProgressRequest::kReservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFirmwareUpdateProgressRequest::GetFirmwareUpdateProgressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_GetFirmwareUpdateProgressRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.GetFirmwareUpdateProgressRequest)
}
GetFirmwareUpdateProgressRequest::GetFirmwareUpdateProgressRequest(const GetFirmwareUpdateProgressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reserved_ = from.reserved_;
  // @@protoc_insertion_point(copy_constructor:logi.proto.GetFirmwareUpdateProgressRequest)
}

void GetFirmwareUpdateProgressRequest::SharedCtor() {
  reserved_ = false;
}

GetFirmwareUpdateProgressRequest::~GetFirmwareUpdateProgressRequest() {
  // @@protoc_insertion_point(destructor:logi.proto.GetFirmwareUpdateProgressRequest)
  SharedDtor();
}

void GetFirmwareUpdateProgressRequest::SharedDtor() {
}

void GetFirmwareUpdateProgressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetFirmwareUpdateProgressRequest::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetFirmwareUpdateProgressRequest& GetFirmwareUpdateProgressRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_GetFirmwareUpdateProgressRequest.base);
  return *internal_default_instance();
}


void GetFirmwareUpdateProgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.GetFirmwareUpdateProgressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reserved_ = false;
  _internal_metadata_.Clear();
}

bool GetFirmwareUpdateProgressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.GetFirmwareUpdateProgressRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool reserved = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.GetFirmwareUpdateProgressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.GetFirmwareUpdateProgressRequest)
  return false;
#undef DO_
}

void GetFirmwareUpdateProgressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.GetFirmwareUpdateProgressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reserved = 1;
  if (this->reserved() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reserved(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.GetFirmwareUpdateProgressRequest)
}

::google::protobuf::uint8* GetFirmwareUpdateProgressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.GetFirmwareUpdateProgressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reserved = 1;
  if (this->reserved() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reserved(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.GetFirmwareUpdateProgressRequest)
  return target;
}

size_t GetFirmwareUpdateProgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.GetFirmwareUpdateProgressRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool reserved = 1;
  if (this->reserved() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFirmwareUpdateProgressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.GetFirmwareUpdateProgressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFirmwareUpdateProgressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFirmwareUpdateProgressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.GetFirmwareUpdateProgressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.GetFirmwareUpdateProgressRequest)
    MergeFrom(*source);
  }
}

void GetFirmwareUpdateProgressRequest::MergeFrom(const GetFirmwareUpdateProgressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.GetFirmwareUpdateProgressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reserved() != 0) {
    set_reserved(from.reserved());
  }
}

void GetFirmwareUpdateProgressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.GetFirmwareUpdateProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFirmwareUpdateProgressRequest::CopyFrom(const GetFirmwareUpdateProgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.GetFirmwareUpdateProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFirmwareUpdateProgressRequest::IsInitialized() const {
  return true;
}

void GetFirmwareUpdateProgressRequest::Swap(GetFirmwareUpdateProgressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFirmwareUpdateProgressRequest::InternalSwap(GetFirmwareUpdateProgressRequest* other) {
  using std::swap;
  swap(reserved_, other->reserved_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetFirmwareUpdateProgressRequest::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetFirmwareUpdateProgressResponse::InitAsDefaultInstance() {
}
void GetFirmwareUpdateProgressResponse::clear_errors() {
  errors_.Clear();
}
void GetFirmwareUpdateProgressResponse::clear_updates() {
  updates_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFirmwareUpdateProgressResponse::kErrorsFieldNumber;
const int GetFirmwareUpdateProgressResponse::kUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFirmwareUpdateProgressResponse::GetFirmwareUpdateProgressResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_GetFirmwareUpdateProgressResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.GetFirmwareUpdateProgressResponse)
}
GetFirmwareUpdateProgressResponse::GetFirmwareUpdateProgressResponse(const GetFirmwareUpdateProgressResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      errors_(from.errors_),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:logi.proto.GetFirmwareUpdateProgressResponse)
}

void GetFirmwareUpdateProgressResponse::SharedCtor() {
}

GetFirmwareUpdateProgressResponse::~GetFirmwareUpdateProgressResponse() {
  // @@protoc_insertion_point(destructor:logi.proto.GetFirmwareUpdateProgressResponse)
  SharedDtor();
}

void GetFirmwareUpdateProgressResponse::SharedDtor() {
}

void GetFirmwareUpdateProgressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetFirmwareUpdateProgressResponse::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetFirmwareUpdateProgressResponse& GetFirmwareUpdateProgressResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_GetFirmwareUpdateProgressResponse.base);
  return *internal_default_instance();
}


void GetFirmwareUpdateProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.GetFirmwareUpdateProgressResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  updates_.Clear();
  _internal_metadata_.Clear();
}

bool GetFirmwareUpdateProgressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.GetFirmwareUpdateProgressResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .logi.proto.Error errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.GetFirmwareUpdateProgressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.GetFirmwareUpdateProgressResponse)
  return false;
#undef DO_
}

void GetFirmwareUpdateProgressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.GetFirmwareUpdateProgressResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logi.proto.Error errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->errors(static_cast<int>(i)),
      output);
  }

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->updates(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.GetFirmwareUpdateProgressResponse)
}

::google::protobuf::uint8* GetFirmwareUpdateProgressResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.GetFirmwareUpdateProgressResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logi.proto.Error errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->errors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->updates(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.GetFirmwareUpdateProgressResponse)
  return target;
}

size_t GetFirmwareUpdateProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.GetFirmwareUpdateProgressResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .logi.proto.Error errors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->updates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFirmwareUpdateProgressResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.GetFirmwareUpdateProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFirmwareUpdateProgressResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFirmwareUpdateProgressResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.GetFirmwareUpdateProgressResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.GetFirmwareUpdateProgressResponse)
    MergeFrom(*source);
  }
}

void GetFirmwareUpdateProgressResponse::MergeFrom(const GetFirmwareUpdateProgressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.GetFirmwareUpdateProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  updates_.MergeFrom(from.updates_);
}

void GetFirmwareUpdateProgressResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.GetFirmwareUpdateProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFirmwareUpdateProgressResponse::CopyFrom(const GetFirmwareUpdateProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.GetFirmwareUpdateProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFirmwareUpdateProgressResponse::IsInitialized() const {
  return true;
}

void GetFirmwareUpdateProgressResponse::Swap(GetFirmwareUpdateProgressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFirmwareUpdateProgressResponse::InternalSwap(GetFirmwareUpdateProgressResponse* other) {
  using std::swap;
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  CastToBase(&updates_)->InternalSwap(CastToBase(&other->updates_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetFirmwareUpdateProgressResponse::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetLatestFirmwareByProductIdRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLatestFirmwareByProductIdRequest::kProductUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLatestFirmwareByProductIdRequest::GetLatestFirmwareByProductIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_GetLatestFirmwareByProductIdRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.GetLatestFirmwareByProductIdRequest)
}
GetLatestFirmwareByProductIdRequest::GetLatestFirmwareByProductIdRequest(const GetLatestFirmwareByProductIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_uuid().size() > 0) {
    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.GetLatestFirmwareByProductIdRequest)
}

void GetLatestFirmwareByProductIdRequest::SharedCtor() {
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetLatestFirmwareByProductIdRequest::~GetLatestFirmwareByProductIdRequest() {
  // @@protoc_insertion_point(destructor:logi.proto.GetLatestFirmwareByProductIdRequest)
  SharedDtor();
}

void GetLatestFirmwareByProductIdRequest::SharedDtor() {
  product_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetLatestFirmwareByProductIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetLatestFirmwareByProductIdRequest::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLatestFirmwareByProductIdRequest& GetLatestFirmwareByProductIdRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_GetLatestFirmwareByProductIdRequest.base);
  return *internal_default_instance();
}


void GetLatestFirmwareByProductIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetLatestFirmwareByProductIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.GetLatestFirmwareByProductIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.GetLatestFirmwareByProductIdRequest)
  return false;
#undef DO_
}

void GetLatestFirmwareByProductIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_uuid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.GetLatestFirmwareByProductIdRequest)
}

::google::protobuf::uint8* GetLatestFirmwareByProductIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_uuid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.GetLatestFirmwareByProductIdRequest)
  return target;
}

size_t GetLatestFirmwareByProductIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLatestFirmwareByProductIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLatestFirmwareByProductIdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLatestFirmwareByProductIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.GetLatestFirmwareByProductIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.GetLatestFirmwareByProductIdRequest)
    MergeFrom(*source);
  }
}

void GetLatestFirmwareByProductIdRequest::MergeFrom(const GetLatestFirmwareByProductIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_uuid().size() > 0) {

    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
}

void GetLatestFirmwareByProductIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestFirmwareByProductIdRequest::CopyFrom(const GetLatestFirmwareByProductIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.GetLatestFirmwareByProductIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestFirmwareByProductIdRequest::IsInitialized() const {
  return true;
}

void GetLatestFirmwareByProductIdRequest::Swap(GetLatestFirmwareByProductIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLatestFirmwareByProductIdRequest::InternalSwap(GetLatestFirmwareByProductIdRequest* other) {
  using std::swap;
  product_uuid_.Swap(&other->product_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetLatestFirmwareByProductIdRequest::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetLatestFirmwareByProductIdResponse::InitAsDefaultInstance() {
}
void GetLatestFirmwareByProductIdResponse::clear_errors() {
  errors_.Clear();
}
void GetLatestFirmwareByProductIdResponse::clear_latest_device_firmware_versions() {
  latest_device_firmware_versions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLatestFirmwareByProductIdResponse::kErrorsFieldNumber;
const int GetLatestFirmwareByProductIdResponse::kProductUuidFieldNumber;
const int GetLatestFirmwareByProductIdResponse::kLatestFirmwarePackageVersionFieldNumber;
const int GetLatestFirmwareByProductIdResponse::kLatestFirmwarePublishedDateFieldNumber;
const int GetLatestFirmwareByProductIdResponse::kLatestFirmwareReleaseNotesUriFieldNumber;
const int GetLatestFirmwareByProductIdResponse::kLatestDeviceFirmwareVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLatestFirmwareByProductIdResponse::GetLatestFirmwareByProductIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_GetLatestFirmwareByProductIdResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.GetLatestFirmwareByProductIdResponse)
}
GetLatestFirmwareByProductIdResponse::GetLatestFirmwareByProductIdResponse(const GetLatestFirmwareByProductIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      errors_(from.errors_),
      latest_device_firmware_versions_(from.latest_device_firmware_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_uuid().size() > 0) {
    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  latest_firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latest_firmware_package_version().size() > 0) {
    latest_firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_package_version_);
  }
  latest_firmware_release_notes_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latest_firmware_release_notes_uri().size() > 0) {
    latest_firmware_release_notes_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_release_notes_uri_);
  }
  latest_firmware_published_date_ = from.latest_firmware_published_date_;
  // @@protoc_insertion_point(copy_constructor:logi.proto.GetLatestFirmwareByProductIdResponse)
}

void GetLatestFirmwareByProductIdResponse::SharedCtor() {
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_release_notes_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_published_date_ = 0u;
}

GetLatestFirmwareByProductIdResponse::~GetLatestFirmwareByProductIdResponse() {
  // @@protoc_insertion_point(destructor:logi.proto.GetLatestFirmwareByProductIdResponse)
  SharedDtor();
}

void GetLatestFirmwareByProductIdResponse::SharedDtor() {
  product_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_package_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_release_notes_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetLatestFirmwareByProductIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetLatestFirmwareByProductIdResponse::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLatestFirmwareByProductIdResponse& GetLatestFirmwareByProductIdResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_GetLatestFirmwareByProductIdResponse.base);
  return *internal_default_instance();
}


void GetLatestFirmwareByProductIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  latest_device_firmware_versions_.Clear();
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_release_notes_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_published_date_ = 0u;
  _internal_metadata_.Clear();
}

bool GetLatestFirmwareByProductIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .logi.proto.Error errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string latest_firmware_package_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_firmware_package_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latest_firmware_package_version().data(), static_cast<int>(this->latest_firmware_package_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_firmware_published_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_firmware_published_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string latest_firmware_release_notes_uri = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_firmware_release_notes_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latest_firmware_release_notes_uri().data(), static_cast<int>(this->latest_firmware_release_notes_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .logi.proto.LatestDeviceFirmwareInfo latest_device_firmware_versions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_latest_device_firmware_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.GetLatestFirmwareByProductIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.GetLatestFirmwareByProductIdResponse)
  return false;
#undef DO_
}

void GetLatestFirmwareByProductIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logi.proto.Error errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->errors(static_cast<int>(i)),
      output);
  }

  // string product_uuid = 2;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_uuid(), output);
  }

  // string latest_firmware_package_version = 3;
  if (this->latest_firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware_package_version().data(), static_cast<int>(this->latest_firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->latest_firmware_package_version(), output);
  }

  // uint32 latest_firmware_published_date = 4;
  if (this->latest_firmware_published_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latest_firmware_published_date(), output);
  }

  // string latest_firmware_release_notes_uri = 5;
  if (this->latest_firmware_release_notes_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware_release_notes_uri().data(), static_cast<int>(this->latest_firmware_release_notes_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->latest_firmware_release_notes_uri(), output);
  }

  // repeated .logi.proto.LatestDeviceFirmwareInfo latest_device_firmware_versions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latest_device_firmware_versions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->latest_device_firmware_versions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.GetLatestFirmwareByProductIdResponse)
}

::google::protobuf::uint8* GetLatestFirmwareByProductIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logi.proto.Error errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->errors(static_cast<int>(i)), deterministic, target);
  }

  // string product_uuid = 2;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product_uuid(), target);
  }

  // string latest_firmware_package_version = 3;
  if (this->latest_firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware_package_version().data(), static_cast<int>(this->latest_firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->latest_firmware_package_version(), target);
  }

  // uint32 latest_firmware_published_date = 4;
  if (this->latest_firmware_published_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->latest_firmware_published_date(), target);
  }

  // string latest_firmware_release_notes_uri = 5;
  if (this->latest_firmware_release_notes_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware_release_notes_uri().data(), static_cast<int>(this->latest_firmware_release_notes_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->latest_firmware_release_notes_uri(), target);
  }

  // repeated .logi.proto.LatestDeviceFirmwareInfo latest_device_firmware_versions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latest_device_firmware_versions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->latest_device_firmware_versions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.GetLatestFirmwareByProductIdResponse)
  return target;
}

size_t GetLatestFirmwareByProductIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .logi.proto.Error errors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // repeated .logi.proto.LatestDeviceFirmwareInfo latest_device_firmware_versions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->latest_device_firmware_versions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->latest_device_firmware_versions(static_cast<int>(i)));
    }
  }

  // string product_uuid = 2;
  if (this->product_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_uuid());
  }

  // string latest_firmware_package_version = 3;
  if (this->latest_firmware_package_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latest_firmware_package_version());
  }

  // string latest_firmware_release_notes_uri = 5;
  if (this->latest_firmware_release_notes_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latest_firmware_release_notes_uri());
  }

  // uint32 latest_firmware_published_date = 4;
  if (this->latest_firmware_published_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_firmware_published_date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLatestFirmwareByProductIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLatestFirmwareByProductIdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLatestFirmwareByProductIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.GetLatestFirmwareByProductIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.GetLatestFirmwareByProductIdResponse)
    MergeFrom(*source);
  }
}

void GetLatestFirmwareByProductIdResponse::MergeFrom(const GetLatestFirmwareByProductIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  latest_device_firmware_versions_.MergeFrom(from.latest_device_firmware_versions_);
  if (from.product_uuid().size() > 0) {

    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  if (from.latest_firmware_package_version().size() > 0) {

    latest_firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_package_version_);
  }
  if (from.latest_firmware_release_notes_uri().size() > 0) {

    latest_firmware_release_notes_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_release_notes_uri_);
  }
  if (from.latest_firmware_published_date() != 0) {
    set_latest_firmware_published_date(from.latest_firmware_published_date());
  }
}

void GetLatestFirmwareByProductIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestFirmwareByProductIdResponse::CopyFrom(const GetLatestFirmwareByProductIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.GetLatestFirmwareByProductIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestFirmwareByProductIdResponse::IsInitialized() const {
  return true;
}

void GetLatestFirmwareByProductIdResponse::Swap(GetLatestFirmwareByProductIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLatestFirmwareByProductIdResponse::InternalSwap(GetLatestFirmwareByProductIdResponse* other) {
  using std::swap;
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  CastToBase(&latest_device_firmware_versions_)->InternalSwap(CastToBase(&other->latest_device_firmware_versions_));
  product_uuid_.Swap(&other->product_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  latest_firmware_package_version_.Swap(&other->latest_firmware_package_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  latest_firmware_release_notes_uri_.Swap(&other->latest_firmware_release_notes_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(latest_firmware_published_date_, other->latest_firmware_published_date_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetLatestFirmwareByProductIdResponse::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateAllFirmwareRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateAllFirmwareRequest::kReservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateAllFirmwareRequest::UpdateAllFirmwareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_UpdateAllFirmwareRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.UpdateAllFirmwareRequest)
}
UpdateAllFirmwareRequest::UpdateAllFirmwareRequest(const UpdateAllFirmwareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reserved_ = from.reserved_;
  // @@protoc_insertion_point(copy_constructor:logi.proto.UpdateAllFirmwareRequest)
}

void UpdateAllFirmwareRequest::SharedCtor() {
  reserved_ = false;
}

UpdateAllFirmwareRequest::~UpdateAllFirmwareRequest() {
  // @@protoc_insertion_point(destructor:logi.proto.UpdateAllFirmwareRequest)
  SharedDtor();
}

void UpdateAllFirmwareRequest::SharedDtor() {
}

void UpdateAllFirmwareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateAllFirmwareRequest::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateAllFirmwareRequest& UpdateAllFirmwareRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_UpdateAllFirmwareRequest.base);
  return *internal_default_instance();
}


void UpdateAllFirmwareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.UpdateAllFirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reserved_ = false;
  _internal_metadata_.Clear();
}

bool UpdateAllFirmwareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.UpdateAllFirmwareRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool reserved = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.UpdateAllFirmwareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.UpdateAllFirmwareRequest)
  return false;
#undef DO_
}

void UpdateAllFirmwareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.UpdateAllFirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reserved = 1;
  if (this->reserved() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reserved(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.UpdateAllFirmwareRequest)
}

::google::protobuf::uint8* UpdateAllFirmwareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.UpdateAllFirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reserved = 1;
  if (this->reserved() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reserved(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.UpdateAllFirmwareRequest)
  return target;
}

size_t UpdateAllFirmwareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.UpdateAllFirmwareRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool reserved = 1;
  if (this->reserved() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAllFirmwareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.UpdateAllFirmwareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAllFirmwareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateAllFirmwareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.UpdateAllFirmwareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.UpdateAllFirmwareRequest)
    MergeFrom(*source);
  }
}

void UpdateAllFirmwareRequest::MergeFrom(const UpdateAllFirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.UpdateAllFirmwareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reserved() != 0) {
    set_reserved(from.reserved());
  }
}

void UpdateAllFirmwareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.UpdateAllFirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAllFirmwareRequest::CopyFrom(const UpdateAllFirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.UpdateAllFirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAllFirmwareRequest::IsInitialized() const {
  return true;
}

void UpdateAllFirmwareRequest::Swap(UpdateAllFirmwareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateAllFirmwareRequest::InternalSwap(UpdateAllFirmwareRequest* other) {
  using std::swap;
  swap(reserved_, other->reserved_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateAllFirmwareRequest::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateAllFirmwareResponse::InitAsDefaultInstance() {
}
void UpdateAllFirmwareResponse::clear_errors() {
  errors_.Clear();
}
void UpdateAllFirmwareResponse::clear_updates() {
  updates_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateAllFirmwareResponse::kErrorsFieldNumber;
const int UpdateAllFirmwareResponse::kUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateAllFirmwareResponse::UpdateAllFirmwareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_UpdateAllFirmwareResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.UpdateAllFirmwareResponse)
}
UpdateAllFirmwareResponse::UpdateAllFirmwareResponse(const UpdateAllFirmwareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      errors_(from.errors_),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:logi.proto.UpdateAllFirmwareResponse)
}

void UpdateAllFirmwareResponse::SharedCtor() {
}

UpdateAllFirmwareResponse::~UpdateAllFirmwareResponse() {
  // @@protoc_insertion_point(destructor:logi.proto.UpdateAllFirmwareResponse)
  SharedDtor();
}

void UpdateAllFirmwareResponse::SharedDtor() {
}

void UpdateAllFirmwareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateAllFirmwareResponse::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateAllFirmwareResponse& UpdateAllFirmwareResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_UpdateAllFirmwareResponse.base);
  return *internal_default_instance();
}


void UpdateAllFirmwareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.UpdateAllFirmwareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  updates_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateAllFirmwareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.UpdateAllFirmwareResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .logi.proto.Error errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.UpdateAllFirmwareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.UpdateAllFirmwareResponse)
  return false;
#undef DO_
}

void UpdateAllFirmwareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.UpdateAllFirmwareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logi.proto.Error errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->errors(static_cast<int>(i)),
      output);
  }

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->updates(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.UpdateAllFirmwareResponse)
}

::google::protobuf::uint8* UpdateAllFirmwareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.UpdateAllFirmwareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logi.proto.Error errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->errors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->updates(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.UpdateAllFirmwareResponse)
  return target;
}

size_t UpdateAllFirmwareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.UpdateAllFirmwareResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .logi.proto.Error errors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->updates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAllFirmwareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.UpdateAllFirmwareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAllFirmwareResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateAllFirmwareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.UpdateAllFirmwareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.UpdateAllFirmwareResponse)
    MergeFrom(*source);
  }
}

void UpdateAllFirmwareResponse::MergeFrom(const UpdateAllFirmwareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.UpdateAllFirmwareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  updates_.MergeFrom(from.updates_);
}

void UpdateAllFirmwareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.UpdateAllFirmwareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAllFirmwareResponse::CopyFrom(const UpdateAllFirmwareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.UpdateAllFirmwareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAllFirmwareResponse::IsInitialized() const {
  return true;
}

void UpdateAllFirmwareResponse::Swap(UpdateAllFirmwareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateAllFirmwareResponse::InternalSwap(UpdateAllFirmwareResponse* other) {
  using std::swap;
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  CastToBase(&updates_)->InternalSwap(CastToBase(&other->updates_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateAllFirmwareResponse::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateFirmwareByProductIdRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateFirmwareByProductIdRequest::kProductUuidFieldNumber;
const int UpdateFirmwareByProductIdRequest::kFirmwarePackageVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateFirmwareByProductIdRequest::UpdateFirmwareByProductIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_UpdateFirmwareByProductIdRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.UpdateFirmwareByProductIdRequest)
}
UpdateFirmwareByProductIdRequest::UpdateFirmwareByProductIdRequest(const UpdateFirmwareByProductIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_uuid().size() > 0) {
    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_package_version().size() > 0) {
    firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_package_version_);
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.UpdateFirmwareByProductIdRequest)
}

void UpdateFirmwareByProductIdRequest::SharedCtor() {
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateFirmwareByProductIdRequest::~UpdateFirmwareByProductIdRequest() {
  // @@protoc_insertion_point(destructor:logi.proto.UpdateFirmwareByProductIdRequest)
  SharedDtor();
}

void UpdateFirmwareByProductIdRequest::SharedDtor() {
  product_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateFirmwareByProductIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateFirmwareByProductIdRequest::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateFirmwareByProductIdRequest& UpdateFirmwareByProductIdRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_UpdateFirmwareByProductIdRequest.base);
  return *internal_default_instance();
}


void UpdateFirmwareByProductIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.UpdateFirmwareByProductIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UpdateFirmwareByProductIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.UpdateFirmwareByProductIdRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.UpdateFirmwareByProductIdRequest.product_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_package_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_package_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.UpdateFirmwareByProductIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.UpdateFirmwareByProductIdRequest)
  return false;
#undef DO_
}

void UpdateFirmwareByProductIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.UpdateFirmwareByProductIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.UpdateFirmwareByProductIdRequest.product_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_uuid(), output);
  }

  // string firmware_package_version = 2;
  if (this->firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firmware_package_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.UpdateFirmwareByProductIdRequest)
}

::google::protobuf::uint8* UpdateFirmwareByProductIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.UpdateFirmwareByProductIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.UpdateFirmwareByProductIdRequest.product_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_uuid(), target);
  }

  // string firmware_package_version = 2;
  if (this->firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firmware_package_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.UpdateFirmwareByProductIdRequest)
  return target;
}

size_t UpdateFirmwareByProductIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.UpdateFirmwareByProductIdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_uuid());
  }

  // string firmware_package_version = 2;
  if (this->firmware_package_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_package_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFirmwareByProductIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.UpdateFirmwareByProductIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFirmwareByProductIdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateFirmwareByProductIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.UpdateFirmwareByProductIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.UpdateFirmwareByProductIdRequest)
    MergeFrom(*source);
  }
}

void UpdateFirmwareByProductIdRequest::MergeFrom(const UpdateFirmwareByProductIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.UpdateFirmwareByProductIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_uuid().size() > 0) {

    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  if (from.firmware_package_version().size() > 0) {

    firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_package_version_);
  }
}

void UpdateFirmwareByProductIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.UpdateFirmwareByProductIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFirmwareByProductIdRequest::CopyFrom(const UpdateFirmwareByProductIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.UpdateFirmwareByProductIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFirmwareByProductIdRequest::IsInitialized() const {
  return true;
}

void UpdateFirmwareByProductIdRequest::Swap(UpdateFirmwareByProductIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateFirmwareByProductIdRequest::InternalSwap(UpdateFirmwareByProductIdRequest* other) {
  using std::swap;
  product_uuid_.Swap(&other->product_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firmware_package_version_.Swap(&other->firmware_package_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateFirmwareByProductIdRequest::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateFirmwareByProductIdResponse::InitAsDefaultInstance() {
  ::logi::proto::_UpdateFirmwareByProductIdResponse_default_instance_._instance.get_mutable()->update_ = const_cast< ::logi::proto::FirmwareUpdateProgress*>(
      ::logi::proto::FirmwareUpdateProgress::internal_default_instance());
}
void UpdateFirmwareByProductIdResponse::clear_errors() {
  errors_.Clear();
}
void UpdateFirmwareByProductIdResponse::clear_update() {
  if (GetArenaNoVirtual() == NULL && update_ != NULL) {
    delete update_;
  }
  update_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateFirmwareByProductIdResponse::kErrorsFieldNumber;
const int UpdateFirmwareByProductIdResponse::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateFirmwareByProductIdResponse::UpdateFirmwareByProductIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_UpdateFirmwareByProductIdResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.UpdateFirmwareByProductIdResponse)
}
UpdateFirmwareByProductIdResponse::UpdateFirmwareByProductIdResponse(const UpdateFirmwareByProductIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update()) {
    update_ = new ::logi::proto::FirmwareUpdateProgress(*from.update_);
  } else {
    update_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.UpdateFirmwareByProductIdResponse)
}

void UpdateFirmwareByProductIdResponse::SharedCtor() {
  update_ = NULL;
}

UpdateFirmwareByProductIdResponse::~UpdateFirmwareByProductIdResponse() {
  // @@protoc_insertion_point(destructor:logi.proto.UpdateFirmwareByProductIdResponse)
  SharedDtor();
}

void UpdateFirmwareByProductIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete update_;
}

void UpdateFirmwareByProductIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpdateFirmwareByProductIdResponse::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateFirmwareByProductIdResponse& UpdateFirmwareByProductIdResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_UpdateFirmwareByProductIdResponse.base);
  return *internal_default_instance();
}


void UpdateFirmwareByProductIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.UpdateFirmwareByProductIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  if (GetArenaNoVirtual() == NULL && update_ != NULL) {
    delete update_;
  }
  update_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateFirmwareByProductIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.UpdateFirmwareByProductIdResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .logi.proto.Error errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.FirmwareUpdateProgress update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.UpdateFirmwareByProductIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.UpdateFirmwareByProductIdResponse)
  return false;
#undef DO_
}

void UpdateFirmwareByProductIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.UpdateFirmwareByProductIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logi.proto.Error errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->errors(static_cast<int>(i)),
      output);
  }

  // .logi.proto.FirmwareUpdateProgress update = 2;
  if (this->has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_update(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.UpdateFirmwareByProductIdResponse)
}

::google::protobuf::uint8* UpdateFirmwareByProductIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.UpdateFirmwareByProductIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logi.proto.Error errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->errors(static_cast<int>(i)), deterministic, target);
  }

  // .logi.proto.FirmwareUpdateProgress update = 2;
  if (this->has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_update(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.UpdateFirmwareByProductIdResponse)
  return target;
}

size_t UpdateFirmwareByProductIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.UpdateFirmwareByProductIdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .logi.proto.Error errors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // .logi.proto.FirmwareUpdateProgress update = 2;
  if (this->has_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFirmwareByProductIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.UpdateFirmwareByProductIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFirmwareByProductIdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateFirmwareByProductIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.UpdateFirmwareByProductIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.UpdateFirmwareByProductIdResponse)
    MergeFrom(*source);
  }
}

void UpdateFirmwareByProductIdResponse::MergeFrom(const UpdateFirmwareByProductIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.UpdateFirmwareByProductIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.has_update()) {
    mutable_update()->::logi::proto::FirmwareUpdateProgress::MergeFrom(from.update());
  }
}

void UpdateFirmwareByProductIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.UpdateFirmwareByProductIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFirmwareByProductIdResponse::CopyFrom(const UpdateFirmwareByProductIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.UpdateFirmwareByProductIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFirmwareByProductIdResponse::IsInitialized() const {
  return true;
}

void UpdateFirmwareByProductIdResponse::Swap(UpdateFirmwareByProductIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateFirmwareByProductIdResponse::InternalSwap(UpdateFirmwareByProductIdResponse* other) {
  using std::swap;
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  swap(update_, other->update_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpdateFirmwareByProductIdResponse::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareRequest::InitAsDefaultInstance() {
  ::logi::proto::_FirmwareRequest_default_instance_.get_firmware_update_progress_request_ = const_cast< ::logi::proto::GetFirmwareUpdateProgressRequest*>(
      ::logi::proto::GetFirmwareUpdateProgressRequest::internal_default_instance());
  ::logi::proto::_FirmwareRequest_default_instance_.get_latest_firmware_by_product_id_request_ = const_cast< ::logi::proto::GetLatestFirmwareByProductIdRequest*>(
      ::logi::proto::GetLatestFirmwareByProductIdRequest::internal_default_instance());
  ::logi::proto::_FirmwareRequest_default_instance_.update_firmware_by_id_request_ = const_cast< ::logi::proto::UpdateFirmwareByProductIdRequest*>(
      ::logi::proto::UpdateFirmwareByProductIdRequest::internal_default_instance());
  ::logi::proto::_FirmwareRequest_default_instance_.update_all_firmware_request_ = const_cast< ::logi::proto::UpdateAllFirmwareRequest*>(
      ::logi::proto::UpdateAllFirmwareRequest::internal_default_instance());
}
void FirmwareRequest::set_allocated_get_firmware_update_progress_request(::logi::proto::GetFirmwareUpdateProgressRequest* get_firmware_update_progress_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (get_firmware_update_progress_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_firmware_update_progress_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_firmware_update_progress_request, submessage_arena);
    }
    set_has_get_firmware_update_progress_request();
    request_.get_firmware_update_progress_request_ = get_firmware_update_progress_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareRequest.get_firmware_update_progress_request)
}
void FirmwareRequest::set_allocated_get_latest_firmware_by_product_id_request(::logi::proto::GetLatestFirmwareByProductIdRequest* get_latest_firmware_by_product_id_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (get_latest_firmware_by_product_id_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_latest_firmware_by_product_id_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_latest_firmware_by_product_id_request, submessage_arena);
    }
    set_has_get_latest_firmware_by_product_id_request();
    request_.get_latest_firmware_by_product_id_request_ = get_latest_firmware_by_product_id_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareRequest.get_latest_firmware_by_product_id_request)
}
void FirmwareRequest::set_allocated_update_firmware_by_id_request(::logi::proto::UpdateFirmwareByProductIdRequest* update_firmware_by_id_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (update_firmware_by_id_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_firmware_by_id_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_firmware_by_id_request, submessage_arena);
    }
    set_has_update_firmware_by_id_request();
    request_.update_firmware_by_id_request_ = update_firmware_by_id_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareRequest.update_firmware_by_id_request)
}
void FirmwareRequest::set_allocated_update_all_firmware_request(::logi::proto::UpdateAllFirmwareRequest* update_all_firmware_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (update_all_firmware_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_all_firmware_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_all_firmware_request, submessage_arena);
    }
    set_has_update_all_firmware_request();
    request_.update_all_firmware_request_ = update_all_firmware_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareRequest.update_all_firmware_request)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareRequest::kGetFirmwareUpdateProgressRequestFieldNumber;
const int FirmwareRequest::kGetLatestFirmwareByProductIdRequestFieldNumber;
const int FirmwareRequest::kUpdateFirmwareByIdRequestFieldNumber;
const int FirmwareRequest::kUpdateAllFirmwareRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareRequest::FirmwareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_FirmwareRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.FirmwareRequest)
}
FirmwareRequest::FirmwareRequest(const FirmwareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kGetFirmwareUpdateProgressRequest: {
      mutable_get_firmware_update_progress_request()->::logi::proto::GetFirmwareUpdateProgressRequest::MergeFrom(from.get_firmware_update_progress_request());
      break;
    }
    case kGetLatestFirmwareByProductIdRequest: {
      mutable_get_latest_firmware_by_product_id_request()->::logi::proto::GetLatestFirmwareByProductIdRequest::MergeFrom(from.get_latest_firmware_by_product_id_request());
      break;
    }
    case kUpdateFirmwareByIdRequest: {
      mutable_update_firmware_by_id_request()->::logi::proto::UpdateFirmwareByProductIdRequest::MergeFrom(from.update_firmware_by_id_request());
      break;
    }
    case kUpdateAllFirmwareRequest: {
      mutable_update_all_firmware_request()->::logi::proto::UpdateAllFirmwareRequest::MergeFrom(from.update_all_firmware_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.FirmwareRequest)
}

void FirmwareRequest::SharedCtor() {
  clear_has_request();
}

FirmwareRequest::~FirmwareRequest() {
  // @@protoc_insertion_point(destructor:logi.proto.FirmwareRequest)
  SharedDtor();
}

void FirmwareRequest::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void FirmwareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareRequest::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareRequest& FirmwareRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_FirmwareRequest.base);
  return *internal_default_instance();
}


void FirmwareRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:logi.proto.FirmwareRequest)
  switch (request_case()) {
    case kGetFirmwareUpdateProgressRequest: {
      delete request_.get_firmware_update_progress_request_;
      break;
    }
    case kGetLatestFirmwareByProductIdRequest: {
      delete request_.get_latest_firmware_by_product_id_request_;
      break;
    }
    case kUpdateFirmwareByIdRequest: {
      delete request_.update_firmware_by_id_request_;
      break;
    }
    case kUpdateAllFirmwareRequest: {
      delete request_.update_all_firmware_request_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void FirmwareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.FirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear();
}

bool FirmwareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.FirmwareRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.GetFirmwareUpdateProgressRequest get_firmware_update_progress_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_firmware_update_progress_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.GetLatestFirmwareByProductIdRequest get_latest_firmware_by_product_id_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_latest_firmware_by_product_id_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.UpdateFirmwareByProductIdRequest update_firmware_by_id_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_firmware_by_id_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.UpdateAllFirmwareRequest update_all_firmware_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_all_firmware_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.FirmwareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.FirmwareRequest)
  return false;
#undef DO_
}

void FirmwareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.FirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.GetFirmwareUpdateProgressRequest get_firmware_update_progress_request = 1;
  if (has_get_firmware_update_progress_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_get_firmware_update_progress_request(), output);
  }

  // .logi.proto.GetLatestFirmwareByProductIdRequest get_latest_firmware_by_product_id_request = 2;
  if (has_get_latest_firmware_by_product_id_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_get_latest_firmware_by_product_id_request(), output);
  }

  // .logi.proto.UpdateFirmwareByProductIdRequest update_firmware_by_id_request = 3;
  if (has_update_firmware_by_id_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_update_firmware_by_id_request(), output);
  }

  // .logi.proto.UpdateAllFirmwareRequest update_all_firmware_request = 4;
  if (has_update_all_firmware_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_update_all_firmware_request(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.FirmwareRequest)
}

::google::protobuf::uint8* FirmwareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.FirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.GetFirmwareUpdateProgressRequest get_firmware_update_progress_request = 1;
  if (has_get_firmware_update_progress_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_get_firmware_update_progress_request(), deterministic, target);
  }

  // .logi.proto.GetLatestFirmwareByProductIdRequest get_latest_firmware_by_product_id_request = 2;
  if (has_get_latest_firmware_by_product_id_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_get_latest_firmware_by_product_id_request(), deterministic, target);
  }

  // .logi.proto.UpdateFirmwareByProductIdRequest update_firmware_by_id_request = 3;
  if (has_update_firmware_by_id_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_update_firmware_by_id_request(), deterministic, target);
  }

  // .logi.proto.UpdateAllFirmwareRequest update_all_firmware_request = 4;
  if (has_update_all_firmware_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_update_all_firmware_request(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.FirmwareRequest)
  return target;
}

size_t FirmwareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.FirmwareRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (request_case()) {
    // .logi.proto.GetFirmwareUpdateProgressRequest get_firmware_update_progress_request = 1;
    case kGetFirmwareUpdateProgressRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.get_firmware_update_progress_request_);
      break;
    }
    // .logi.proto.GetLatestFirmwareByProductIdRequest get_latest_firmware_by_product_id_request = 2;
    case kGetLatestFirmwareByProductIdRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.get_latest_firmware_by_product_id_request_);
      break;
    }
    // .logi.proto.UpdateFirmwareByProductIdRequest update_firmware_by_id_request = 3;
    case kUpdateFirmwareByIdRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.update_firmware_by_id_request_);
      break;
    }
    // .logi.proto.UpdateAllFirmwareRequest update_all_firmware_request = 4;
    case kUpdateAllFirmwareRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.update_all_firmware_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.FirmwareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.FirmwareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.FirmwareRequest)
    MergeFrom(*source);
  }
}

void FirmwareRequest::MergeFrom(const FirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.FirmwareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kGetFirmwareUpdateProgressRequest: {
      mutable_get_firmware_update_progress_request()->::logi::proto::GetFirmwareUpdateProgressRequest::MergeFrom(from.get_firmware_update_progress_request());
      break;
    }
    case kGetLatestFirmwareByProductIdRequest: {
      mutable_get_latest_firmware_by_product_id_request()->::logi::proto::GetLatestFirmwareByProductIdRequest::MergeFrom(from.get_latest_firmware_by_product_id_request());
      break;
    }
    case kUpdateFirmwareByIdRequest: {
      mutable_update_firmware_by_id_request()->::logi::proto::UpdateFirmwareByProductIdRequest::MergeFrom(from.update_firmware_by_id_request());
      break;
    }
    case kUpdateAllFirmwareRequest: {
      mutable_update_all_firmware_request()->::logi::proto::UpdateAllFirmwareRequest::MergeFrom(from.update_all_firmware_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void FirmwareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.FirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareRequest::CopyFrom(const FirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.FirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareRequest::IsInitialized() const {
  return true;
}

void FirmwareRequest::Swap(FirmwareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareRequest::InternalSwap(FirmwareRequest* other) {
  using std::swap;
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareRequest::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareResponse::InitAsDefaultInstance() {
  ::logi::proto::_FirmwareResponse_default_instance_.get_firmware_update_progress_response_ = const_cast< ::logi::proto::GetFirmwareUpdateProgressResponse*>(
      ::logi::proto::GetFirmwareUpdateProgressResponse::internal_default_instance());
  ::logi::proto::_FirmwareResponse_default_instance_.get_latest_firmware_by_product_id_response_ = const_cast< ::logi::proto::GetLatestFirmwareByProductIdResponse*>(
      ::logi::proto::GetLatestFirmwareByProductIdResponse::internal_default_instance());
  ::logi::proto::_FirmwareResponse_default_instance_.update_firmware_by_id_response_ = const_cast< ::logi::proto::UpdateFirmwareByProductIdResponse*>(
      ::logi::proto::UpdateFirmwareByProductIdResponse::internal_default_instance());
  ::logi::proto::_FirmwareResponse_default_instance_.update_all_firmware_response_ = const_cast< ::logi::proto::UpdateAllFirmwareResponse*>(
      ::logi::proto::UpdateAllFirmwareResponse::internal_default_instance());
}
void FirmwareResponse::set_allocated_get_firmware_update_progress_response(::logi::proto::GetFirmwareUpdateProgressResponse* get_firmware_update_progress_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (get_firmware_update_progress_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_firmware_update_progress_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_firmware_update_progress_response, submessage_arena);
    }
    set_has_get_firmware_update_progress_response();
    response_.get_firmware_update_progress_response_ = get_firmware_update_progress_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareResponse.get_firmware_update_progress_response)
}
void FirmwareResponse::set_allocated_get_latest_firmware_by_product_id_response(::logi::proto::GetLatestFirmwareByProductIdResponse* get_latest_firmware_by_product_id_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (get_latest_firmware_by_product_id_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_latest_firmware_by_product_id_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_latest_firmware_by_product_id_response, submessage_arena);
    }
    set_has_get_latest_firmware_by_product_id_response();
    response_.get_latest_firmware_by_product_id_response_ = get_latest_firmware_by_product_id_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareResponse.get_latest_firmware_by_product_id_response)
}
void FirmwareResponse::set_allocated_update_firmware_by_id_response(::logi::proto::UpdateFirmwareByProductIdResponse* update_firmware_by_id_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (update_firmware_by_id_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_firmware_by_id_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_firmware_by_id_response, submessage_arena);
    }
    set_has_update_firmware_by_id_response();
    response_.update_firmware_by_id_response_ = update_firmware_by_id_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareResponse.update_firmware_by_id_response)
}
void FirmwareResponse::set_allocated_update_all_firmware_response(::logi::proto::UpdateAllFirmwareResponse* update_all_firmware_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (update_all_firmware_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_all_firmware_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_all_firmware_response, submessage_arena);
    }
    set_has_update_all_firmware_response();
    response_.update_all_firmware_response_ = update_all_firmware_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareResponse.update_all_firmware_response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareResponse::kGetFirmwareUpdateProgressResponseFieldNumber;
const int FirmwareResponse::kGetLatestFirmwareByProductIdResponseFieldNumber;
const int FirmwareResponse::kUpdateFirmwareByIdResponseFieldNumber;
const int FirmwareResponse::kUpdateAllFirmwareResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareResponse::FirmwareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5frequests_2eproto::scc_info_FirmwareResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.FirmwareResponse)
}
FirmwareResponse::FirmwareResponse(const FirmwareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kGetFirmwareUpdateProgressResponse: {
      mutable_get_firmware_update_progress_response()->::logi::proto::GetFirmwareUpdateProgressResponse::MergeFrom(from.get_firmware_update_progress_response());
      break;
    }
    case kGetLatestFirmwareByProductIdResponse: {
      mutable_get_latest_firmware_by_product_id_response()->::logi::proto::GetLatestFirmwareByProductIdResponse::MergeFrom(from.get_latest_firmware_by_product_id_response());
      break;
    }
    case kUpdateFirmwareByIdResponse: {
      mutable_update_firmware_by_id_response()->::logi::proto::UpdateFirmwareByProductIdResponse::MergeFrom(from.update_firmware_by_id_response());
      break;
    }
    case kUpdateAllFirmwareResponse: {
      mutable_update_all_firmware_response()->::logi::proto::UpdateAllFirmwareResponse::MergeFrom(from.update_all_firmware_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.FirmwareResponse)
}

void FirmwareResponse::SharedCtor() {
  clear_has_response();
}

FirmwareResponse::~FirmwareResponse() {
  // @@protoc_insertion_point(destructor:logi.proto.FirmwareResponse)
  SharedDtor();
}

void FirmwareResponse::SharedDtor() {
  if (has_response()) {
    clear_response();
  }
}

void FirmwareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareResponse::descriptor() {
  ::protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareResponse& FirmwareResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5frequests_2eproto::scc_info_FirmwareResponse.base);
  return *internal_default_instance();
}


void FirmwareResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:logi.proto.FirmwareResponse)
  switch (response_case()) {
    case kGetFirmwareUpdateProgressResponse: {
      delete response_.get_firmware_update_progress_response_;
      break;
    }
    case kGetLatestFirmwareByProductIdResponse: {
      delete response_.get_latest_firmware_by_product_id_response_;
      break;
    }
    case kUpdateFirmwareByIdResponse: {
      delete response_.update_firmware_by_id_response_;
      break;
    }
    case kUpdateAllFirmwareResponse: {
      delete response_.update_all_firmware_response_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void FirmwareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.FirmwareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear();
}

bool FirmwareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.FirmwareResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.GetFirmwareUpdateProgressResponse get_firmware_update_progress_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_firmware_update_progress_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.GetLatestFirmwareByProductIdResponse get_latest_firmware_by_product_id_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_latest_firmware_by_product_id_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.UpdateFirmwareByProductIdResponse update_firmware_by_id_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_firmware_by_id_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.UpdateAllFirmwareResponse update_all_firmware_response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_all_firmware_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.FirmwareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.FirmwareResponse)
  return false;
#undef DO_
}

void FirmwareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.FirmwareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.GetFirmwareUpdateProgressResponse get_firmware_update_progress_response = 2;
  if (has_get_firmware_update_progress_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_get_firmware_update_progress_response(), output);
  }

  // .logi.proto.GetLatestFirmwareByProductIdResponse get_latest_firmware_by_product_id_response = 3;
  if (has_get_latest_firmware_by_product_id_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_get_latest_firmware_by_product_id_response(), output);
  }

  // .logi.proto.UpdateFirmwareByProductIdResponse update_firmware_by_id_response = 4;
  if (has_update_firmware_by_id_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_update_firmware_by_id_response(), output);
  }

  // .logi.proto.UpdateAllFirmwareResponse update_all_firmware_response = 5;
  if (has_update_all_firmware_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_update_all_firmware_response(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.FirmwareResponse)
}

::google::protobuf::uint8* FirmwareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.FirmwareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.GetFirmwareUpdateProgressResponse get_firmware_update_progress_response = 2;
  if (has_get_firmware_update_progress_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_get_firmware_update_progress_response(), deterministic, target);
  }

  // .logi.proto.GetLatestFirmwareByProductIdResponse get_latest_firmware_by_product_id_response = 3;
  if (has_get_latest_firmware_by_product_id_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_get_latest_firmware_by_product_id_response(), deterministic, target);
  }

  // .logi.proto.UpdateFirmwareByProductIdResponse update_firmware_by_id_response = 4;
  if (has_update_firmware_by_id_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_update_firmware_by_id_response(), deterministic, target);
  }

  // .logi.proto.UpdateAllFirmwareResponse update_all_firmware_response = 5;
  if (has_update_all_firmware_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_update_all_firmware_response(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.FirmwareResponse)
  return target;
}

size_t FirmwareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.FirmwareResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (response_case()) {
    // .logi.proto.GetFirmwareUpdateProgressResponse get_firmware_update_progress_response = 2;
    case kGetFirmwareUpdateProgressResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.get_firmware_update_progress_response_);
      break;
    }
    // .logi.proto.GetLatestFirmwareByProductIdResponse get_latest_firmware_by_product_id_response = 3;
    case kGetLatestFirmwareByProductIdResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.get_latest_firmware_by_product_id_response_);
      break;
    }
    // .logi.proto.UpdateFirmwareByProductIdResponse update_firmware_by_id_response = 4;
    case kUpdateFirmwareByIdResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.update_firmware_by_id_response_);
      break;
    }
    // .logi.proto.UpdateAllFirmwareResponse update_all_firmware_response = 5;
    case kUpdateAllFirmwareResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.update_all_firmware_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.FirmwareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.FirmwareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.FirmwareResponse)
    MergeFrom(*source);
  }
}

void FirmwareResponse::MergeFrom(const FirmwareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.FirmwareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kGetFirmwareUpdateProgressResponse: {
      mutable_get_firmware_update_progress_response()->::logi::proto::GetFirmwareUpdateProgressResponse::MergeFrom(from.get_firmware_update_progress_response());
      break;
    }
    case kGetLatestFirmwareByProductIdResponse: {
      mutable_get_latest_firmware_by_product_id_response()->::logi::proto::GetLatestFirmwareByProductIdResponse::MergeFrom(from.get_latest_firmware_by_product_id_response());
      break;
    }
    case kUpdateFirmwareByIdResponse: {
      mutable_update_firmware_by_id_response()->::logi::proto::UpdateFirmwareByProductIdResponse::MergeFrom(from.update_firmware_by_id_response());
      break;
    }
    case kUpdateAllFirmwareResponse: {
      mutable_update_all_firmware_response()->::logi::proto::UpdateAllFirmwareResponse::MergeFrom(from.update_all_firmware_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void FirmwareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.FirmwareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareResponse::CopyFrom(const FirmwareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.FirmwareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareResponse::IsInitialized() const {
  return true;
}

void FirmwareResponse::Swap(FirmwareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareResponse::InternalSwap(FirmwareResponse* other) {
  using std::swap;
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareResponse::GetMetadata() const {
  protobuf_firmware_5frequests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5frequests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::GetFirmwareUpdateProgressRequest* Arena::CreateMaybeMessage< ::logi::proto::GetFirmwareUpdateProgressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::GetFirmwareUpdateProgressRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::GetFirmwareUpdateProgressResponse* Arena::CreateMaybeMessage< ::logi::proto::GetFirmwareUpdateProgressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::GetFirmwareUpdateProgressResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::GetLatestFirmwareByProductIdRequest* Arena::CreateMaybeMessage< ::logi::proto::GetLatestFirmwareByProductIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::GetLatestFirmwareByProductIdRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::GetLatestFirmwareByProductIdResponse* Arena::CreateMaybeMessage< ::logi::proto::GetLatestFirmwareByProductIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::GetLatestFirmwareByProductIdResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::UpdateAllFirmwareRequest* Arena::CreateMaybeMessage< ::logi::proto::UpdateAllFirmwareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::UpdateAllFirmwareRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::UpdateAllFirmwareResponse* Arena::CreateMaybeMessage< ::logi::proto::UpdateAllFirmwareResponse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::UpdateAllFirmwareResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::UpdateFirmwareByProductIdRequest* Arena::CreateMaybeMessage< ::logi::proto::UpdateFirmwareByProductIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::UpdateFirmwareByProductIdRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::UpdateFirmwareByProductIdResponse* Arena::CreateMaybeMessage< ::logi::proto::UpdateFirmwareByProductIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::UpdateFirmwareByProductIdResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::FirmwareRequest* Arena::CreateMaybeMessage< ::logi::proto::FirmwareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::FirmwareRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::FirmwareResponse* Arena::CreateMaybeMessage< ::logi::proto::FirmwareResponse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::FirmwareResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
