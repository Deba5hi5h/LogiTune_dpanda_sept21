// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection_events.proto

#ifndef PROTOBUF_INCLUDED_connection_5fevents_2eproto
#define PROTOBUF_INCLUDED_connection_5fevents_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "product_state_structures.pb.h"
#include "firmware_structures.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_connection_5fevents_2eproto 

namespace protobuf_connection_5fevents_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_connection_5fevents_2eproto
namespace logi {
namespace proto {
class ClientConnectionEvent;
class ClientConnectionEventDefaultTypeInternal;
extern ClientConnectionEventDefaultTypeInternal _ClientConnectionEvent_default_instance_;
class ConnectionEvent;
class ConnectionEventDefaultTypeInternal;
extern ConnectionEventDefaultTypeInternal _ConnectionEvent_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::ClientConnectionEvent* Arena::CreateMaybeMessage<::logi::proto::ClientConnectionEvent>(Arena*);
template<> ::logi::proto::ConnectionEvent* Arena::CreateMaybeMessage<::logi::proto::ConnectionEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

// ===================================================================

class ClientConnectionEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.ClientConnectionEvent) */ {
 public:
  ClientConnectionEvent();
  virtual ~ClientConnectionEvent();

  ClientConnectionEvent(const ClientConnectionEvent& from);

  inline ClientConnectionEvent& operator=(const ClientConnectionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientConnectionEvent(ClientConnectionEvent&& from) noexcept
    : ClientConnectionEvent() {
    *this = ::std::move(from);
  }

  inline ClientConnectionEvent& operator=(ClientConnectionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConnectionEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientConnectionEvent* internal_default_instance() {
    return reinterpret_cast<const ClientConnectionEvent*>(
               &_ClientConnectionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientConnectionEvent* other);
  friend void swap(ClientConnectionEvent& a, ClientConnectionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientConnectionEvent* New() const final {
    return CreateMaybeMessage<ClientConnectionEvent>(NULL);
  }

  ClientConnectionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientConnectionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientConnectionEvent& from);
  void MergeFrom(const ClientConnectionEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConnectionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Product products = 1;
  int products_size() const;
  void clear_products();
  static const int kProductsFieldNumber = 1;
  ::logi::proto::Product* mutable_products(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Product >*
      mutable_products();
  const ::logi::proto::Product& products(int index) const;
  ::logi::proto::Product* add_products();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Product >&
      products() const;

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  int updates_size() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  ::logi::proto::FirmwareUpdateProgress* mutable_updates(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >*
      mutable_updates();
  const ::logi::proto::FirmwareUpdateProgress& updates(int index) const;
  ::logi::proto::FirmwareUpdateProgress* add_updates();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >&
      updates() const;

  // @@protoc_insertion_point(class_scope:logi.proto.ClientConnectionEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Product > products_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress > updates_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_connection_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectionEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.ConnectionEvent) */ {
 public:
  ConnectionEvent();
  virtual ~ConnectionEvent();

  ConnectionEvent(const ConnectionEvent& from);

  inline ConnectionEvent& operator=(const ConnectionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionEvent(ConnectionEvent&& from) noexcept
    : ConnectionEvent() {
    *this = ::std::move(from);
  }

  inline ConnectionEvent& operator=(ConnectionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionEvent& default_instance();

  enum EventCase {
    kClientConnectionEvent = 1,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionEvent* internal_default_instance() {
    return reinterpret_cast<const ConnectionEvent*>(
               &_ConnectionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConnectionEvent* other);
  friend void swap(ConnectionEvent& a, ConnectionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionEvent* New() const final {
    return CreateMaybeMessage<ConnectionEvent>(NULL);
  }

  ConnectionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectionEvent& from);
  void MergeFrom(const ConnectionEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.ClientConnectionEvent client_connection_event = 1;
  bool has_client_connection_event() const;
  void clear_client_connection_event();
  static const int kClientConnectionEventFieldNumber = 1;
  private:
  const ::logi::proto::ClientConnectionEvent& _internal_client_connection_event() const;
  public:
  const ::logi::proto::ClientConnectionEvent& client_connection_event() const;
  ::logi::proto::ClientConnectionEvent* release_client_connection_event();
  ::logi::proto::ClientConnectionEvent* mutable_client_connection_event();
  void set_allocated_client_connection_event(::logi::proto::ClientConnectionEvent* client_connection_event);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.ConnectionEvent)
 private:
  void set_has_client_connection_event();

  inline bool has_event() const;
  inline void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union EventUnion {
    EventUnion() {}
    ::logi::proto::ClientConnectionEvent* client_connection_event_;
  } event_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_connection_5fevents_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientConnectionEvent

// repeated .logi.proto.Product products = 1;
inline int ClientConnectionEvent::products_size() const {
  return products_.size();
}
inline ::logi::proto::Product* ClientConnectionEvent::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.ClientConnectionEvent.products)
  return products_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Product >*
ClientConnectionEvent::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.ClientConnectionEvent.products)
  return &products_;
}
inline const ::logi::proto::Product& ClientConnectionEvent::products(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.ClientConnectionEvent.products)
  return products_.Get(index);
}
inline ::logi::proto::Product* ClientConnectionEvent::add_products() {
  // @@protoc_insertion_point(field_add:logi.proto.ClientConnectionEvent.products)
  return products_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Product >&
ClientConnectionEvent::products() const {
  // @@protoc_insertion_point(field_list:logi.proto.ClientConnectionEvent.products)
  return products_;
}

// repeated .logi.proto.FirmwareUpdateProgress updates = 2;
inline int ClientConnectionEvent::updates_size() const {
  return updates_.size();
}
inline ::logi::proto::FirmwareUpdateProgress* ClientConnectionEvent::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.ClientConnectionEvent.updates)
  return updates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >*
ClientConnectionEvent::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.ClientConnectionEvent.updates)
  return &updates_;
}
inline const ::logi::proto::FirmwareUpdateProgress& ClientConnectionEvent::updates(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.ClientConnectionEvent.updates)
  return updates_.Get(index);
}
inline ::logi::proto::FirmwareUpdateProgress* ClientConnectionEvent::add_updates() {
  // @@protoc_insertion_point(field_add:logi.proto.ClientConnectionEvent.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >&
ClientConnectionEvent::updates() const {
  // @@protoc_insertion_point(field_list:logi.proto.ClientConnectionEvent.updates)
  return updates_;
}

// -------------------------------------------------------------------

// ConnectionEvent

// .logi.proto.ClientConnectionEvent client_connection_event = 1;
inline bool ConnectionEvent::has_client_connection_event() const {
  return event_case() == kClientConnectionEvent;
}
inline void ConnectionEvent::set_has_client_connection_event() {
  _oneof_case_[0] = kClientConnectionEvent;
}
inline void ConnectionEvent::clear_client_connection_event() {
  if (has_client_connection_event()) {
    delete event_.client_connection_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::ClientConnectionEvent& ConnectionEvent::_internal_client_connection_event() const {
  return *event_.client_connection_event_;
}
inline ::logi::proto::ClientConnectionEvent* ConnectionEvent::release_client_connection_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ConnectionEvent.client_connection_event)
  if (has_client_connection_event()) {
    clear_has_event();
      ::logi::proto::ClientConnectionEvent* temp = event_.client_connection_event_;
    event_.client_connection_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ClientConnectionEvent& ConnectionEvent::client_connection_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ConnectionEvent.client_connection_event)
  return has_client_connection_event()
      ? *event_.client_connection_event_
      : *reinterpret_cast< ::logi::proto::ClientConnectionEvent*>(&::logi::proto::_ClientConnectionEvent_default_instance_);
}
inline ::logi::proto::ClientConnectionEvent* ConnectionEvent::mutable_client_connection_event() {
  if (!has_client_connection_event()) {
    clear_event();
    set_has_client_connection_event();
    event_.client_connection_event_ = CreateMaybeMessage< ::logi::proto::ClientConnectionEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ConnectionEvent.client_connection_event)
  return event_.client_connection_event_;
}

inline bool ConnectionEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void ConnectionEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline ConnectionEvent::EventCase ConnectionEvent::event_case() const {
  return ConnectionEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_connection_5fevents_2eproto
