// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_provisioning_structures.proto

#ifndef PROTOBUF_INCLUDED_cloud_5fprovisioning_5fstructures_2eproto
#define PROTOBUF_INCLUDED_cloud_5fprovisioning_5fstructures_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5fstructures_2eproto 

namespace protobuf_cloud_5fprovisioning_5fstructures_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cloud_5fprovisioning_5fstructures_2eproto
namespace logi {
namespace proto {
class LRProvisioningData;
class LRProvisioningDataDefaultTypeInternal;
extern LRProvisioningDataDefaultTypeInternal _LRProvisioningData_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::LRProvisioningData* Arena::CreateMaybeMessage<::logi::proto::LRProvisioningData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

// ===================================================================

class LRProvisioningData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.LRProvisioningData) */ {
 public:
  LRProvisioningData();
  virtual ~LRProvisioningData();

  LRProvisioningData(const LRProvisioningData& from);

  inline LRProvisioningData& operator=(const LRProvisioningData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LRProvisioningData(LRProvisioningData&& from) noexcept
    : LRProvisioningData() {
    *this = ::std::move(from);
  }

  inline LRProvisioningData& operator=(LRProvisioningData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LRProvisioningData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LRProvisioningData* internal_default_instance() {
    return reinterpret_cast<const LRProvisioningData*>(
               &_LRProvisioningData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LRProvisioningData* other);
  friend void swap(LRProvisioningData& a, LRProvisioningData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LRProvisioningData* New() const final {
    return CreateMaybeMessage<LRProvisioningData>(NULL);
  }

  LRProvisioningData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LRProvisioningData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LRProvisioningData& from);
  void MergeFrom(const LRProvisioningData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LRProvisioningData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string root_cert = 2;
  void clear_root_cert();
  static const int kRootCertFieldNumber = 2;
  const ::std::string& root_cert() const;
  void set_root_cert(const ::std::string& value);
  #if LANG_CXX11
  void set_root_cert(::std::string&& value);
  #endif
  void set_root_cert(const char* value);
  void set_root_cert(const char* value, size_t size);
  ::std::string* mutable_root_cert();
  ::std::string* release_root_cert();
  void set_allocated_root_cert(::std::string* root_cert);

  // string client_cert = 3;
  void clear_client_cert();
  static const int kClientCertFieldNumber = 3;
  const ::std::string& client_cert() const;
  void set_client_cert(const ::std::string& value);
  #if LANG_CXX11
  void set_client_cert(::std::string&& value);
  #endif
  void set_client_cert(const char* value);
  void set_client_cert(const char* value, size_t size);
  ::std::string* mutable_client_cert();
  ::std::string* release_client_cert();
  void set_allocated_client_cert(::std::string* client_cert);

  // string private_key = 4;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 4;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // string mqtt_endpoint = 5;
  void clear_mqtt_endpoint();
  static const int kMqttEndpointFieldNumber = 5;
  const ::std::string& mqtt_endpoint() const;
  void set_mqtt_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_mqtt_endpoint(::std::string&& value);
  #endif
  void set_mqtt_endpoint(const char* value);
  void set_mqtt_endpoint(const char* value, size_t size);
  ::std::string* mutable_mqtt_endpoint();
  ::std::string* release_mqtt_endpoint();
  void set_allocated_mqtt_endpoint(::std::string* mqtt_endpoint);

  // string host_topic_outgoing = 20;
  void clear_host_topic_outgoing();
  static const int kHostTopicOutgoingFieldNumber = 20;
  const ::std::string& host_topic_outgoing() const;
  void set_host_topic_outgoing(const ::std::string& value);
  #if LANG_CXX11
  void set_host_topic_outgoing(::std::string&& value);
  #endif
  void set_host_topic_outgoing(const char* value);
  void set_host_topic_outgoing(const char* value, size_t size);
  ::std::string* mutable_host_topic_outgoing();
  ::std::string* release_host_topic_outgoing();
  void set_allocated_host_topic_outgoing(::std::string* host_topic_outgoing);

  // string host_topic_incoming = 21;
  void clear_host_topic_incoming();
  static const int kHostTopicIncomingFieldNumber = 21;
  const ::std::string& host_topic_incoming() const;
  void set_host_topic_incoming(const ::std::string& value);
  #if LANG_CXX11
  void set_host_topic_incoming(::std::string&& value);
  #endif
  void set_host_topic_incoming(const char* value);
  void set_host_topic_incoming(const char* value, size_t size);
  ::std::string* mutable_host_topic_incoming();
  ::std::string* release_host_topic_incoming();
  void set_allocated_host_topic_incoming(::std::string* host_topic_incoming);

  // string device_topic_outgoing = 22;
  void clear_device_topic_outgoing();
  static const int kDeviceTopicOutgoingFieldNumber = 22;
  const ::std::string& device_topic_outgoing() const;
  void set_device_topic_outgoing(const ::std::string& value);
  #if LANG_CXX11
  void set_device_topic_outgoing(::std::string&& value);
  #endif
  void set_device_topic_outgoing(const char* value);
  void set_device_topic_outgoing(const char* value, size_t size);
  ::std::string* mutable_device_topic_outgoing();
  ::std::string* release_device_topic_outgoing();
  void set_allocated_device_topic_outgoing(::std::string* device_topic_outgoing);

  // string device_topic_incoming = 23;
  void clear_device_topic_incoming();
  static const int kDeviceTopicIncomingFieldNumber = 23;
  const ::std::string& device_topic_incoming() const;
  void set_device_topic_incoming(const ::std::string& value);
  #if LANG_CXX11
  void set_device_topic_incoming(::std::string&& value);
  #endif
  void set_device_topic_incoming(const char* value);
  void set_device_topic_incoming(const char* value, size_t size);
  ::std::string* mutable_device_topic_incoming();
  ::std::string* release_device_topic_incoming();
  void set_allocated_device_topic_incoming(::std::string* device_topic_incoming);

  // string room_name = 100;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 100;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // string room_id = 101;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 101;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  #if LANG_CXX11
  void set_room_id(::std::string&& value);
  #endif
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // string organization_name = 110;
  void clear_organization_name();
  static const int kOrganizationNameFieldNumber = 110;
  const ::std::string& organization_name() const;
  void set_organization_name(const ::std::string& value);
  #if LANG_CXX11
  void set_organization_name(::std::string&& value);
  #endif
  void set_organization_name(const char* value);
  void set_organization_name(const char* value, size_t size);
  ::std::string* mutable_organization_name();
  ::std::string* release_organization_name();
  void set_allocated_organization_name(::std::string* organization_name);

  // string organization_id = 111;
  void clear_organization_id();
  static const int kOrganizationIdFieldNumber = 111;
  const ::std::string& organization_id() const;
  void set_organization_id(const ::std::string& value);
  #if LANG_CXX11
  void set_organization_id(::std::string&& value);
  #endif
  void set_organization_id(const char* value);
  void set_organization_id(const char* value, size_t size);
  ::std::string* mutable_organization_id();
  ::std::string* release_organization_id();
  void set_allocated_organization_id(::std::string* organization_id);

  // uint32 mqtt_port = 6;
  void clear_mqtt_port();
  static const int kMqttPortFieldNumber = 6;
  ::google::protobuf::uint32 mqtt_port() const;
  void set_mqtt_port(::google::protobuf::uint32 value);

  // uint32 https_port = 7;
  void clear_https_port();
  static const int kHttpsPortFieldNumber = 7;
  ::google::protobuf::uint32 https_port() const;
  void set_https_port(::google::protobuf::uint32 value);

  // uint64 tls_handshake_timeout_ms = 8;
  void clear_tls_handshake_timeout_ms();
  static const int kTlsHandshakeTimeoutMsFieldNumber = 8;
  ::google::protobuf::uint64 tls_handshake_timeout_ms() const;
  void set_tls_handshake_timeout_ms(::google::protobuf::uint64 value);

  // uint64 tls_read_timeout_ms = 9;
  void clear_tls_read_timeout_ms();
  static const int kTlsReadTimeoutMsFieldNumber = 9;
  ::google::protobuf::uint64 tls_read_timeout_ms() const;
  void set_tls_read_timeout_ms(::google::protobuf::uint64 value);

  // uint64 tls_write_timeout_ms = 10;
  void clear_tls_write_timeout_ms();
  static const int kTlsWriteTimeoutMsFieldNumber = 10;
  ::google::protobuf::uint64 tls_write_timeout_ms() const;
  void set_tls_write_timeout_ms(::google::protobuf::uint64 value);

  // uint64 mqtt_command_timeout_ms = 12;
  void clear_mqtt_command_timeout_ms();
  static const int kMqttCommandTimeoutMsFieldNumber = 12;
  ::google::protobuf::uint64 mqtt_command_timeout_ms() const;
  void set_mqtt_command_timeout_ms(::google::protobuf::uint64 value);

  // bool is_clean_session = 11;
  void clear_is_clean_session();
  static const int kIsCleanSessionFieldNumber = 11;
  bool is_clean_session() const;
  void set_is_clean_session(bool value);

  // uint32 keep_alive_interval = 13;
  void clear_keep_alive_interval();
  static const int kKeepAliveIntervalFieldNumber = 13;
  ::google::protobuf::uint32 keep_alive_interval() const;
  void set_keep_alive_interval(::google::protobuf::uint32 value);

  // uint32 min_reconnect_interval = 14;
  void clear_min_reconnect_interval();
  static const int kMinReconnectIntervalFieldNumber = 14;
  ::google::protobuf::uint32 min_reconnect_interval() const;
  void set_min_reconnect_interval(::google::protobuf::uint32 value);

  // uint32 max_reconnect_interval = 15;
  void clear_max_reconnect_interval();
  static const int kMaxReconnectIntervalFieldNumber = 15;
  ::google::protobuf::uint32 max_reconnect_interval() const;
  void set_max_reconnect_interval(::google::protobuf::uint32 value);

  // uint32 max_acks_to_wait_for = 16;
  void clear_max_acks_to_wait_for();
  static const int kMaxAcksToWaitForFieldNumber = 16;
  ::google::protobuf::uint32 max_acks_to_wait_for() const;
  void set_max_acks_to_wait_for(::google::protobuf::uint32 value);

  // uint32 action_processing_rate = 17;
  void clear_action_processing_rate();
  static const int kActionProcessingRateFieldNumber = 17;
  ::google::protobuf::uint32 action_processing_rate() const;
  void set_action_processing_rate(::google::protobuf::uint32 value);

  // uint64 discover_action_timeout_ms = 19;
  void clear_discover_action_timeout_ms();
  static const int kDiscoverActionTimeoutMsFieldNumber = 19;
  ::google::protobuf::uint64 discover_action_timeout_ms() const;
  void set_discover_action_timeout_ms(::google::protobuf::uint64 value);

  // uint32 max_outgoing_action_queue_length = 18;
  void clear_max_outgoing_action_queue_length();
  static const int kMaxOutgoingActionQueueLengthFieldNumber = 18;
  ::google::protobuf::uint32 max_outgoing_action_queue_length() const;
  void set_max_outgoing_action_queue_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logi.proto.LRProvisioningData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr root_cert_;
  ::google::protobuf::internal::ArenaStringPtr client_cert_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr mqtt_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr host_topic_outgoing_;
  ::google::protobuf::internal::ArenaStringPtr host_topic_incoming_;
  ::google::protobuf::internal::ArenaStringPtr device_topic_outgoing_;
  ::google::protobuf::internal::ArenaStringPtr device_topic_incoming_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::internal::ArenaStringPtr organization_name_;
  ::google::protobuf::internal::ArenaStringPtr organization_id_;
  ::google::protobuf::uint32 mqtt_port_;
  ::google::protobuf::uint32 https_port_;
  ::google::protobuf::uint64 tls_handshake_timeout_ms_;
  ::google::protobuf::uint64 tls_read_timeout_ms_;
  ::google::protobuf::uint64 tls_write_timeout_ms_;
  ::google::protobuf::uint64 mqtt_command_timeout_ms_;
  bool is_clean_session_;
  ::google::protobuf::uint32 keep_alive_interval_;
  ::google::protobuf::uint32 min_reconnect_interval_;
  ::google::protobuf::uint32 max_reconnect_interval_;
  ::google::protobuf::uint32 max_acks_to_wait_for_;
  ::google::protobuf::uint32 action_processing_rate_;
  ::google::protobuf::uint64 discover_action_timeout_ms_;
  ::google::protobuf::uint32 max_outgoing_action_queue_length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cloud_5fprovisioning_5fstructures_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LRProvisioningData

// string client_id = 1;
inline void LRProvisioningData::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::client_id() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.client_id)
  return client_id_.GetNoArena();
}
inline void LRProvisioningData::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.client_id)
}
#if LANG_CXX11
inline void LRProvisioningData::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.client_id)
}
#endif
inline void LRProvisioningData::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.client_id)
}
inline void LRProvisioningData::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.client_id)
}
inline ::std::string* LRProvisioningData::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_client_id() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.client_id)
}

// string root_cert = 2;
inline void LRProvisioningData::clear_root_cert() {
  root_cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::root_cert() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.root_cert)
  return root_cert_.GetNoArena();
}
inline void LRProvisioningData::set_root_cert(const ::std::string& value) {
  
  root_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.root_cert)
}
#if LANG_CXX11
inline void LRProvisioningData::set_root_cert(::std::string&& value) {
  
  root_cert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.root_cert)
}
#endif
inline void LRProvisioningData::set_root_cert(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  root_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.root_cert)
}
inline void LRProvisioningData::set_root_cert(const char* value, size_t size) {
  
  root_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.root_cert)
}
inline ::std::string* LRProvisioningData::mutable_root_cert() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.root_cert)
  return root_cert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_root_cert() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.root_cert)
  
  return root_cert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_root_cert(::std::string* root_cert) {
  if (root_cert != NULL) {
    
  } else {
    
  }
  root_cert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_cert);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.root_cert)
}

// string client_cert = 3;
inline void LRProvisioningData::clear_client_cert() {
  client_cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::client_cert() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.client_cert)
  return client_cert_.GetNoArena();
}
inline void LRProvisioningData::set_client_cert(const ::std::string& value) {
  
  client_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.client_cert)
}
#if LANG_CXX11
inline void LRProvisioningData::set_client_cert(::std::string&& value) {
  
  client_cert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.client_cert)
}
#endif
inline void LRProvisioningData::set_client_cert(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.client_cert)
}
inline void LRProvisioningData::set_client_cert(const char* value, size_t size) {
  
  client_cert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.client_cert)
}
inline ::std::string* LRProvisioningData::mutable_client_cert() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.client_cert)
  return client_cert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_client_cert() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.client_cert)
  
  return client_cert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_client_cert(::std::string* client_cert) {
  if (client_cert != NULL) {
    
  } else {
    
  }
  client_cert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_cert);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.client_cert)
}

// string private_key = 4;
inline void LRProvisioningData::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::private_key() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.private_key)
  return private_key_.GetNoArena();
}
inline void LRProvisioningData::set_private_key(const ::std::string& value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.private_key)
}
#if LANG_CXX11
inline void LRProvisioningData::set_private_key(::std::string&& value) {
  
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.private_key)
}
#endif
inline void LRProvisioningData::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.private_key)
}
inline void LRProvisioningData::set_private_key(const char* value, size_t size) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.private_key)
}
inline ::std::string* LRProvisioningData::mutable_private_key() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_private_key() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.private_key)
  
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    
  } else {
    
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.private_key)
}

// string mqtt_endpoint = 5;
inline void LRProvisioningData::clear_mqtt_endpoint() {
  mqtt_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::mqtt_endpoint() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.mqtt_endpoint)
  return mqtt_endpoint_.GetNoArena();
}
inline void LRProvisioningData::set_mqtt_endpoint(const ::std::string& value) {
  
  mqtt_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.mqtt_endpoint)
}
#if LANG_CXX11
inline void LRProvisioningData::set_mqtt_endpoint(::std::string&& value) {
  
  mqtt_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.mqtt_endpoint)
}
#endif
inline void LRProvisioningData::set_mqtt_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mqtt_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.mqtt_endpoint)
}
inline void LRProvisioningData::set_mqtt_endpoint(const char* value, size_t size) {
  
  mqtt_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.mqtt_endpoint)
}
inline ::std::string* LRProvisioningData::mutable_mqtt_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.mqtt_endpoint)
  return mqtt_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_mqtt_endpoint() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.mqtt_endpoint)
  
  return mqtt_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_mqtt_endpoint(::std::string* mqtt_endpoint) {
  if (mqtt_endpoint != NULL) {
    
  } else {
    
  }
  mqtt_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mqtt_endpoint);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.mqtt_endpoint)
}

// uint32 mqtt_port = 6;
inline void LRProvisioningData::clear_mqtt_port() {
  mqtt_port_ = 0u;
}
inline ::google::protobuf::uint32 LRProvisioningData::mqtt_port() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.mqtt_port)
  return mqtt_port_;
}
inline void LRProvisioningData::set_mqtt_port(::google::protobuf::uint32 value) {
  
  mqtt_port_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.mqtt_port)
}

// uint32 https_port = 7;
inline void LRProvisioningData::clear_https_port() {
  https_port_ = 0u;
}
inline ::google::protobuf::uint32 LRProvisioningData::https_port() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.https_port)
  return https_port_;
}
inline void LRProvisioningData::set_https_port(::google::protobuf::uint32 value) {
  
  https_port_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.https_port)
}

// uint64 tls_handshake_timeout_ms = 8;
inline void LRProvisioningData::clear_tls_handshake_timeout_ms() {
  tls_handshake_timeout_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LRProvisioningData::tls_handshake_timeout_ms() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.tls_handshake_timeout_ms)
  return tls_handshake_timeout_ms_;
}
inline void LRProvisioningData::set_tls_handshake_timeout_ms(::google::protobuf::uint64 value) {
  
  tls_handshake_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.tls_handshake_timeout_ms)
}

// uint64 tls_read_timeout_ms = 9;
inline void LRProvisioningData::clear_tls_read_timeout_ms() {
  tls_read_timeout_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LRProvisioningData::tls_read_timeout_ms() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.tls_read_timeout_ms)
  return tls_read_timeout_ms_;
}
inline void LRProvisioningData::set_tls_read_timeout_ms(::google::protobuf::uint64 value) {
  
  tls_read_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.tls_read_timeout_ms)
}

// uint64 tls_write_timeout_ms = 10;
inline void LRProvisioningData::clear_tls_write_timeout_ms() {
  tls_write_timeout_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LRProvisioningData::tls_write_timeout_ms() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.tls_write_timeout_ms)
  return tls_write_timeout_ms_;
}
inline void LRProvisioningData::set_tls_write_timeout_ms(::google::protobuf::uint64 value) {
  
  tls_write_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.tls_write_timeout_ms)
}

// bool is_clean_session = 11;
inline void LRProvisioningData::clear_is_clean_session() {
  is_clean_session_ = false;
}
inline bool LRProvisioningData::is_clean_session() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.is_clean_session)
  return is_clean_session_;
}
inline void LRProvisioningData::set_is_clean_session(bool value) {
  
  is_clean_session_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.is_clean_session)
}

// uint64 mqtt_command_timeout_ms = 12;
inline void LRProvisioningData::clear_mqtt_command_timeout_ms() {
  mqtt_command_timeout_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LRProvisioningData::mqtt_command_timeout_ms() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.mqtt_command_timeout_ms)
  return mqtt_command_timeout_ms_;
}
inline void LRProvisioningData::set_mqtt_command_timeout_ms(::google::protobuf::uint64 value) {
  
  mqtt_command_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.mqtt_command_timeout_ms)
}

// uint32 keep_alive_interval = 13;
inline void LRProvisioningData::clear_keep_alive_interval() {
  keep_alive_interval_ = 0u;
}
inline ::google::protobuf::uint32 LRProvisioningData::keep_alive_interval() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.keep_alive_interval)
  return keep_alive_interval_;
}
inline void LRProvisioningData::set_keep_alive_interval(::google::protobuf::uint32 value) {
  
  keep_alive_interval_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.keep_alive_interval)
}

// uint32 min_reconnect_interval = 14;
inline void LRProvisioningData::clear_min_reconnect_interval() {
  min_reconnect_interval_ = 0u;
}
inline ::google::protobuf::uint32 LRProvisioningData::min_reconnect_interval() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.min_reconnect_interval)
  return min_reconnect_interval_;
}
inline void LRProvisioningData::set_min_reconnect_interval(::google::protobuf::uint32 value) {
  
  min_reconnect_interval_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.min_reconnect_interval)
}

// uint32 max_reconnect_interval = 15;
inline void LRProvisioningData::clear_max_reconnect_interval() {
  max_reconnect_interval_ = 0u;
}
inline ::google::protobuf::uint32 LRProvisioningData::max_reconnect_interval() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.max_reconnect_interval)
  return max_reconnect_interval_;
}
inline void LRProvisioningData::set_max_reconnect_interval(::google::protobuf::uint32 value) {
  
  max_reconnect_interval_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.max_reconnect_interval)
}

// uint32 max_acks_to_wait_for = 16;
inline void LRProvisioningData::clear_max_acks_to_wait_for() {
  max_acks_to_wait_for_ = 0u;
}
inline ::google::protobuf::uint32 LRProvisioningData::max_acks_to_wait_for() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.max_acks_to_wait_for)
  return max_acks_to_wait_for_;
}
inline void LRProvisioningData::set_max_acks_to_wait_for(::google::protobuf::uint32 value) {
  
  max_acks_to_wait_for_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.max_acks_to_wait_for)
}

// uint32 action_processing_rate = 17;
inline void LRProvisioningData::clear_action_processing_rate() {
  action_processing_rate_ = 0u;
}
inline ::google::protobuf::uint32 LRProvisioningData::action_processing_rate() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.action_processing_rate)
  return action_processing_rate_;
}
inline void LRProvisioningData::set_action_processing_rate(::google::protobuf::uint32 value) {
  
  action_processing_rate_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.action_processing_rate)
}

// uint32 max_outgoing_action_queue_length = 18;
inline void LRProvisioningData::clear_max_outgoing_action_queue_length() {
  max_outgoing_action_queue_length_ = 0u;
}
inline ::google::protobuf::uint32 LRProvisioningData::max_outgoing_action_queue_length() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.max_outgoing_action_queue_length)
  return max_outgoing_action_queue_length_;
}
inline void LRProvisioningData::set_max_outgoing_action_queue_length(::google::protobuf::uint32 value) {
  
  max_outgoing_action_queue_length_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.max_outgoing_action_queue_length)
}

// uint64 discover_action_timeout_ms = 19;
inline void LRProvisioningData::clear_discover_action_timeout_ms() {
  discover_action_timeout_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LRProvisioningData::discover_action_timeout_ms() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.discover_action_timeout_ms)
  return discover_action_timeout_ms_;
}
inline void LRProvisioningData::set_discover_action_timeout_ms(::google::protobuf::uint64 value) {
  
  discover_action_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.discover_action_timeout_ms)
}

// string host_topic_outgoing = 20;
inline void LRProvisioningData::clear_host_topic_outgoing() {
  host_topic_outgoing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::host_topic_outgoing() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.host_topic_outgoing)
  return host_topic_outgoing_.GetNoArena();
}
inline void LRProvisioningData::set_host_topic_outgoing(const ::std::string& value) {
  
  host_topic_outgoing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.host_topic_outgoing)
}
#if LANG_CXX11
inline void LRProvisioningData::set_host_topic_outgoing(::std::string&& value) {
  
  host_topic_outgoing_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.host_topic_outgoing)
}
#endif
inline void LRProvisioningData::set_host_topic_outgoing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_topic_outgoing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.host_topic_outgoing)
}
inline void LRProvisioningData::set_host_topic_outgoing(const char* value, size_t size) {
  
  host_topic_outgoing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.host_topic_outgoing)
}
inline ::std::string* LRProvisioningData::mutable_host_topic_outgoing() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.host_topic_outgoing)
  return host_topic_outgoing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_host_topic_outgoing() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.host_topic_outgoing)
  
  return host_topic_outgoing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_host_topic_outgoing(::std::string* host_topic_outgoing) {
  if (host_topic_outgoing != NULL) {
    
  } else {
    
  }
  host_topic_outgoing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_topic_outgoing);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.host_topic_outgoing)
}

// string host_topic_incoming = 21;
inline void LRProvisioningData::clear_host_topic_incoming() {
  host_topic_incoming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::host_topic_incoming() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.host_topic_incoming)
  return host_topic_incoming_.GetNoArena();
}
inline void LRProvisioningData::set_host_topic_incoming(const ::std::string& value) {
  
  host_topic_incoming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.host_topic_incoming)
}
#if LANG_CXX11
inline void LRProvisioningData::set_host_topic_incoming(::std::string&& value) {
  
  host_topic_incoming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.host_topic_incoming)
}
#endif
inline void LRProvisioningData::set_host_topic_incoming(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_topic_incoming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.host_topic_incoming)
}
inline void LRProvisioningData::set_host_topic_incoming(const char* value, size_t size) {
  
  host_topic_incoming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.host_topic_incoming)
}
inline ::std::string* LRProvisioningData::mutable_host_topic_incoming() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.host_topic_incoming)
  return host_topic_incoming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_host_topic_incoming() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.host_topic_incoming)
  
  return host_topic_incoming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_host_topic_incoming(::std::string* host_topic_incoming) {
  if (host_topic_incoming != NULL) {
    
  } else {
    
  }
  host_topic_incoming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_topic_incoming);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.host_topic_incoming)
}

// string device_topic_outgoing = 22;
inline void LRProvisioningData::clear_device_topic_outgoing() {
  device_topic_outgoing_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::device_topic_outgoing() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.device_topic_outgoing)
  return device_topic_outgoing_.GetNoArena();
}
inline void LRProvisioningData::set_device_topic_outgoing(const ::std::string& value) {
  
  device_topic_outgoing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.device_topic_outgoing)
}
#if LANG_CXX11
inline void LRProvisioningData::set_device_topic_outgoing(::std::string&& value) {
  
  device_topic_outgoing_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.device_topic_outgoing)
}
#endif
inline void LRProvisioningData::set_device_topic_outgoing(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_topic_outgoing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.device_topic_outgoing)
}
inline void LRProvisioningData::set_device_topic_outgoing(const char* value, size_t size) {
  
  device_topic_outgoing_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.device_topic_outgoing)
}
inline ::std::string* LRProvisioningData::mutable_device_topic_outgoing() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.device_topic_outgoing)
  return device_topic_outgoing_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_device_topic_outgoing() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.device_topic_outgoing)
  
  return device_topic_outgoing_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_device_topic_outgoing(::std::string* device_topic_outgoing) {
  if (device_topic_outgoing != NULL) {
    
  } else {
    
  }
  device_topic_outgoing_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_topic_outgoing);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.device_topic_outgoing)
}

// string device_topic_incoming = 23;
inline void LRProvisioningData::clear_device_topic_incoming() {
  device_topic_incoming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::device_topic_incoming() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.device_topic_incoming)
  return device_topic_incoming_.GetNoArena();
}
inline void LRProvisioningData::set_device_topic_incoming(const ::std::string& value) {
  
  device_topic_incoming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.device_topic_incoming)
}
#if LANG_CXX11
inline void LRProvisioningData::set_device_topic_incoming(::std::string&& value) {
  
  device_topic_incoming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.device_topic_incoming)
}
#endif
inline void LRProvisioningData::set_device_topic_incoming(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_topic_incoming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.device_topic_incoming)
}
inline void LRProvisioningData::set_device_topic_incoming(const char* value, size_t size) {
  
  device_topic_incoming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.device_topic_incoming)
}
inline ::std::string* LRProvisioningData::mutable_device_topic_incoming() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.device_topic_incoming)
  return device_topic_incoming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_device_topic_incoming() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.device_topic_incoming)
  
  return device_topic_incoming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_device_topic_incoming(::std::string* device_topic_incoming) {
  if (device_topic_incoming != NULL) {
    
  } else {
    
  }
  device_topic_incoming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_topic_incoming);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.device_topic_incoming)
}

// string room_name = 100;
inline void LRProvisioningData::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::room_name() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.room_name)
  return room_name_.GetNoArena();
}
inline void LRProvisioningData::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.room_name)
}
#if LANG_CXX11
inline void LRProvisioningData::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.room_name)
}
#endif
inline void LRProvisioningData::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.room_name)
}
inline void LRProvisioningData::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.room_name)
}
inline ::std::string* LRProvisioningData::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_room_name() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.room_name)
}

// string room_id = 101;
inline void LRProvisioningData::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::room_id() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.room_id)
  return room_id_.GetNoArena();
}
inline void LRProvisioningData::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.room_id)
}
#if LANG_CXX11
inline void LRProvisioningData::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.room_id)
}
#endif
inline void LRProvisioningData::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.room_id)
}
inline void LRProvisioningData::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.room_id)
}
inline ::std::string* LRProvisioningData::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_room_id() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.room_id)
}

// string organization_name = 110;
inline void LRProvisioningData::clear_organization_name() {
  organization_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::organization_name() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.organization_name)
  return organization_name_.GetNoArena();
}
inline void LRProvisioningData::set_organization_name(const ::std::string& value) {
  
  organization_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.organization_name)
}
#if LANG_CXX11
inline void LRProvisioningData::set_organization_name(::std::string&& value) {
  
  organization_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.organization_name)
}
#endif
inline void LRProvisioningData::set_organization_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organization_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.organization_name)
}
inline void LRProvisioningData::set_organization_name(const char* value, size_t size) {
  
  organization_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.organization_name)
}
inline ::std::string* LRProvisioningData::mutable_organization_name() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.organization_name)
  return organization_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_organization_name() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.organization_name)
  
  return organization_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_organization_name(::std::string* organization_name) {
  if (organization_name != NULL) {
    
  } else {
    
  }
  organization_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization_name);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.organization_name)
}

// string organization_id = 111;
inline void LRProvisioningData::clear_organization_id() {
  organization_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LRProvisioningData::organization_id() const {
  // @@protoc_insertion_point(field_get:logi.proto.LRProvisioningData.organization_id)
  return organization_id_.GetNoArena();
}
inline void LRProvisioningData::set_organization_id(const ::std::string& value) {
  
  organization_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.LRProvisioningData.organization_id)
}
#if LANG_CXX11
inline void LRProvisioningData::set_organization_id(::std::string&& value) {
  
  organization_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.LRProvisioningData.organization_id)
}
#endif
inline void LRProvisioningData::set_organization_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  organization_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.LRProvisioningData.organization_id)
}
inline void LRProvisioningData::set_organization_id(const char* value, size_t size) {
  
  organization_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.LRProvisioningData.organization_id)
}
inline ::std::string* LRProvisioningData::mutable_organization_id() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.LRProvisioningData.organization_id)
  return organization_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LRProvisioningData::release_organization_id() {
  // @@protoc_insertion_point(field_release:logi.proto.LRProvisioningData.organization_id)
  
  return organization_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LRProvisioningData::set_allocated_organization_id(::std::string* organization_id) {
  if (organization_id != NULL) {
    
  } else {
    
  }
  organization_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization_id);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRProvisioningData.organization_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cloud_5fprovisioning_5fstructures_2eproto
