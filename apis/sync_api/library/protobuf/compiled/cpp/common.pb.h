// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
namespace logi {
namespace proto {
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::Error* Arena::CreateMaybeMessage<::logi::proto::Error>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

enum SyncConnectionState {
  SYNC_CONNECTION_STATE_UNKNOWN = 0,
  SYNC_CONNECTION_STATE_OFFLINE = 10,
  SYNC_CONNECTION_STATE_ONLINE = 11,
  SYNC_CONNECTION_STATE_ENUMERATING = 20,
  SyncConnectionState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SyncConnectionState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SyncConnectionState_IsValid(int value);
const SyncConnectionState SyncConnectionState_MIN = SYNC_CONNECTION_STATE_UNKNOWN;
const SyncConnectionState SyncConnectionState_MAX = SYNC_CONNECTION_STATE_ENUMERATING;
const int SyncConnectionState_ARRAYSIZE = SyncConnectionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncConnectionState_descriptor();
inline const ::std::string& SyncConnectionState_Name(SyncConnectionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncConnectionState_descriptor(), value);
}
inline bool SyncConnectionState_Parse(
    const ::std::string& name, SyncConnectionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncConnectionState>(
    SyncConnectionState_descriptor(), name, value);
}
enum SyncUpdateState {
  SYNC_UPDATE_STATE_UNKNOWN = 0,
  SYNC_UPDATE_STATE_CURRENT = 10,
  SYNC_UPDATE_STATE_AVAILABLE = 11,
  SYNC_UPDATE_STATE_STARTING = 13,
  SYNC_UPDATE_STATE_DOWNLOADING = 14,
  SYNC_UPDATE_STATE_READY = 15,
  SYNC_UPDATE_STATE_UPDATING = 16,
  SYNC_UPDATE_STATE_SCHEDULED = 17,
  SYNC_UPDATE_STATE_ERROR = 18,
  SyncUpdateState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SyncUpdateState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SyncUpdateState_IsValid(int value);
const SyncUpdateState SyncUpdateState_MIN = SYNC_UPDATE_STATE_UNKNOWN;
const SyncUpdateState SyncUpdateState_MAX = SYNC_UPDATE_STATE_ERROR;
const int SyncUpdateState_ARRAYSIZE = SyncUpdateState_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncUpdateState_descriptor();
inline const ::std::string& SyncUpdateState_Name(SyncUpdateState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncUpdateState_descriptor(), value);
}
inline bool SyncUpdateState_Parse(
    const ::std::string& name, SyncUpdateState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncUpdateState>(
    SyncUpdateState_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(NULL);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // string error_log_uri = 3;
  void clear_error_log_uri();
  static const int kErrorLogUriFieldNumber = 3;
  const ::std::string& error_log_uri() const;
  void set_error_log_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_error_log_uri(::std::string&& value);
  #endif
  void set_error_log_uri(const char* value);
  void set_error_log_uri(const char* value, size_t size);
  ::std::string* mutable_error_log_uri();
  ::std::string* release_error_log_uri();
  void set_allocated_error_log_uri(::std::string* error_log_uri);

  // string json_metadata = 4;
  void clear_json_metadata();
  static const int kJsonMetadataFieldNumber = 4;
  const ::std::string& json_metadata() const;
  void set_json_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_json_metadata(::std::string&& value);
  #endif
  void set_json_metadata(const char* value);
  void set_json_metadata(const char* value, size_t size);
  ::std::string* mutable_json_metadata();
  ::std::string* release_json_metadata();
  void set_allocated_json_metadata(::std::string* json_metadata);

  // uint32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::uint32 error_code() const;
  void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logi.proto.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::internal::ArenaStringPtr error_log_uri_;
  ::google::protobuf::internal::ArenaStringPtr json_metadata_;
  ::google::protobuf::uint32 error_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Error

// uint32 error_code = 1;
inline void Error::clear_error_code() {
  error_code_ = 0u;
}
inline ::google::protobuf::uint32 Error::error_code() const {
  // @@protoc_insertion_point(field_get:logi.proto.Error.error_code)
  return error_code_;
}
inline void Error::set_error_code(::google::protobuf::uint32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Error.error_code)
}

// string error_message = 2;
inline void Error::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::error_message() const {
  // @@protoc_insertion_point(field_get:logi.proto.Error.error_message)
  return error_message_.GetNoArena();
}
inline void Error::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Error.error_message)
}
#if LANG_CXX11
inline void Error::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Error.error_message)
}
#endif
inline void Error::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Error.error_message)
}
inline void Error::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Error.error_message)
}
inline ::std::string* Error::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Error.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_error_message() {
  // @@protoc_insertion_point(field_release:logi.proto.Error.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Error.error_message)
}

// string error_log_uri = 3;
inline void Error::clear_error_log_uri() {
  error_log_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::error_log_uri() const {
  // @@protoc_insertion_point(field_get:logi.proto.Error.error_log_uri)
  return error_log_uri_.GetNoArena();
}
inline void Error::set_error_log_uri(const ::std::string& value) {
  
  error_log_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Error.error_log_uri)
}
#if LANG_CXX11
inline void Error::set_error_log_uri(::std::string&& value) {
  
  error_log_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Error.error_log_uri)
}
#endif
inline void Error::set_error_log_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_log_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Error.error_log_uri)
}
inline void Error::set_error_log_uri(const char* value, size_t size) {
  
  error_log_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Error.error_log_uri)
}
inline ::std::string* Error::mutable_error_log_uri() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Error.error_log_uri)
  return error_log_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_error_log_uri() {
  // @@protoc_insertion_point(field_release:logi.proto.Error.error_log_uri)
  
  return error_log_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_error_log_uri(::std::string* error_log_uri) {
  if (error_log_uri != NULL) {
    
  } else {
    
  }
  error_log_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_log_uri);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Error.error_log_uri)
}

// string json_metadata = 4;
inline void Error::clear_json_metadata() {
  json_metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::json_metadata() const {
  // @@protoc_insertion_point(field_get:logi.proto.Error.json_metadata)
  return json_metadata_.GetNoArena();
}
inline void Error::set_json_metadata(const ::std::string& value) {
  
  json_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Error.json_metadata)
}
#if LANG_CXX11
inline void Error::set_json_metadata(::std::string&& value) {
  
  json_metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Error.json_metadata)
}
#endif
inline void Error::set_json_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  json_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Error.json_metadata)
}
inline void Error::set_json_metadata(const char* value, size_t size) {
  
  json_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Error.json_metadata)
}
inline ::std::string* Error::mutable_json_metadata() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Error.json_metadata)
  return json_metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_json_metadata() {
  // @@protoc_insertion_point(field_release:logi.proto.Error.json_metadata)
  
  return json_metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_json_metadata(::std::string* json_metadata) {
  if (json_metadata != NULL) {
    
  } else {
    
  }
  json_metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_metadata);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Error.json_metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::logi::proto::SyncConnectionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::logi::proto::SyncConnectionState>() {
  return ::logi::proto::SyncConnectionState_descriptor();
}
template <> struct is_proto_enum< ::logi::proto::SyncUpdateState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::logi::proto::SyncUpdateState>() {
  return ::logi::proto::SyncUpdateState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
