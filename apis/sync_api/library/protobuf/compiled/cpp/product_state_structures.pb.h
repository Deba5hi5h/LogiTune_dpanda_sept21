// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: product_state_structures.proto

#ifndef PROTOBUF_INCLUDED_product_5fstate_5fstructures_2eproto
#define PROTOBUF_INCLUDED_product_5fstate_5fstructures_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_product_5fstate_5fstructures_2eproto 

namespace protobuf_product_5fstate_5fstructures_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_product_5fstate_5fstructures_2eproto
namespace logi {
namespace proto {
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceEdge;
class DeviceEdgeDefaultTypeInternal;
extern DeviceEdgeDefaultTypeInternal _DeviceEdge_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class Device_PropertiesEntry_DoNotUse;
class Device_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern Device_PropertiesEntry_DoNotUseDefaultTypeInternal _Device_PropertiesEntry_DoNotUse_default_instance_;
class Product;
class ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::Device* Arena::CreateMaybeMessage<::logi::proto::Device>(Arena*);
template<> ::logi::proto::DeviceEdge* Arena::CreateMaybeMessage<::logi::proto::DeviceEdge>(Arena*);
template<> ::logi::proto::DeviceInfo* Arena::CreateMaybeMessage<::logi::proto::DeviceInfo>(Arena*);
template<> ::logi::proto::Device_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::logi::proto::Device_PropertiesEntry_DoNotUse>(Arena*);
template<> ::logi::proto::Product* Arena::CreateMaybeMessage<::logi::proto::Product>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

enum Product_Model {
  Product_Model_UNKNOWN = 0,
  Product_Model_MEETUP = 1,
  Product_Model_RALLY = 20,
  Product_Model_RALLY_CAMERA = 21,
  Product_Model_Product_Model_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Product_Model_Product_Model_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Product_Model_IsValid(int value);
const Product_Model Product_Model_Model_MIN = Product_Model_UNKNOWN;
const Product_Model Product_Model_Model_MAX = Product_Model_RALLY_CAMERA;
const int Product_Model_Model_ARRAYSIZE = Product_Model_Model_MAX + 1;

const ::google::protobuf::EnumDescriptor* Product_Model_descriptor();
inline const ::std::string& Product_Model_Name(Product_Model value) {
  return ::google::protobuf::internal::NameOfEnum(
    Product_Model_descriptor(), value);
}
inline bool Product_Model_Parse(
    const ::std::string& name, Product_Model* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Product_Model>(
    Product_Model_descriptor(), name, value);
}
enum Device_FormFactor {
  Device_FormFactor_UNKNOWN = 0,
  Device_FormFactor_MEETUP = 1,
  Device_FormFactor_RALLY_TABLE_HUB = 20,
  Device_FormFactor_RALLY_TV_HUB = 21,
  Device_FormFactor_RALLY_CAMERA = 22,
  Device_FormFactor_RALLY_MIC_POD = 23,
  Device_FormFactor_RALLY_MIC_POD_HUB = 24,
  Device_FormFactor_RALLY_SPEAKER = 25,
  Device_FormFactor_Device_FormFactor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_FormFactor_Device_FormFactor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_FormFactor_IsValid(int value);
const Device_FormFactor Device_FormFactor_FormFactor_MIN = Device_FormFactor_UNKNOWN;
const Device_FormFactor Device_FormFactor_FormFactor_MAX = Device_FormFactor_RALLY_SPEAKER;
const int Device_FormFactor_FormFactor_ARRAYSIZE = Device_FormFactor_FormFactor_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_FormFactor_descriptor();
inline const ::std::string& Device_FormFactor_Name(Device_FormFactor value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_FormFactor_descriptor(), value);
}
inline bool Device_FormFactor_Parse(
    const ::std::string& name, Device_FormFactor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_FormFactor>(
    Device_FormFactor_descriptor(), name, value);
}
enum Device_Property {
  Device_Property_RESERVED = 0,
  Device_Property_AUDIO_CHANNEL = 1,
  Device_Property_BLE_MAC_ADDRESS = 2,
  Device_Property_ETHERNET_MAC_ADDRESS = 3,
  Device_Property_Device_Property_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_Property_Device_Property_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_Property_IsValid(int value);
const Device_Property Device_Property_Property_MIN = Device_Property_RESERVED;
const Device_Property Device_Property_Property_MAX = Device_Property_ETHERNET_MAC_ADDRESS;
const int Device_Property_Property_ARRAYSIZE = Device_Property_Property_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_Property_descriptor();
inline const ::std::string& Device_Property_Name(Device_Property value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_Property_descriptor(), value);
}
inline bool Device_Property_Parse(
    const ::std::string& name, Device_Property* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_Property>(
    Device_Property_descriptor(), name, value);
}
enum DeviceInfo_Type {
  DeviceInfo_Type_UNKNOWN = 0,
  DeviceInfo_Type_OTHER = 1,
  DeviceInfo_Type_SELF = 2,
  DeviceInfo_Type_EEPROM = 3,
  DeviceInfo_Type_VIDEO = 4,
  DeviceInfo_Type_AUDIO = 5,
  DeviceInfo_Type_AUDIO_CODEC = 6,
  DeviceInfo_Type_VIDEO_BLE = 7,
  DeviceInfo_Type_AUDIO_BLE = 8,
  DeviceInfo_Type_MCU = 9,
  DeviceInfo_Type_DeviceInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeviceInfo_Type_DeviceInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeviceInfo_Type_IsValid(int value);
const DeviceInfo_Type DeviceInfo_Type_Type_MIN = DeviceInfo_Type_UNKNOWN;
const DeviceInfo_Type DeviceInfo_Type_Type_MAX = DeviceInfo_Type_MCU;
const int DeviceInfo_Type_Type_ARRAYSIZE = DeviceInfo_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceInfo_Type_descriptor();
inline const ::std::string& DeviceInfo_Type_Name(DeviceInfo_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceInfo_Type_descriptor(), value);
}
inline bool DeviceInfo_Type_Parse(
    const ::std::string& name, DeviceInfo_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceInfo_Type>(
    DeviceInfo_Type_descriptor(), name, value);
}
// ===================================================================

class Product : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Product) */ {
 public:
  Product();
  virtual ~Product();

  Product(const Product& from);

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(Product&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Product& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Product* other);
  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return CreateMaybeMessage<Product>(NULL);
  }

  Product* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Product_Model Model;
  static const Model UNKNOWN =
    Product_Model_UNKNOWN;
  static const Model MEETUP =
    Product_Model_MEETUP;
  static const Model RALLY =
    Product_Model_RALLY;
  static const Model RALLY_CAMERA =
    Product_Model_RALLY_CAMERA;
  static inline bool Model_IsValid(int value) {
    return Product_Model_IsValid(value);
  }
  static const Model Model_MIN =
    Product_Model_Model_MIN;
  static const Model Model_MAX =
    Product_Model_Model_MAX;
  static const int Model_ARRAYSIZE =
    Product_Model_Model_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Model_descriptor() {
    return Product_Model_descriptor();
  }
  static inline const ::std::string& Model_Name(Model value) {
    return Product_Model_Name(value);
  }
  static inline bool Model_Parse(const ::std::string& name,
      Model* value) {
    return Product_Model_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Device devices = 6;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 6;
  ::logi::proto::Device* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >*
      mutable_devices();
  const ::logi::proto::Device& devices(int index) const;
  ::logi::proto::Device* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >&
      devices() const;

  // repeated .logi.proto.DeviceEdge device_connections = 7;
  int device_connections_size() const;
  void clear_device_connections();
  static const int kDeviceConnectionsFieldNumber = 7;
  ::logi::proto::DeviceEdge* mutable_device_connections(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >*
      mutable_device_connections();
  const ::logi::proto::DeviceEdge& device_connections(int index) const;
  ::logi::proto::DeviceEdge* add_device_connections();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >&
      device_connections() const;

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string firmware_package_version = 4;
  void clear_firmware_package_version();
  static const int kFirmwarePackageVersionFieldNumber = 4;
  const ::std::string& firmware_package_version() const;
  void set_firmware_package_version(const ::std::string& value);
  #if LANG_CXX11
  void set_firmware_package_version(::std::string&& value);
  #endif
  void set_firmware_package_version(const char* value);
  void set_firmware_package_version(const char* value, size_t size);
  ::std::string* mutable_firmware_package_version();
  ::std::string* release_firmware_package_version();
  void set_allocated_firmware_package_version(::std::string* firmware_package_version);

  // string serial_number = 8;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 8;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // .logi.proto.Product.Model model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  ::logi::proto::Product_Model model() const;
  void set_model(::logi::proto::Product_Model value);

  // uint32 last_firmware_update_time = 5;
  void clear_last_firmware_update_time();
  static const int kLastFirmwareUpdateTimeFieldNumber = 5;
  ::google::protobuf::uint32 last_firmware_update_time() const;
  void set_last_firmware_update_time(::google::protobuf::uint32 value);

  // .logi.proto.SyncConnectionState connection_state = 9;
  void clear_connection_state();
  static const int kConnectionStateFieldNumber = 9;
  ::logi::proto::SyncConnectionState connection_state() const;
  void set_connection_state(::logi::proto::SyncConnectionState value);

  // .logi.proto.SyncUpdateState update_state = 10;
  void clear_update_state();
  static const int kUpdateStateFieldNumber = 10;
  ::logi::proto::SyncUpdateState update_state() const;
  void set_update_state(::logi::proto::SyncUpdateState value);

  // @@protoc_insertion_point(class_scope:logi.proto.Product)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Device > devices_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge > device_connections_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr firmware_package_version_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  int model_;
  ::google::protobuf::uint32 last_firmware_update_time_;
  int connection_state_;
  int update_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fstructures_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Device_PropertiesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Device_PropertiesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Device_PropertiesEntry_DoNotUse();
  Device_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Device_PropertiesEntry_DoNotUse& other);
  static const Device_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Device_PropertiesEntry_DoNotUse*>(&_Device_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Device* other);
  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(NULL);
  }

  Device* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Device_FormFactor FormFactor;
  static const FormFactor UNKNOWN =
    Device_FormFactor_UNKNOWN;
  static const FormFactor MEETUP =
    Device_FormFactor_MEETUP;
  static const FormFactor RALLY_TABLE_HUB =
    Device_FormFactor_RALLY_TABLE_HUB;
  static const FormFactor RALLY_TV_HUB =
    Device_FormFactor_RALLY_TV_HUB;
  static const FormFactor RALLY_CAMERA =
    Device_FormFactor_RALLY_CAMERA;
  static const FormFactor RALLY_MIC_POD =
    Device_FormFactor_RALLY_MIC_POD;
  static const FormFactor RALLY_MIC_POD_HUB =
    Device_FormFactor_RALLY_MIC_POD_HUB;
  static const FormFactor RALLY_SPEAKER =
    Device_FormFactor_RALLY_SPEAKER;
  static inline bool FormFactor_IsValid(int value) {
    return Device_FormFactor_IsValid(value);
  }
  static const FormFactor FormFactor_MIN =
    Device_FormFactor_FormFactor_MIN;
  static const FormFactor FormFactor_MAX =
    Device_FormFactor_FormFactor_MAX;
  static const int FormFactor_ARRAYSIZE =
    Device_FormFactor_FormFactor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FormFactor_descriptor() {
    return Device_FormFactor_descriptor();
  }
  static inline const ::std::string& FormFactor_Name(FormFactor value) {
    return Device_FormFactor_Name(value);
  }
  static inline bool FormFactor_Parse(const ::std::string& name,
      FormFactor* value) {
    return Device_FormFactor_Parse(name, value);
  }

  typedef Device_Property Property;
  static const Property RESERVED =
    Device_Property_RESERVED;
  static const Property AUDIO_CHANNEL =
    Device_Property_AUDIO_CHANNEL;
  static const Property BLE_MAC_ADDRESS =
    Device_Property_BLE_MAC_ADDRESS;
  static const Property ETHERNET_MAC_ADDRESS =
    Device_Property_ETHERNET_MAC_ADDRESS;
  static inline bool Property_IsValid(int value) {
    return Device_Property_IsValid(value);
  }
  static const Property Property_MIN =
    Device_Property_Property_MIN;
  static const Property Property_MAX =
    Device_Property_Property_MAX;
  static const int Property_ARRAYSIZE =
    Device_Property_Property_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Property_descriptor() {
    return Device_Property_descriptor();
  }
  static inline const ::std::string& Property_Name(Property value) {
    return Device_Property_Name(value);
  }
  static inline bool Property_Parse(const ::std::string& name,
      Property* value) {
    return Device_Property_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<uint32, string> properties = 5;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
      mutable_properties();

  // repeated .logi.proto.DeviceInfo information = 6;
  int information_size() const;
  void clear_information();
  static const int kInformationFieldNumber = 6;
  ::logi::proto::DeviceInfo* mutable_information(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceInfo >*
      mutable_information();
  const ::logi::proto::DeviceInfo& information(int index) const;
  ::logi::proto::DeviceInfo* add_information();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceInfo >&
      information() const;

  // string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string serial_number = 7;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 7;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // .logi.proto.Device.FormFactor form_factor = 3;
  void clear_form_factor();
  static const int kFormFactorFieldNumber = 3;
  ::logi::proto::Device_FormFactor form_factor() const;
  void set_form_factor(::logi::proto::Device_FormFactor value);

  // bool is_connected_to_host = 4;
  void clear_is_connected_to_host();
  static const int kIsConnectedToHostFieldNumber = 4;
  bool is_connected_to_host() const;
  void set_is_connected_to_host(bool value);

  // .logi.proto.SyncUpdateState update_state = 8;
  void clear_update_state();
  static const int kUpdateStateFieldNumber = 8;
  ::logi::proto::SyncUpdateState update_state() const;
  void set_update_state(::logi::proto::SyncUpdateState value);

  // .logi.proto.SyncConnectionState connection_state = 9;
  void clear_connection_state();
  static const int kConnectionStateFieldNumber = 9;
  ::logi::proto::SyncConnectionState connection_state() const;
  void set_connection_state(::logi::proto::SyncConnectionState value);

  // @@protoc_insertion_point(class_scope:logi.proto.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Device_PropertiesEntry_DoNotUse,
      ::google::protobuf::uint32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceInfo > information_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  int form_factor_;
  bool is_connected_to_host_;
  int update_state_;
  int connection_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fstructures_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(NULL);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeviceInfo_Type Type;
  static const Type UNKNOWN =
    DeviceInfo_Type_UNKNOWN;
  static const Type OTHER =
    DeviceInfo_Type_OTHER;
  static const Type SELF =
    DeviceInfo_Type_SELF;
  static const Type EEPROM =
    DeviceInfo_Type_EEPROM;
  static const Type VIDEO =
    DeviceInfo_Type_VIDEO;
  static const Type AUDIO =
    DeviceInfo_Type_AUDIO;
  static const Type AUDIO_CODEC =
    DeviceInfo_Type_AUDIO_CODEC;
  static const Type VIDEO_BLE =
    DeviceInfo_Type_VIDEO_BLE;
  static const Type AUDIO_BLE =
    DeviceInfo_Type_AUDIO_BLE;
  static const Type MCU =
    DeviceInfo_Type_MCU;
  static inline bool Type_IsValid(int value) {
    return DeviceInfo_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DeviceInfo_Type_Type_MIN;
  static const Type Type_MAX =
    DeviceInfo_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DeviceInfo_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DeviceInfo_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DeviceInfo_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DeviceInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string firmware_version = 3;
  void clear_firmware_version();
  static const int kFirmwareVersionFieldNumber = 3;
  const ::std::string& firmware_version() const;
  void set_firmware_version(const ::std::string& value);
  #if LANG_CXX11
  void set_firmware_version(::std::string&& value);
  #endif
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  ::std::string* mutable_firmware_version();
  ::std::string* release_firmware_version();
  void set_allocated_firmware_version(::std::string* firmware_version);

  // .logi.proto.DeviceInfo.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::logi::proto::DeviceInfo_Type type() const;
  void set_type(::logi::proto::DeviceInfo_Type value);

  // uint32 pid = 2;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logi.proto.DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr firmware_version_;
  int type_;
  ::google::protobuf::uint32 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fstructures_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceEdge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.DeviceEdge) */ {
 public:
  DeviceEdge();
  virtual ~DeviceEdge();

  DeviceEdge(const DeviceEdge& from);

  inline DeviceEdge& operator=(const DeviceEdge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceEdge(DeviceEdge&& from) noexcept
    : DeviceEdge() {
    *this = ::std::move(from);
  }

  inline DeviceEdge& operator=(DeviceEdge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceEdge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceEdge* internal_default_instance() {
    return reinterpret_cast<const DeviceEdge*>(
               &_DeviceEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeviceEdge* other);
  friend void swap(DeviceEdge& a, DeviceEdge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceEdge* New() const final {
    return CreateMaybeMessage<DeviceEdge>(NULL);
  }

  DeviceEdge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceEdge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceEdge& from);
  void MergeFrom(const DeviceEdge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceEdge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent_device_uuid = 1;
  void clear_parent_device_uuid();
  static const int kParentDeviceUuidFieldNumber = 1;
  const ::std::string& parent_device_uuid() const;
  void set_parent_device_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_device_uuid(::std::string&& value);
  #endif
  void set_parent_device_uuid(const char* value);
  void set_parent_device_uuid(const char* value, size_t size);
  ::std::string* mutable_parent_device_uuid();
  ::std::string* release_parent_device_uuid();
  void set_allocated_parent_device_uuid(::std::string* parent_device_uuid);

  // string child_device_uuid = 2;
  void clear_child_device_uuid();
  static const int kChildDeviceUuidFieldNumber = 2;
  const ::std::string& child_device_uuid() const;
  void set_child_device_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_child_device_uuid(::std::string&& value);
  #endif
  void set_child_device_uuid(const char* value);
  void set_child_device_uuid(const char* value, size_t size);
  ::std::string* mutable_child_device_uuid();
  ::std::string* release_child_device_uuid();
  void set_allocated_child_device_uuid(::std::string* child_device_uuid);

  // @@protoc_insertion_point(class_scope:logi.proto.DeviceEdge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_device_uuid_;
  ::google::protobuf::internal::ArenaStringPtr child_device_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fstructures_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Product

// string uuid = 1;
inline void Product::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.uuid)
  return uuid_.GetNoArena();
}
inline void Product::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Product.uuid)
}
#if LANG_CXX11
inline void Product::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Product.uuid)
}
#endif
inline void Product::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Product.uuid)
}
inline void Product::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Product.uuid)
}
inline ::std::string* Product::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Product.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.Product.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Product.uuid)
}

// .logi.proto.Product.Model model = 2;
inline void Product::clear_model() {
  model_ = 0;
}
inline ::logi::proto::Product_Model Product::model() const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.model)
  return static_cast< ::logi::proto::Product_Model >(model_);
}
inline void Product::set_model(::logi::proto::Product_Model value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Product.model)
}

// string name = 3;
inline void Product::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::name() const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.name)
  return name_.GetNoArena();
}
inline void Product::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Product.name)
}
#if LANG_CXX11
inline void Product::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Product.name)
}
#endif
inline void Product::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Product.name)
}
inline void Product::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Product.name)
}
inline ::std::string* Product::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Product.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_name() {
  // @@protoc_insertion_point(field_release:logi.proto.Product.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Product.name)
}

// string firmware_package_version = 4;
inline void Product::clear_firmware_package_version() {
  firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::firmware_package_version() const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.firmware_package_version)
  return firmware_package_version_.GetNoArena();
}
inline void Product::set_firmware_package_version(const ::std::string& value) {
  
  firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Product.firmware_package_version)
}
#if LANG_CXX11
inline void Product::set_firmware_package_version(::std::string&& value) {
  
  firmware_package_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Product.firmware_package_version)
}
#endif
inline void Product::set_firmware_package_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Product.firmware_package_version)
}
inline void Product::set_firmware_package_version(const char* value, size_t size) {
  
  firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Product.firmware_package_version)
}
inline ::std::string* Product::mutable_firmware_package_version() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Product.firmware_package_version)
  return firmware_package_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_firmware_package_version() {
  // @@protoc_insertion_point(field_release:logi.proto.Product.firmware_package_version)
  
  return firmware_package_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_firmware_package_version(::std::string* firmware_package_version) {
  if (firmware_package_version != NULL) {
    
  } else {
    
  }
  firmware_package_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_package_version);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Product.firmware_package_version)
}

// uint32 last_firmware_update_time = 5;
inline void Product::clear_last_firmware_update_time() {
  last_firmware_update_time_ = 0u;
}
inline ::google::protobuf::uint32 Product::last_firmware_update_time() const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.last_firmware_update_time)
  return last_firmware_update_time_;
}
inline void Product::set_last_firmware_update_time(::google::protobuf::uint32 value) {
  
  last_firmware_update_time_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Product.last_firmware_update_time)
}

// repeated .logi.proto.Device devices = 6;
inline int Product::devices_size() const {
  return devices_.size();
}
inline void Product::clear_devices() {
  devices_.Clear();
}
inline ::logi::proto::Device* Product::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.Product.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >*
Product::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.Product.devices)
  return &devices_;
}
inline const ::logi::proto::Device& Product::devices(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.devices)
  return devices_.Get(index);
}
inline ::logi::proto::Device* Product::add_devices() {
  // @@protoc_insertion_point(field_add:logi.proto.Product.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >&
Product::devices() const {
  // @@protoc_insertion_point(field_list:logi.proto.Product.devices)
  return devices_;
}

// repeated .logi.proto.DeviceEdge device_connections = 7;
inline int Product::device_connections_size() const {
  return device_connections_.size();
}
inline void Product::clear_device_connections() {
  device_connections_.Clear();
}
inline ::logi::proto::DeviceEdge* Product::mutable_device_connections(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.Product.device_connections)
  return device_connections_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >*
Product::mutable_device_connections() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.Product.device_connections)
  return &device_connections_;
}
inline const ::logi::proto::DeviceEdge& Product::device_connections(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.device_connections)
  return device_connections_.Get(index);
}
inline ::logi::proto::DeviceEdge* Product::add_device_connections() {
  // @@protoc_insertion_point(field_add:logi.proto.Product.device_connections)
  return device_connections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >&
Product::device_connections() const {
  // @@protoc_insertion_point(field_list:logi.proto.Product.device_connections)
  return device_connections_;
}

// string serial_number = 8;
inline void Product::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::serial_number() const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.serial_number)
  return serial_number_.GetNoArena();
}
inline void Product::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Product.serial_number)
}
#if LANG_CXX11
inline void Product::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Product.serial_number)
}
#endif
inline void Product::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Product.serial_number)
}
inline void Product::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Product.serial_number)
}
inline ::std::string* Product::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Product.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_serial_number() {
  // @@protoc_insertion_point(field_release:logi.proto.Product.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Product.serial_number)
}

// .logi.proto.SyncConnectionState connection_state = 9;
inline void Product::clear_connection_state() {
  connection_state_ = 0;
}
inline ::logi::proto::SyncConnectionState Product::connection_state() const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.connection_state)
  return static_cast< ::logi::proto::SyncConnectionState >(connection_state_);
}
inline void Product::set_connection_state(::logi::proto::SyncConnectionState value) {
  
  connection_state_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Product.connection_state)
}

// .logi.proto.SyncUpdateState update_state = 10;
inline void Product::clear_update_state() {
  update_state_ = 0;
}
inline ::logi::proto::SyncUpdateState Product::update_state() const {
  // @@protoc_insertion_point(field_get:logi.proto.Product.update_state)
  return static_cast< ::logi::proto::SyncUpdateState >(update_state_);
}
inline void Product::set_update_state(::logi::proto::SyncUpdateState value) {
  
  update_state_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Product.update_state)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Device

// string uuid = 1;
inline void Device::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.Device.uuid)
  return uuid_.GetNoArena();
}
inline void Device::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Device.uuid)
}
#if LANG_CXX11
inline void Device::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Device.uuid)
}
#endif
inline void Device::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Device.uuid)
}
inline void Device::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Device.uuid)
}
inline ::std::string* Device::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Device.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.Device.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Device.uuid)
}

// string name = 2;
inline void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:logi.proto.Device.name)
  return name_.GetNoArena();
}
inline void Device::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Device.name)
}
#if LANG_CXX11
inline void Device::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Device.name)
}
#endif
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Device.name)
}
inline void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Device.name)
}
inline ::std::string* Device::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Device.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:logi.proto.Device.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Device.name)
}

// .logi.proto.Device.FormFactor form_factor = 3;
inline void Device::clear_form_factor() {
  form_factor_ = 0;
}
inline ::logi::proto::Device_FormFactor Device::form_factor() const {
  // @@protoc_insertion_point(field_get:logi.proto.Device.form_factor)
  return static_cast< ::logi::proto::Device_FormFactor >(form_factor_);
}
inline void Device::set_form_factor(::logi::proto::Device_FormFactor value) {
  
  form_factor_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Device.form_factor)
}

// bool is_connected_to_host = 4;
inline void Device::clear_is_connected_to_host() {
  is_connected_to_host_ = false;
}
inline bool Device::is_connected_to_host() const {
  // @@protoc_insertion_point(field_get:logi.proto.Device.is_connected_to_host)
  return is_connected_to_host_;
}
inline void Device::set_is_connected_to_host(bool value) {
  
  is_connected_to_host_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Device.is_connected_to_host)
}

// map<uint32, string> properties = 5;
inline int Device::properties_size() const {
  return properties_.size();
}
inline void Device::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
Device::properties() const {
  // @@protoc_insertion_point(field_map:logi.proto.Device.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
Device::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:logi.proto.Device.properties)
  return properties_.MutableMap();
}

// repeated .logi.proto.DeviceInfo information = 6;
inline int Device::information_size() const {
  return information_.size();
}
inline void Device::clear_information() {
  information_.Clear();
}
inline ::logi::proto::DeviceInfo* Device::mutable_information(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.Device.information)
  return information_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceInfo >*
Device::mutable_information() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.Device.information)
  return &information_;
}
inline const ::logi::proto::DeviceInfo& Device::information(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.Device.information)
  return information_.Get(index);
}
inline ::logi::proto::DeviceInfo* Device::add_information() {
  // @@protoc_insertion_point(field_add:logi.proto.Device.information)
  return information_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceInfo >&
Device::information() const {
  // @@protoc_insertion_point(field_list:logi.proto.Device.information)
  return information_;
}

// string serial_number = 7;
inline void Device::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::serial_number() const {
  // @@protoc_insertion_point(field_get:logi.proto.Device.serial_number)
  return serial_number_.GetNoArena();
}
inline void Device::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Device.serial_number)
}
#if LANG_CXX11
inline void Device::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Device.serial_number)
}
#endif
inline void Device::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Device.serial_number)
}
inline void Device::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Device.serial_number)
}
inline ::std::string* Device::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Device.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_serial_number() {
  // @@protoc_insertion_point(field_release:logi.proto.Device.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Device.serial_number)
}

// .logi.proto.SyncUpdateState update_state = 8;
inline void Device::clear_update_state() {
  update_state_ = 0;
}
inline ::logi::proto::SyncUpdateState Device::update_state() const {
  // @@protoc_insertion_point(field_get:logi.proto.Device.update_state)
  return static_cast< ::logi::proto::SyncUpdateState >(update_state_);
}
inline void Device::set_update_state(::logi::proto::SyncUpdateState value) {
  
  update_state_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Device.update_state)
}

// .logi.proto.SyncConnectionState connection_state = 9;
inline void Device::clear_connection_state() {
  connection_state_ = 0;
}
inline ::logi::proto::SyncConnectionState Device::connection_state() const {
  // @@protoc_insertion_point(field_get:logi.proto.Device.connection_state)
  return static_cast< ::logi::proto::SyncConnectionState >(connection_state_);
}
inline void Device::set_connection_state(::logi::proto::SyncConnectionState value) {
  
  connection_state_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Device.connection_state)
}

// -------------------------------------------------------------------

// DeviceInfo

// .logi.proto.DeviceInfo.Type type = 1;
inline void DeviceInfo::clear_type() {
  type_ = 0;
}
inline ::logi::proto::DeviceInfo_Type DeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceInfo.type)
  return static_cast< ::logi::proto::DeviceInfo_Type >(type_);
}
inline void DeviceInfo::set_type(::logi::proto::DeviceInfo_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.DeviceInfo.type)
}

// uint32 pid = 2;
inline void DeviceInfo::clear_pid() {
  pid_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::pid() const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceInfo.pid)
  return pid_;
}
inline void DeviceInfo::set_pid(::google::protobuf::uint32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.DeviceInfo.pid)
}

// string firmware_version = 3;
inline void DeviceInfo::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::firmware_version() const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceInfo.firmware_version)
  return firmware_version_.GetNoArena();
}
inline void DeviceInfo::set_firmware_version(const ::std::string& value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.DeviceInfo.firmware_version)
}
#if LANG_CXX11
inline void DeviceInfo::set_firmware_version(::std::string&& value) {
  
  firmware_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.DeviceInfo.firmware_version)
}
#endif
inline void DeviceInfo::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.DeviceInfo.firmware_version)
}
inline void DeviceInfo::set_firmware_version(const char* value, size_t size) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DeviceInfo.firmware_version)
}
inline ::std::string* DeviceInfo::mutable_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceInfo.firmware_version)
  return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_firmware_version() {
  // @@protoc_insertion_point(field_release:logi.proto.DeviceInfo.firmware_version)
  
  return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version != NULL) {
    
  } else {
    
  }
  firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.DeviceInfo.firmware_version)
}

// -------------------------------------------------------------------

// DeviceEdge

// string parent_device_uuid = 1;
inline void DeviceEdge::clear_parent_device_uuid() {
  parent_device_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceEdge::parent_device_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceEdge.parent_device_uuid)
  return parent_device_uuid_.GetNoArena();
}
inline void DeviceEdge::set_parent_device_uuid(const ::std::string& value) {
  
  parent_device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.DeviceEdge.parent_device_uuid)
}
#if LANG_CXX11
inline void DeviceEdge::set_parent_device_uuid(::std::string&& value) {
  
  parent_device_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.DeviceEdge.parent_device_uuid)
}
#endif
inline void DeviceEdge::set_parent_device_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.DeviceEdge.parent_device_uuid)
}
inline void DeviceEdge::set_parent_device_uuid(const char* value, size_t size) {
  
  parent_device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DeviceEdge.parent_device_uuid)
}
inline ::std::string* DeviceEdge::mutable_parent_device_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceEdge.parent_device_uuid)
  return parent_device_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceEdge::release_parent_device_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.DeviceEdge.parent_device_uuid)
  
  return parent_device_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceEdge::set_allocated_parent_device_uuid(::std::string* parent_device_uuid) {
  if (parent_device_uuid != NULL) {
    
  } else {
    
  }
  parent_device_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_device_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.DeviceEdge.parent_device_uuid)
}

// string child_device_uuid = 2;
inline void DeviceEdge::clear_child_device_uuid() {
  child_device_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceEdge::child_device_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceEdge.child_device_uuid)
  return child_device_uuid_.GetNoArena();
}
inline void DeviceEdge::set_child_device_uuid(const ::std::string& value) {
  
  child_device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.DeviceEdge.child_device_uuid)
}
#if LANG_CXX11
inline void DeviceEdge::set_child_device_uuid(::std::string&& value) {
  
  child_device_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.DeviceEdge.child_device_uuid)
}
#endif
inline void DeviceEdge::set_child_device_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  child_device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.DeviceEdge.child_device_uuid)
}
inline void DeviceEdge::set_child_device_uuid(const char* value, size_t size) {
  
  child_device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DeviceEdge.child_device_uuid)
}
inline ::std::string* DeviceEdge::mutable_child_device_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceEdge.child_device_uuid)
  return child_device_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceEdge::release_child_device_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.DeviceEdge.child_device_uuid)
  
  return child_device_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceEdge::set_allocated_child_device_uuid(::std::string* child_device_uuid) {
  if (child_device_uuid != NULL) {
    
  } else {
    
  }
  child_device_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), child_device_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.DeviceEdge.child_device_uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::logi::proto::Product_Model> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::logi::proto::Product_Model>() {
  return ::logi::proto::Product_Model_descriptor();
}
template <> struct is_proto_enum< ::logi::proto::Device_FormFactor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::logi::proto::Device_FormFactor>() {
  return ::logi::proto::Device_FormFactor_descriptor();
}
template <> struct is_proto_enum< ::logi::proto::Device_Property> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::logi::proto::Device_Property>() {
  return ::logi::proto::Device_Property_descriptor();
}
template <> struct is_proto_enum< ::logi::proto::DeviceInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::logi::proto::DeviceInfo_Type>() {
  return ::logi::proto::DeviceInfo_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_product_5fstate_5fstructures_2eproto
