// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_message.proto

#include "cloud_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cloud_5fdevice_5fevents_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fdevice_5fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LRProductUpdatedEvent;
}  // namespace protobuf_cloud_5fdevice_5fevents_2eproto
namespace protobuf_cloud_5fdevice_5frequests_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fdevice_5frequests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LRCheckForProductUpdateRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fdevice_5frequests_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LRCheckForProductUpdateResponse;
}  // namespace protobuf_cloud_5fdevice_5frequests_2eproto
namespace protobuf_cloud_5fmessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LREvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_LRRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_LRResponse;
}  // namespace protobuf_cloud_5fmessage_2eproto
namespace protobuf_cloud_5fprovisioning_5fevents_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LRProvisioningDataAvailableEvent;
}  // namespace protobuf_cloud_5fprovisioning_5fevents_2eproto
namespace protobuf_cloud_5fprovisioning_5frequests_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5frequests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LRDeprovisionHostRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5frequests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LRGetProvisioningDataRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5frequests_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LRSetCloudConnectionStateRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5frequests_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LRDeprovisionHostResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5frequests_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LRProvisionHostRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5frequests_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LRProvisionHostResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5frequests_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LRGetProvisioningDataResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fprovisioning_5frequests_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LRSetCloudConnectionStateResponse;
}  // namespace protobuf_cloud_5fprovisioning_5frequests_2eproto
namespace protobuf_transport_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_transport_2eproto
namespace logi {
namespace proto {
class LogiRaidenMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogiRaidenMessage>
      _instance;
  const ::logi::proto::LRRequest* request_;
  const ::logi::proto::LRResponse* response_;
  const ::logi::proto::LREvent* event_;
} _LogiRaidenMessage_default_instance_;
class LRRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LRRequest>
      _instance;
  const ::logi::proto::LRProvisionHostRequest* provision_host_request_;
  const ::logi::proto::LRDeprovisionHostRequest* deprovision_host_request_;
  const ::logi::proto::LRGetProvisioningDataRequest* get_provisioning_data_request_;
  const ::logi::proto::LRSetCloudConnectionStateRequest* set_cloud_connection_state_request_;
  const ::logi::proto::LRCheckForProductUpdateRequest* check_for_product_update_request_;
} _LRRequest_default_instance_;
class LRResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LRResponse>
      _instance;
  const ::logi::proto::LRProvisionHostResponse* provision_host_response_;
  const ::logi::proto::LRDeprovisionHostResponse* deprovision_host_response_;
  const ::logi::proto::LRGetProvisioningDataResponse* get_provisioning_data_response_;
  const ::logi::proto::LRSetCloudConnectionStateResponse* set_cloud_connection_state_response_;
  const ::logi::proto::LRCheckForProductUpdateResponse* check_for_product_update_response_;
} _LRResponse_default_instance_;
class LREventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LREvent>
      _instance;
  const ::logi::proto::LRProvisioningDataAvailableEvent* provisioning_data_available_event_;
  const ::logi::proto::LRProductUpdatedEvent* product_updated_event_;
} _LREvent_default_instance_;
}  // namespace proto
}  // namespace logi
namespace protobuf_cloud_5fmessage_2eproto {
static void InitDefaultsLogiRaidenMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LogiRaidenMessage_default_instance_;
    new (ptr) ::logi::proto::LogiRaidenMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::LogiRaidenMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_LogiRaidenMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLogiRaidenMessage}, {
      &protobuf_transport_2eproto::scc_info_Header.base,
      &protobuf_cloud_5fmessage_2eproto::scc_info_LRRequest.base,
      &protobuf_cloud_5fmessage_2eproto::scc_info_LRResponse.base,
      &protobuf_cloud_5fmessage_2eproto::scc_info_LREvent.base,}};

static void InitDefaultsLRRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LRRequest_default_instance_;
    new (ptr) ::logi::proto::LRRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::LRRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_LRRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsLRRequest}, {
      &protobuf_cloud_5fprovisioning_5frequests_2eproto::scc_info_LRProvisionHostRequest.base,
      &protobuf_cloud_5fprovisioning_5frequests_2eproto::scc_info_LRDeprovisionHostRequest.base,
      &protobuf_cloud_5fprovisioning_5frequests_2eproto::scc_info_LRGetProvisioningDataRequest.base,
      &protobuf_cloud_5fprovisioning_5frequests_2eproto::scc_info_LRSetCloudConnectionStateRequest.base,
      &protobuf_cloud_5fdevice_5frequests_2eproto::scc_info_LRCheckForProductUpdateRequest.base,}};

static void InitDefaultsLRResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LRResponse_default_instance_;
    new (ptr) ::logi::proto::LRResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::LRResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_LRResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsLRResponse}, {
      &protobuf_cloud_5fprovisioning_5frequests_2eproto::scc_info_LRProvisionHostResponse.base,
      &protobuf_cloud_5fprovisioning_5frequests_2eproto::scc_info_LRDeprovisionHostResponse.base,
      &protobuf_cloud_5fprovisioning_5frequests_2eproto::scc_info_LRGetProvisioningDataResponse.base,
      &protobuf_cloud_5fprovisioning_5frequests_2eproto::scc_info_LRSetCloudConnectionStateResponse.base,
      &protobuf_cloud_5fdevice_5frequests_2eproto::scc_info_LRCheckForProductUpdateResponse.base,}};

static void InitDefaultsLREvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LREvent_default_instance_;
    new (ptr) ::logi::proto::LREvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::LREvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LREvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLREvent}, {
      &protobuf_cloud_5fprovisioning_5fevents_2eproto::scc_info_LRProvisioningDataAvailableEvent.base,
      &protobuf_cloud_5fdevice_5fevents_2eproto::scc_info_LRProductUpdatedEvent.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LogiRaidenMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LRRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LRResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LREvent.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LogiRaidenMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LogiRaidenMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LogiRaidenMessage, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LogiRaidenMessage, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LogiRaidenMessage, internal_api_id_),
  offsetof(::logi::proto::LogiRaidenMessageDefaultTypeInternal, request_),
  offsetof(::logi::proto::LogiRaidenMessageDefaultTypeInternal, response_),
  offsetof(::logi::proto::LogiRaidenMessageDefaultTypeInternal, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LogiRaidenMessage, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::logi::proto::LRRequestDefaultTypeInternal, provision_host_request_),
  offsetof(::logi::proto::LRRequestDefaultTypeInternal, deprovision_host_request_),
  offsetof(::logi::proto::LRRequestDefaultTypeInternal, get_provisioning_data_request_),
  offsetof(::logi::proto::LRRequestDefaultTypeInternal, set_cloud_connection_state_request_),
  offsetof(::logi::proto::LRRequestDefaultTypeInternal, check_for_product_update_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRRequest, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::logi::proto::LRResponseDefaultTypeInternal, provision_host_response_),
  offsetof(::logi::proto::LRResponseDefaultTypeInternal, deprovision_host_response_),
  offsetof(::logi::proto::LRResponseDefaultTypeInternal, get_provisioning_data_response_),
  offsetof(::logi::proto::LRResponseDefaultTypeInternal, set_cloud_connection_state_response_),
  offsetof(::logi::proto::LRResponseDefaultTypeInternal, check_for_product_update_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRResponse, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LREvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LREvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::logi::proto::LREventDefaultTypeInternal, provisioning_data_available_event_),
  offsetof(::logi::proto::LREventDefaultTypeInternal, product_updated_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LREvent, payload_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logi::proto::LogiRaidenMessage)},
  { 12, -1, sizeof(::logi::proto::LRRequest)},
  { 23, -1, sizeof(::logi::proto::LRResponse)},
  { 34, -1, sizeof(::logi::proto::LREvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LogiRaidenMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LRRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LRResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LREvent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cloud_message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023cloud_message.proto\022\nlogi.proto\032\017trans"
      "port.proto\032!cloud_provisioning_requests."
      "proto\032\037cloud_provisioning_events.proto\032\031"
      "cloud_device_events.proto\032\033cloud_device_"
      "requests.proto\"\277\002\n\021LogiRaidenMessage\022\"\n\006"
      "header\030\001 \001(\0132\022.logi.proto.Header\0224\n\006sour"
      "ce\030\002 \001(\0162$.logi.proto.LogiRaidenMessage."
      "Source\022\027\n\017internal_api_id\030\003 \001(\005\022(\n\007reque"
      "st\030\004 \001(\0132\025.logi.proto.LRRequestH\000\022*\n\010res"
      "ponse\030\005 \001(\0132\026.logi.proto.LRResponseH\000\022$\n"
      "\005event\030\006 \001(\0132\023.logi.proto.LREventH\000\"0\n\006S"
      "ource\022\017\n\013UNAVAILABLE\020\000\022\n\n\006CLIENT\020\001\022\t\n\005PR"
      "OXY\020\002B\t\n\007payload\"\255\003\n\tLRRequest\022D\n\026provis"
      "ion_host_request\030\001 \001(\0132\".logi.proto.LRPr"
      "ovisionHostRequestH\000\022H\n\030deprovision_host"
      "_request\030\002 \001(\0132$.logi.proto.LRDeprovisio"
      "nHostRequestH\000\022Q\n\035get_provisioning_data_"
      "request\030\003 \001(\0132(.logi.proto.LRGetProvisio"
      "ningDataRequestH\000\022Z\n\"set_cloud_connectio"
      "n_state_request\030\004 \001(\0132,.logi.proto.LRSet"
      "CloudConnectionStateRequestH\000\022V\n check_f"
      "or_product_update_request\030\005 \001(\0132*.logi.p"
      "roto.LRCheckForProductUpdateRequestH\000B\t\n"
      "\007payload\"\270\003\n\nLRResponse\022F\n\027provision_hos"
      "t_response\030\001 \001(\0132#.logi.proto.LRProvisio"
      "nHostResponseH\000\022J\n\031deprovision_host_resp"
      "onse\030\002 \001(\0132%.logi.proto.LRDeprovisionHos"
      "tResponseH\000\022S\n\036get_provisioning_data_res"
      "ponse\030\003 \001(\0132).logi.proto.LRGetProvisioni"
      "ngDataResponseH\000\022\\\n#set_cloud_connection"
      "_state_response\030\004 \001(\0132-.logi.proto.LRSet"
      "CloudConnectionStateResponseH\000\022X\n!check_"
      "for_product_update_response\030\005 \001(\0132+.logi"
      ".proto.LRCheckForProductUpdateResponseH\000"
      "B\t\n\007payload\"\263\001\n\007LREvent\022Y\n!provisioning_"
      "data_available_event\030\001 \001(\0132,.logi.proto."
      "LRProvisioningDataAvailableEventH\000\022B\n\025pr"
      "oduct_updated_event\030\002 \001(\0132!.logi.proto.L"
      "RProductUpdatedEventH\000B\t\n\007payloadB\'\n%com"
      ".logitech.vc.raiden.proto.messagesb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1602);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cloud_message.proto", &protobuf_RegisterTypes);
  ::protobuf_transport_2eproto::AddDescriptors();
  ::protobuf_cloud_5fprovisioning_5frequests_2eproto::AddDescriptors();
  ::protobuf_cloud_5fprovisioning_5fevents_2eproto::AddDescriptors();
  ::protobuf_cloud_5fdevice_5fevents_2eproto::AddDescriptors();
  ::protobuf_cloud_5fdevice_5frequests_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cloud_5fmessage_2eproto
namespace logi {
namespace proto {
const ::google::protobuf::EnumDescriptor* LogiRaidenMessage_Source_descriptor() {
  protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cloud_5fmessage_2eproto::file_level_enum_descriptors[0];
}
bool LogiRaidenMessage_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogiRaidenMessage_Source LogiRaidenMessage::UNAVAILABLE;
const LogiRaidenMessage_Source LogiRaidenMessage::CLIENT;
const LogiRaidenMessage_Source LogiRaidenMessage::PROXY;
const LogiRaidenMessage_Source LogiRaidenMessage::Source_MIN;
const LogiRaidenMessage_Source LogiRaidenMessage::Source_MAX;
const int LogiRaidenMessage::Source_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LogiRaidenMessage::InitAsDefaultInstance() {
  ::logi::proto::_LogiRaidenMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::logi::proto::Header*>(
      ::logi::proto::Header::internal_default_instance());
  ::logi::proto::_LogiRaidenMessage_default_instance_.request_ = const_cast< ::logi::proto::LRRequest*>(
      ::logi::proto::LRRequest::internal_default_instance());
  ::logi::proto::_LogiRaidenMessage_default_instance_.response_ = const_cast< ::logi::proto::LRResponse*>(
      ::logi::proto::LRResponse::internal_default_instance());
  ::logi::proto::_LogiRaidenMessage_default_instance_.event_ = const_cast< ::logi::proto::LREvent*>(
      ::logi::proto::LREvent::internal_default_instance());
}
void LogiRaidenMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void LogiRaidenMessage::set_allocated_request(::logi::proto::LRRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    set_has_request();
    payload_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LogiRaidenMessage.request)
}
void LogiRaidenMessage::set_allocated_response(::logi::proto::LRResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    payload_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LogiRaidenMessage.response)
}
void LogiRaidenMessage::set_allocated_event(::logi::proto::LREvent* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    payload_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LogiRaidenMessage.event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogiRaidenMessage::kHeaderFieldNumber;
const int LogiRaidenMessage::kSourceFieldNumber;
const int LogiRaidenMessage::kInternalApiIdFieldNumber;
const int LogiRaidenMessage::kRequestFieldNumber;
const int LogiRaidenMessage::kResponseFieldNumber;
const int LogiRaidenMessage::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogiRaidenMessage::LogiRaidenMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cloud_5fmessage_2eproto::scc_info_LogiRaidenMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.LogiRaidenMessage)
}
LogiRaidenMessage::LogiRaidenMessage(const LogiRaidenMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::logi::proto::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&internal_api_id_) -
    reinterpret_cast<char*>(&source_)) + sizeof(internal_api_id_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kRequest: {
      mutable_request()->::logi::proto::LRRequest::MergeFrom(from.request());
      break;
    }
    case kResponse: {
      mutable_response()->::logi::proto::LRResponse::MergeFrom(from.response());
      break;
    }
    case kEvent: {
      mutable_event()->::logi::proto::LREvent::MergeFrom(from.event());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.LogiRaidenMessage)
}

void LogiRaidenMessage::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_api_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(internal_api_id_));
  clear_has_payload();
}

LogiRaidenMessage::~LogiRaidenMessage() {
  // @@protoc_insertion_point(destructor:logi.proto.LogiRaidenMessage)
  SharedDtor();
}

void LogiRaidenMessage::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (has_payload()) {
    clear_payload();
  }
}

void LogiRaidenMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogiRaidenMessage::descriptor() {
  ::protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogiRaidenMessage& LogiRaidenMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cloud_5fmessage_2eproto::scc_info_LogiRaidenMessage.base);
  return *internal_default_instance();
}


void LogiRaidenMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:logi.proto.LogiRaidenMessage)
  switch (payload_case()) {
    case kRequest: {
      delete payload_.request_;
      break;
    }
    case kResponse: {
      delete payload_.response_;
      break;
    }
    case kEvent: {
      delete payload_.event_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void LogiRaidenMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.LogiRaidenMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_api_id_) -
      reinterpret_cast<char*>(&source_)) + sizeof(internal_api_id_));
  clear_payload();
  _internal_metadata_.Clear();
}

bool LogiRaidenMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.LogiRaidenMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LogiRaidenMessage.Source source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::logi::proto::LogiRaidenMessage_Source >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 internal_api_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &internal_api_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRRequest request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRResponse response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LREvent event = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.LogiRaidenMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.LogiRaidenMessage)
  return false;
#undef DO_
}

void LogiRaidenMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.LogiRaidenMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .logi.proto.LogiRaidenMessage.Source source = 2;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source(), output);
  }

  // int32 internal_api_id = 3;
  if (this->internal_api_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->internal_api_id(), output);
  }

  // .logi.proto.LRRequest request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_request(), output);
  }

  // .logi.proto.LRResponse response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_response(), output);
  }

  // .logi.proto.LREvent event = 6;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_event(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.LogiRaidenMessage)
}

::google::protobuf::uint8* LogiRaidenMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.LogiRaidenMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .logi.proto.LogiRaidenMessage.Source source = 2;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->source(), target);
  }

  // int32 internal_api_id = 3;
  if (this->internal_api_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->internal_api_id(), target);
  }

  // .logi.proto.LRRequest request = 4;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_request(), deterministic, target);
  }

  // .logi.proto.LRResponse response = 5;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_response(), deterministic, target);
  }

  // .logi.proto.LREvent event = 6;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_event(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.LogiRaidenMessage)
  return target;
}

size_t LogiRaidenMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.LogiRaidenMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .logi.proto.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .logi.proto.LogiRaidenMessage.Source source = 2;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  // int32 internal_api_id = 3;
  if (this->internal_api_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->internal_api_id());
  }

  switch (payload_case()) {
    // .logi.proto.LRRequest request = 4;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.request_);
      break;
    }
    // .logi.proto.LRResponse response = 5;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.response_);
      break;
    }
    // .logi.proto.LREvent event = 6;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.event_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogiRaidenMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.LogiRaidenMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogiRaidenMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogiRaidenMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.LogiRaidenMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.LogiRaidenMessage)
    MergeFrom(*source);
  }
}

void LogiRaidenMessage::MergeFrom(const LogiRaidenMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.LogiRaidenMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::logi::proto::Header::MergeFrom(from.header());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.internal_api_id() != 0) {
    set_internal_api_id(from.internal_api_id());
  }
  switch (from.payload_case()) {
    case kRequest: {
      mutable_request()->::logi::proto::LRRequest::MergeFrom(from.request());
      break;
    }
    case kResponse: {
      mutable_response()->::logi::proto::LRResponse::MergeFrom(from.response());
      break;
    }
    case kEvent: {
      mutable_event()->::logi::proto::LREvent::MergeFrom(from.event());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void LogiRaidenMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.LogiRaidenMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogiRaidenMessage::CopyFrom(const LogiRaidenMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.LogiRaidenMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogiRaidenMessage::IsInitialized() const {
  return true;
}

void LogiRaidenMessage::Swap(LogiRaidenMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogiRaidenMessage::InternalSwap(LogiRaidenMessage* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(source_, other->source_);
  swap(internal_api_id_, other->internal_api_id_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogiRaidenMessage::GetMetadata() const {
  protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LRRequest::InitAsDefaultInstance() {
  ::logi::proto::_LRRequest_default_instance_.provision_host_request_ = const_cast< ::logi::proto::LRProvisionHostRequest*>(
      ::logi::proto::LRProvisionHostRequest::internal_default_instance());
  ::logi::proto::_LRRequest_default_instance_.deprovision_host_request_ = const_cast< ::logi::proto::LRDeprovisionHostRequest*>(
      ::logi::proto::LRDeprovisionHostRequest::internal_default_instance());
  ::logi::proto::_LRRequest_default_instance_.get_provisioning_data_request_ = const_cast< ::logi::proto::LRGetProvisioningDataRequest*>(
      ::logi::proto::LRGetProvisioningDataRequest::internal_default_instance());
  ::logi::proto::_LRRequest_default_instance_.set_cloud_connection_state_request_ = const_cast< ::logi::proto::LRSetCloudConnectionStateRequest*>(
      ::logi::proto::LRSetCloudConnectionStateRequest::internal_default_instance());
  ::logi::proto::_LRRequest_default_instance_.check_for_product_update_request_ = const_cast< ::logi::proto::LRCheckForProductUpdateRequest*>(
      ::logi::proto::LRCheckForProductUpdateRequest::internal_default_instance());
}
void LRRequest::set_allocated_provision_host_request(::logi::proto::LRProvisionHostRequest* provision_host_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (provision_host_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      provision_host_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, provision_host_request, submessage_arena);
    }
    set_has_provision_host_request();
    payload_.provision_host_request_ = provision_host_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRRequest.provision_host_request)
}
void LRRequest::clear_provision_host_request() {
  if (has_provision_host_request()) {
    delete payload_.provision_host_request_;
    clear_has_payload();
  }
}
void LRRequest::set_allocated_deprovision_host_request(::logi::proto::LRDeprovisionHostRequest* deprovision_host_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (deprovision_host_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deprovision_host_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deprovision_host_request, submessage_arena);
    }
    set_has_deprovision_host_request();
    payload_.deprovision_host_request_ = deprovision_host_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRRequest.deprovision_host_request)
}
void LRRequest::clear_deprovision_host_request() {
  if (has_deprovision_host_request()) {
    delete payload_.deprovision_host_request_;
    clear_has_payload();
  }
}
void LRRequest::set_allocated_get_provisioning_data_request(::logi::proto::LRGetProvisioningDataRequest* get_provisioning_data_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (get_provisioning_data_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_provisioning_data_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_provisioning_data_request, submessage_arena);
    }
    set_has_get_provisioning_data_request();
    payload_.get_provisioning_data_request_ = get_provisioning_data_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRRequest.get_provisioning_data_request)
}
void LRRequest::clear_get_provisioning_data_request() {
  if (has_get_provisioning_data_request()) {
    delete payload_.get_provisioning_data_request_;
    clear_has_payload();
  }
}
void LRRequest::set_allocated_set_cloud_connection_state_request(::logi::proto::LRSetCloudConnectionStateRequest* set_cloud_connection_state_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (set_cloud_connection_state_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_cloud_connection_state_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_cloud_connection_state_request, submessage_arena);
    }
    set_has_set_cloud_connection_state_request();
    payload_.set_cloud_connection_state_request_ = set_cloud_connection_state_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRRequest.set_cloud_connection_state_request)
}
void LRRequest::clear_set_cloud_connection_state_request() {
  if (has_set_cloud_connection_state_request()) {
    delete payload_.set_cloud_connection_state_request_;
    clear_has_payload();
  }
}
void LRRequest::set_allocated_check_for_product_update_request(::logi::proto::LRCheckForProductUpdateRequest* check_for_product_update_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (check_for_product_update_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_for_product_update_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_for_product_update_request, submessage_arena);
    }
    set_has_check_for_product_update_request();
    payload_.check_for_product_update_request_ = check_for_product_update_request;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRRequest.check_for_product_update_request)
}
void LRRequest::clear_check_for_product_update_request() {
  if (has_check_for_product_update_request()) {
    delete payload_.check_for_product_update_request_;
    clear_has_payload();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRRequest::kProvisionHostRequestFieldNumber;
const int LRRequest::kDeprovisionHostRequestFieldNumber;
const int LRRequest::kGetProvisioningDataRequestFieldNumber;
const int LRRequest::kSetCloudConnectionStateRequestFieldNumber;
const int LRRequest::kCheckForProductUpdateRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRRequest::LRRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cloud_5fmessage_2eproto::scc_info_LRRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.LRRequest)
}
LRRequest::LRRequest(const LRRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kProvisionHostRequest: {
      mutable_provision_host_request()->::logi::proto::LRProvisionHostRequest::MergeFrom(from.provision_host_request());
      break;
    }
    case kDeprovisionHostRequest: {
      mutable_deprovision_host_request()->::logi::proto::LRDeprovisionHostRequest::MergeFrom(from.deprovision_host_request());
      break;
    }
    case kGetProvisioningDataRequest: {
      mutable_get_provisioning_data_request()->::logi::proto::LRGetProvisioningDataRequest::MergeFrom(from.get_provisioning_data_request());
      break;
    }
    case kSetCloudConnectionStateRequest: {
      mutable_set_cloud_connection_state_request()->::logi::proto::LRSetCloudConnectionStateRequest::MergeFrom(from.set_cloud_connection_state_request());
      break;
    }
    case kCheckForProductUpdateRequest: {
      mutable_check_for_product_update_request()->::logi::proto::LRCheckForProductUpdateRequest::MergeFrom(from.check_for_product_update_request());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.LRRequest)
}

void LRRequest::SharedCtor() {
  clear_has_payload();
}

LRRequest::~LRRequest() {
  // @@protoc_insertion_point(destructor:logi.proto.LRRequest)
  SharedDtor();
}

void LRRequest::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void LRRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LRRequest::descriptor() {
  ::protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LRRequest& LRRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cloud_5fmessage_2eproto::scc_info_LRRequest.base);
  return *internal_default_instance();
}


void LRRequest::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:logi.proto.LRRequest)
  switch (payload_case()) {
    case kProvisionHostRequest: {
      delete payload_.provision_host_request_;
      break;
    }
    case kDeprovisionHostRequest: {
      delete payload_.deprovision_host_request_;
      break;
    }
    case kGetProvisioningDataRequest: {
      delete payload_.get_provisioning_data_request_;
      break;
    }
    case kSetCloudConnectionStateRequest: {
      delete payload_.set_cloud_connection_state_request_;
      break;
    }
    case kCheckForProductUpdateRequest: {
      delete payload_.check_for_product_update_request_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void LRRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.LRRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

bool LRRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.LRRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.LRProvisionHostRequest provision_host_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_provision_host_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRDeprovisionHostRequest deprovision_host_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deprovision_host_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRGetProvisioningDataRequest get_provisioning_data_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_provisioning_data_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRSetCloudConnectionStateRequest set_cloud_connection_state_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_cloud_connection_state_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRCheckForProductUpdateRequest check_for_product_update_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_for_product_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.LRRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.LRRequest)
  return false;
#undef DO_
}

void LRRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.LRRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.LRProvisionHostRequest provision_host_request = 1;
  if (has_provision_host_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_provision_host_request(), output);
  }

  // .logi.proto.LRDeprovisionHostRequest deprovision_host_request = 2;
  if (has_deprovision_host_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_deprovision_host_request(), output);
  }

  // .logi.proto.LRGetProvisioningDataRequest get_provisioning_data_request = 3;
  if (has_get_provisioning_data_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_get_provisioning_data_request(), output);
  }

  // .logi.proto.LRSetCloudConnectionStateRequest set_cloud_connection_state_request = 4;
  if (has_set_cloud_connection_state_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_set_cloud_connection_state_request(), output);
  }

  // .logi.proto.LRCheckForProductUpdateRequest check_for_product_update_request = 5;
  if (has_check_for_product_update_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_check_for_product_update_request(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.LRRequest)
}

::google::protobuf::uint8* LRRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.LRRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.LRProvisionHostRequest provision_host_request = 1;
  if (has_provision_host_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_provision_host_request(), deterministic, target);
  }

  // .logi.proto.LRDeprovisionHostRequest deprovision_host_request = 2;
  if (has_deprovision_host_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_deprovision_host_request(), deterministic, target);
  }

  // .logi.proto.LRGetProvisioningDataRequest get_provisioning_data_request = 3;
  if (has_get_provisioning_data_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_get_provisioning_data_request(), deterministic, target);
  }

  // .logi.proto.LRSetCloudConnectionStateRequest set_cloud_connection_state_request = 4;
  if (has_set_cloud_connection_state_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_set_cloud_connection_state_request(), deterministic, target);
  }

  // .logi.proto.LRCheckForProductUpdateRequest check_for_product_update_request = 5;
  if (has_check_for_product_update_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_check_for_product_update_request(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.LRRequest)
  return target;
}

size_t LRRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.LRRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (payload_case()) {
    // .logi.proto.LRProvisionHostRequest provision_host_request = 1;
    case kProvisionHostRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.provision_host_request_);
      break;
    }
    // .logi.proto.LRDeprovisionHostRequest deprovision_host_request = 2;
    case kDeprovisionHostRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.deprovision_host_request_);
      break;
    }
    // .logi.proto.LRGetProvisioningDataRequest get_provisioning_data_request = 3;
    case kGetProvisioningDataRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.get_provisioning_data_request_);
      break;
    }
    // .logi.proto.LRSetCloudConnectionStateRequest set_cloud_connection_state_request = 4;
    case kSetCloudConnectionStateRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.set_cloud_connection_state_request_);
      break;
    }
    // .logi.proto.LRCheckForProductUpdateRequest check_for_product_update_request = 5;
    case kCheckForProductUpdateRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.check_for_product_update_request_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LRRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.LRRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LRRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LRRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.LRRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.LRRequest)
    MergeFrom(*source);
  }
}

void LRRequest::MergeFrom(const LRRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.LRRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kProvisionHostRequest: {
      mutable_provision_host_request()->::logi::proto::LRProvisionHostRequest::MergeFrom(from.provision_host_request());
      break;
    }
    case kDeprovisionHostRequest: {
      mutable_deprovision_host_request()->::logi::proto::LRDeprovisionHostRequest::MergeFrom(from.deprovision_host_request());
      break;
    }
    case kGetProvisioningDataRequest: {
      mutable_get_provisioning_data_request()->::logi::proto::LRGetProvisioningDataRequest::MergeFrom(from.get_provisioning_data_request());
      break;
    }
    case kSetCloudConnectionStateRequest: {
      mutable_set_cloud_connection_state_request()->::logi::proto::LRSetCloudConnectionStateRequest::MergeFrom(from.set_cloud_connection_state_request());
      break;
    }
    case kCheckForProductUpdateRequest: {
      mutable_check_for_product_update_request()->::logi::proto::LRCheckForProductUpdateRequest::MergeFrom(from.check_for_product_update_request());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void LRRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.LRRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRRequest::CopyFrom(const LRRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.LRRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRRequest::IsInitialized() const {
  return true;
}

void LRRequest::Swap(LRRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRRequest::InternalSwap(LRRequest* other) {
  using std::swap;
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LRRequest::GetMetadata() const {
  protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LRResponse::InitAsDefaultInstance() {
  ::logi::proto::_LRResponse_default_instance_.provision_host_response_ = const_cast< ::logi::proto::LRProvisionHostResponse*>(
      ::logi::proto::LRProvisionHostResponse::internal_default_instance());
  ::logi::proto::_LRResponse_default_instance_.deprovision_host_response_ = const_cast< ::logi::proto::LRDeprovisionHostResponse*>(
      ::logi::proto::LRDeprovisionHostResponse::internal_default_instance());
  ::logi::proto::_LRResponse_default_instance_.get_provisioning_data_response_ = const_cast< ::logi::proto::LRGetProvisioningDataResponse*>(
      ::logi::proto::LRGetProvisioningDataResponse::internal_default_instance());
  ::logi::proto::_LRResponse_default_instance_.set_cloud_connection_state_response_ = const_cast< ::logi::proto::LRSetCloudConnectionStateResponse*>(
      ::logi::proto::LRSetCloudConnectionStateResponse::internal_default_instance());
  ::logi::proto::_LRResponse_default_instance_.check_for_product_update_response_ = const_cast< ::logi::proto::LRCheckForProductUpdateResponse*>(
      ::logi::proto::LRCheckForProductUpdateResponse::internal_default_instance());
}
void LRResponse::set_allocated_provision_host_response(::logi::proto::LRProvisionHostResponse* provision_host_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (provision_host_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      provision_host_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, provision_host_response, submessage_arena);
    }
    set_has_provision_host_response();
    payload_.provision_host_response_ = provision_host_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRResponse.provision_host_response)
}
void LRResponse::clear_provision_host_response() {
  if (has_provision_host_response()) {
    delete payload_.provision_host_response_;
    clear_has_payload();
  }
}
void LRResponse::set_allocated_deprovision_host_response(::logi::proto::LRDeprovisionHostResponse* deprovision_host_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (deprovision_host_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deprovision_host_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deprovision_host_response, submessage_arena);
    }
    set_has_deprovision_host_response();
    payload_.deprovision_host_response_ = deprovision_host_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRResponse.deprovision_host_response)
}
void LRResponse::clear_deprovision_host_response() {
  if (has_deprovision_host_response()) {
    delete payload_.deprovision_host_response_;
    clear_has_payload();
  }
}
void LRResponse::set_allocated_get_provisioning_data_response(::logi::proto::LRGetProvisioningDataResponse* get_provisioning_data_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (get_provisioning_data_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get_provisioning_data_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get_provisioning_data_response, submessage_arena);
    }
    set_has_get_provisioning_data_response();
    payload_.get_provisioning_data_response_ = get_provisioning_data_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRResponse.get_provisioning_data_response)
}
void LRResponse::clear_get_provisioning_data_response() {
  if (has_get_provisioning_data_response()) {
    delete payload_.get_provisioning_data_response_;
    clear_has_payload();
  }
}
void LRResponse::set_allocated_set_cloud_connection_state_response(::logi::proto::LRSetCloudConnectionStateResponse* set_cloud_connection_state_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (set_cloud_connection_state_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_cloud_connection_state_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_cloud_connection_state_response, submessage_arena);
    }
    set_has_set_cloud_connection_state_response();
    payload_.set_cloud_connection_state_response_ = set_cloud_connection_state_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRResponse.set_cloud_connection_state_response)
}
void LRResponse::clear_set_cloud_connection_state_response() {
  if (has_set_cloud_connection_state_response()) {
    delete payload_.set_cloud_connection_state_response_;
    clear_has_payload();
  }
}
void LRResponse::set_allocated_check_for_product_update_response(::logi::proto::LRCheckForProductUpdateResponse* check_for_product_update_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (check_for_product_update_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_for_product_update_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_for_product_update_response, submessage_arena);
    }
    set_has_check_for_product_update_response();
    payload_.check_for_product_update_response_ = check_for_product_update_response;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LRResponse.check_for_product_update_response)
}
void LRResponse::clear_check_for_product_update_response() {
  if (has_check_for_product_update_response()) {
    delete payload_.check_for_product_update_response_;
    clear_has_payload();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRResponse::kProvisionHostResponseFieldNumber;
const int LRResponse::kDeprovisionHostResponseFieldNumber;
const int LRResponse::kGetProvisioningDataResponseFieldNumber;
const int LRResponse::kSetCloudConnectionStateResponseFieldNumber;
const int LRResponse::kCheckForProductUpdateResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRResponse::LRResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cloud_5fmessage_2eproto::scc_info_LRResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.LRResponse)
}
LRResponse::LRResponse(const LRResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kProvisionHostResponse: {
      mutable_provision_host_response()->::logi::proto::LRProvisionHostResponse::MergeFrom(from.provision_host_response());
      break;
    }
    case kDeprovisionHostResponse: {
      mutable_deprovision_host_response()->::logi::proto::LRDeprovisionHostResponse::MergeFrom(from.deprovision_host_response());
      break;
    }
    case kGetProvisioningDataResponse: {
      mutable_get_provisioning_data_response()->::logi::proto::LRGetProvisioningDataResponse::MergeFrom(from.get_provisioning_data_response());
      break;
    }
    case kSetCloudConnectionStateResponse: {
      mutable_set_cloud_connection_state_response()->::logi::proto::LRSetCloudConnectionStateResponse::MergeFrom(from.set_cloud_connection_state_response());
      break;
    }
    case kCheckForProductUpdateResponse: {
      mutable_check_for_product_update_response()->::logi::proto::LRCheckForProductUpdateResponse::MergeFrom(from.check_for_product_update_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.LRResponse)
}

void LRResponse::SharedCtor() {
  clear_has_payload();
}

LRResponse::~LRResponse() {
  // @@protoc_insertion_point(destructor:logi.proto.LRResponse)
  SharedDtor();
}

void LRResponse::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void LRResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LRResponse::descriptor() {
  ::protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LRResponse& LRResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cloud_5fmessage_2eproto::scc_info_LRResponse.base);
  return *internal_default_instance();
}


void LRResponse::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:logi.proto.LRResponse)
  switch (payload_case()) {
    case kProvisionHostResponse: {
      delete payload_.provision_host_response_;
      break;
    }
    case kDeprovisionHostResponse: {
      delete payload_.deprovision_host_response_;
      break;
    }
    case kGetProvisioningDataResponse: {
      delete payload_.get_provisioning_data_response_;
      break;
    }
    case kSetCloudConnectionStateResponse: {
      delete payload_.set_cloud_connection_state_response_;
      break;
    }
    case kCheckForProductUpdateResponse: {
      delete payload_.check_for_product_update_response_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void LRResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.LRResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

bool LRResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.LRResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.LRProvisionHostResponse provision_host_response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_provision_host_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRDeprovisionHostResponse deprovision_host_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deprovision_host_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRGetProvisioningDataResponse get_provisioning_data_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get_provisioning_data_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRSetCloudConnectionStateResponse set_cloud_connection_state_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_cloud_connection_state_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRCheckForProductUpdateResponse check_for_product_update_response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_for_product_update_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.LRResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.LRResponse)
  return false;
#undef DO_
}

void LRResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.LRResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.LRProvisionHostResponse provision_host_response = 1;
  if (has_provision_host_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_provision_host_response(), output);
  }

  // .logi.proto.LRDeprovisionHostResponse deprovision_host_response = 2;
  if (has_deprovision_host_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_deprovision_host_response(), output);
  }

  // .logi.proto.LRGetProvisioningDataResponse get_provisioning_data_response = 3;
  if (has_get_provisioning_data_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_get_provisioning_data_response(), output);
  }

  // .logi.proto.LRSetCloudConnectionStateResponse set_cloud_connection_state_response = 4;
  if (has_set_cloud_connection_state_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_set_cloud_connection_state_response(), output);
  }

  // .logi.proto.LRCheckForProductUpdateResponse check_for_product_update_response = 5;
  if (has_check_for_product_update_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_check_for_product_update_response(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.LRResponse)
}

::google::protobuf::uint8* LRResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.LRResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.LRProvisionHostResponse provision_host_response = 1;
  if (has_provision_host_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_provision_host_response(), deterministic, target);
  }

  // .logi.proto.LRDeprovisionHostResponse deprovision_host_response = 2;
  if (has_deprovision_host_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_deprovision_host_response(), deterministic, target);
  }

  // .logi.proto.LRGetProvisioningDataResponse get_provisioning_data_response = 3;
  if (has_get_provisioning_data_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_get_provisioning_data_response(), deterministic, target);
  }

  // .logi.proto.LRSetCloudConnectionStateResponse set_cloud_connection_state_response = 4;
  if (has_set_cloud_connection_state_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_set_cloud_connection_state_response(), deterministic, target);
  }

  // .logi.proto.LRCheckForProductUpdateResponse check_for_product_update_response = 5;
  if (has_check_for_product_update_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_check_for_product_update_response(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.LRResponse)
  return target;
}

size_t LRResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.LRResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (payload_case()) {
    // .logi.proto.LRProvisionHostResponse provision_host_response = 1;
    case kProvisionHostResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.provision_host_response_);
      break;
    }
    // .logi.proto.LRDeprovisionHostResponse deprovision_host_response = 2;
    case kDeprovisionHostResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.deprovision_host_response_);
      break;
    }
    // .logi.proto.LRGetProvisioningDataResponse get_provisioning_data_response = 3;
    case kGetProvisioningDataResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.get_provisioning_data_response_);
      break;
    }
    // .logi.proto.LRSetCloudConnectionStateResponse set_cloud_connection_state_response = 4;
    case kSetCloudConnectionStateResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.set_cloud_connection_state_response_);
      break;
    }
    // .logi.proto.LRCheckForProductUpdateResponse check_for_product_update_response = 5;
    case kCheckForProductUpdateResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.check_for_product_update_response_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LRResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.LRResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LRResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LRResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.LRResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.LRResponse)
    MergeFrom(*source);
  }
}

void LRResponse::MergeFrom(const LRResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.LRResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kProvisionHostResponse: {
      mutable_provision_host_response()->::logi::proto::LRProvisionHostResponse::MergeFrom(from.provision_host_response());
      break;
    }
    case kDeprovisionHostResponse: {
      mutable_deprovision_host_response()->::logi::proto::LRDeprovisionHostResponse::MergeFrom(from.deprovision_host_response());
      break;
    }
    case kGetProvisioningDataResponse: {
      mutable_get_provisioning_data_response()->::logi::proto::LRGetProvisioningDataResponse::MergeFrom(from.get_provisioning_data_response());
      break;
    }
    case kSetCloudConnectionStateResponse: {
      mutable_set_cloud_connection_state_response()->::logi::proto::LRSetCloudConnectionStateResponse::MergeFrom(from.set_cloud_connection_state_response());
      break;
    }
    case kCheckForProductUpdateResponse: {
      mutable_check_for_product_update_response()->::logi::proto::LRCheckForProductUpdateResponse::MergeFrom(from.check_for_product_update_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void LRResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.LRResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRResponse::CopyFrom(const LRResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.LRResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRResponse::IsInitialized() const {
  return true;
}

void LRResponse::Swap(LRResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRResponse::InternalSwap(LRResponse* other) {
  using std::swap;
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LRResponse::GetMetadata() const {
  protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LREvent::InitAsDefaultInstance() {
  ::logi::proto::_LREvent_default_instance_.provisioning_data_available_event_ = const_cast< ::logi::proto::LRProvisioningDataAvailableEvent*>(
      ::logi::proto::LRProvisioningDataAvailableEvent::internal_default_instance());
  ::logi::proto::_LREvent_default_instance_.product_updated_event_ = const_cast< ::logi::proto::LRProductUpdatedEvent*>(
      ::logi::proto::LRProductUpdatedEvent::internal_default_instance());
}
void LREvent::set_allocated_provisioning_data_available_event(::logi::proto::LRProvisioningDataAvailableEvent* provisioning_data_available_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (provisioning_data_available_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      provisioning_data_available_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, provisioning_data_available_event, submessage_arena);
    }
    set_has_provisioning_data_available_event();
    payload_.provisioning_data_available_event_ = provisioning_data_available_event;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LREvent.provisioning_data_available_event)
}
void LREvent::clear_provisioning_data_available_event() {
  if (has_provisioning_data_available_event()) {
    delete payload_.provisioning_data_available_event_;
    clear_has_payload();
  }
}
void LREvent::set_allocated_product_updated_event(::logi::proto::LRProductUpdatedEvent* product_updated_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (product_updated_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_updated_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_updated_event, submessage_arena);
    }
    set_has_product_updated_event();
    payload_.product_updated_event_ = product_updated_event;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LREvent.product_updated_event)
}
void LREvent::clear_product_updated_event() {
  if (has_product_updated_event()) {
    delete payload_.product_updated_event_;
    clear_has_payload();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LREvent::kProvisioningDataAvailableEventFieldNumber;
const int LREvent::kProductUpdatedEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LREvent::LREvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cloud_5fmessage_2eproto::scc_info_LREvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.LREvent)
}
LREvent::LREvent(const LREvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kProvisioningDataAvailableEvent: {
      mutable_provisioning_data_available_event()->::logi::proto::LRProvisioningDataAvailableEvent::MergeFrom(from.provisioning_data_available_event());
      break;
    }
    case kProductUpdatedEvent: {
      mutable_product_updated_event()->::logi::proto::LRProductUpdatedEvent::MergeFrom(from.product_updated_event());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.LREvent)
}

void LREvent::SharedCtor() {
  clear_has_payload();
}

LREvent::~LREvent() {
  // @@protoc_insertion_point(destructor:logi.proto.LREvent)
  SharedDtor();
}

void LREvent::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void LREvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LREvent::descriptor() {
  ::protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LREvent& LREvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cloud_5fmessage_2eproto::scc_info_LREvent.base);
  return *internal_default_instance();
}


void LREvent::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:logi.proto.LREvent)
  switch (payload_case()) {
    case kProvisioningDataAvailableEvent: {
      delete payload_.provisioning_data_available_event_;
      break;
    }
    case kProductUpdatedEvent: {
      delete payload_.product_updated_event_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void LREvent::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.LREvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

bool LREvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.LREvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.LRProvisioningDataAvailableEvent provisioning_data_available_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_provisioning_data_available_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRProductUpdatedEvent product_updated_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product_updated_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.LREvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.LREvent)
  return false;
#undef DO_
}

void LREvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.LREvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.LRProvisioningDataAvailableEvent provisioning_data_available_event = 1;
  if (has_provisioning_data_available_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_provisioning_data_available_event(), output);
  }

  // .logi.proto.LRProductUpdatedEvent product_updated_event = 2;
  if (has_product_updated_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_product_updated_event(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.LREvent)
}

::google::protobuf::uint8* LREvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.LREvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.LRProvisioningDataAvailableEvent provisioning_data_available_event = 1;
  if (has_provisioning_data_available_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_provisioning_data_available_event(), deterministic, target);
  }

  // .logi.proto.LRProductUpdatedEvent product_updated_event = 2;
  if (has_product_updated_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_product_updated_event(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.LREvent)
  return target;
}

size_t LREvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.LREvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (payload_case()) {
    // .logi.proto.LRProvisioningDataAvailableEvent provisioning_data_available_event = 1;
    case kProvisioningDataAvailableEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.provisioning_data_available_event_);
      break;
    }
    // .logi.proto.LRProductUpdatedEvent product_updated_event = 2;
    case kProductUpdatedEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.product_updated_event_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LREvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.LREvent)
  GOOGLE_DCHECK_NE(&from, this);
  const LREvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LREvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.LREvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.LREvent)
    MergeFrom(*source);
  }
}

void LREvent::MergeFrom(const LREvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.LREvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kProvisioningDataAvailableEvent: {
      mutable_provisioning_data_available_event()->::logi::proto::LRProvisioningDataAvailableEvent::MergeFrom(from.provisioning_data_available_event());
      break;
    }
    case kProductUpdatedEvent: {
      mutable_product_updated_event()->::logi::proto::LRProductUpdatedEvent::MergeFrom(from.product_updated_event());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void LREvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.LREvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LREvent::CopyFrom(const LREvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.LREvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LREvent::IsInitialized() const {
  return true;
}

void LREvent::Swap(LREvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LREvent::InternalSwap(LREvent* other) {
  using std::swap;
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LREvent::GetMetadata() const {
  protobuf_cloud_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LogiRaidenMessage* Arena::CreateMaybeMessage< ::logi::proto::LogiRaidenMessage >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LogiRaidenMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LRRequest* Arena::CreateMaybeMessage< ::logi::proto::LRRequest >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LRRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LRResponse* Arena::CreateMaybeMessage< ::logi::proto::LRResponse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LRResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LREvent* Arena::CreateMaybeMessage< ::logi::proto::LREvent >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LREvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
