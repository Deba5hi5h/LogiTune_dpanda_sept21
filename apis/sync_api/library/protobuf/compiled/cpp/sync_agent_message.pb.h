// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_agent_message.proto

#ifndef PROTOBUF_INCLUDED_sync_5fagent_5fmessage_2eproto
#define PROTOBUF_INCLUDED_sync_5fagent_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transport.pb.h"
#include "sync_agent_software_update_requests.pb.h"
#include "sync_agent_software_update_events.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sync_5fagent_5fmessage_2eproto 

namespace protobuf_sync_5fagent_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sync_5fagent_5fmessage_2eproto
namespace logi {
namespace proto {
class LSAEvent;
class LSAEventDefaultTypeInternal;
extern LSAEventDefaultTypeInternal _LSAEvent_default_instance_;
class LSARequest;
class LSARequestDefaultTypeInternal;
extern LSARequestDefaultTypeInternal _LSARequest_default_instance_;
class LSAResponse;
class LSAResponseDefaultTypeInternal;
extern LSAResponseDefaultTypeInternal _LSAResponse_default_instance_;
class LogiSyncAgentMessage;
class LogiSyncAgentMessageDefaultTypeInternal;
extern LogiSyncAgentMessageDefaultTypeInternal _LogiSyncAgentMessage_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::LSAEvent* Arena::CreateMaybeMessage<::logi::proto::LSAEvent>(Arena*);
template<> ::logi::proto::LSARequest* Arena::CreateMaybeMessage<::logi::proto::LSARequest>(Arena*);
template<> ::logi::proto::LSAResponse* Arena::CreateMaybeMessage<::logi::proto::LSAResponse>(Arena*);
template<> ::logi::proto::LogiSyncAgentMessage* Arena::CreateMaybeMessage<::logi::proto::LogiSyncAgentMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

// ===================================================================

class LogiSyncAgentMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.LogiSyncAgentMessage) */ {
 public:
  LogiSyncAgentMessage();
  virtual ~LogiSyncAgentMessage();

  LogiSyncAgentMessage(const LogiSyncAgentMessage& from);

  inline LogiSyncAgentMessage& operator=(const LogiSyncAgentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogiSyncAgentMessage(LogiSyncAgentMessage&& from) noexcept
    : LogiSyncAgentMessage() {
    *this = ::std::move(from);
  }

  inline LogiSyncAgentMessage& operator=(LogiSyncAgentMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogiSyncAgentMessage& default_instance();

  enum PayloadCase {
    kRequest = 3,
    kEvent = 4,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogiSyncAgentMessage* internal_default_instance() {
    return reinterpret_cast<const LogiSyncAgentMessage*>(
               &_LogiSyncAgentMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogiSyncAgentMessage* other);
  friend void swap(LogiSyncAgentMessage& a, LogiSyncAgentMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogiSyncAgentMessage* New() const final {
    return CreateMaybeMessage<LogiSyncAgentMessage>(NULL);
  }

  LogiSyncAgentMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogiSyncAgentMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogiSyncAgentMessage& from);
  void MergeFrom(const LogiSyncAgentMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogiSyncAgentMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::logi::proto::Header& _internal_header() const;
  public:
  const ::logi::proto::Header& header() const;
  ::logi::proto::Header* release_header();
  ::logi::proto::Header* mutable_header();
  void set_allocated_header(::logi::proto::Header* header);

  // int32 internal_api_id = 2;
  void clear_internal_api_id();
  static const int kInternalApiIdFieldNumber = 2;
  ::google::protobuf::int32 internal_api_id() const;
  void set_internal_api_id(::google::protobuf::int32 value);

  // .logi.proto.LSARequest request = 3;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 3;
  private:
  const ::logi::proto::LSARequest& _internal_request() const;
  public:
  const ::logi::proto::LSARequest& request() const;
  ::logi::proto::LSARequest* release_request();
  ::logi::proto::LSARequest* mutable_request();
  void set_allocated_request(::logi::proto::LSARequest* request);

  // .logi.proto.LSAEvent event = 4;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 4;
  private:
  const ::logi::proto::LSAEvent& _internal_event() const;
  public:
  const ::logi::proto::LSAEvent& event() const;
  ::logi::proto::LSAEvent* release_event();
  ::logi::proto::LSAEvent* mutable_event();
  void set_allocated_event(::logi::proto::LSAEvent* event);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.LogiSyncAgentMessage)
 private:
  void set_has_request();
  void set_has_event();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::logi::proto::Header* header_;
  ::google::protobuf::int32 internal_api_id_;
  union PayloadUnion {
    PayloadUnion() {}
    ::logi::proto::LSARequest* request_;
    ::logi::proto::LSAEvent* event_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sync_5fagent_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LSARequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.LSARequest) */ {
 public:
  LSARequest();
  virtual ~LSARequest();

  LSARequest(const LSARequest& from);

  inline LSARequest& operator=(const LSARequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LSARequest(LSARequest&& from) noexcept
    : LSARequest() {
    *this = ::std::move(from);
  }

  inline LSARequest& operator=(LSARequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LSARequest& default_instance();

  enum PayloadCase {
    kGetSoftwareUpdateReportRequest = 1,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LSARequest* internal_default_instance() {
    return reinterpret_cast<const LSARequest*>(
               &_LSARequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LSARequest* other);
  friend void swap(LSARequest& a, LSARequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LSARequest* New() const final {
    return CreateMaybeMessage<LSARequest>(NULL);
  }

  LSARequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LSARequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LSARequest& from);
  void MergeFrom(const LSARequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LSARequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.LSAGetSoftwareUpdateReportRequest get_software_update_report_request = 1;
  bool has_get_software_update_report_request() const;
  void clear_get_software_update_report_request();
  static const int kGetSoftwareUpdateReportRequestFieldNumber = 1;
  private:
  const ::logi::proto::LSAGetSoftwareUpdateReportRequest& _internal_get_software_update_report_request() const;
  public:
  const ::logi::proto::LSAGetSoftwareUpdateReportRequest& get_software_update_report_request() const;
  ::logi::proto::LSAGetSoftwareUpdateReportRequest* release_get_software_update_report_request();
  ::logi::proto::LSAGetSoftwareUpdateReportRequest* mutable_get_software_update_report_request();
  void set_allocated_get_software_update_report_request(::logi::proto::LSAGetSoftwareUpdateReportRequest* get_software_update_report_request);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.LSARequest)
 private:
  void set_has_get_software_update_report_request();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::logi::proto::LSAGetSoftwareUpdateReportRequest* get_software_update_report_request_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sync_5fagent_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LSAResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.LSAResponse) */ {
 public:
  LSAResponse();
  virtual ~LSAResponse();

  LSAResponse(const LSAResponse& from);

  inline LSAResponse& operator=(const LSAResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LSAResponse(LSAResponse&& from) noexcept
    : LSAResponse() {
    *this = ::std::move(from);
  }

  inline LSAResponse& operator=(LSAResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LSAResponse& default_instance();

  enum PayloadCase {
    kGetSoftwareUpdateReportResponse = 1,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LSAResponse* internal_default_instance() {
    return reinterpret_cast<const LSAResponse*>(
               &_LSAResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LSAResponse* other);
  friend void swap(LSAResponse& a, LSAResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LSAResponse* New() const final {
    return CreateMaybeMessage<LSAResponse>(NULL);
  }

  LSAResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LSAResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LSAResponse& from);
  void MergeFrom(const LSAResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LSAResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.LSAGetSoftwareUpdateReportResponse get_software_update_report_response = 1;
  bool has_get_software_update_report_response() const;
  void clear_get_software_update_report_response();
  static const int kGetSoftwareUpdateReportResponseFieldNumber = 1;
  private:
  const ::logi::proto::LSAGetSoftwareUpdateReportResponse& _internal_get_software_update_report_response() const;
  public:
  const ::logi::proto::LSAGetSoftwareUpdateReportResponse& get_software_update_report_response() const;
  ::logi::proto::LSAGetSoftwareUpdateReportResponse* release_get_software_update_report_response();
  ::logi::proto::LSAGetSoftwareUpdateReportResponse* mutable_get_software_update_report_response();
  void set_allocated_get_software_update_report_response(::logi::proto::LSAGetSoftwareUpdateReportResponse* get_software_update_report_response);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.LSAResponse)
 private:
  void set_has_get_software_update_report_response();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::logi::proto::LSAGetSoftwareUpdateReportResponse* get_software_update_report_response_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sync_5fagent_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LSAEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.LSAEvent) */ {
 public:
  LSAEvent();
  virtual ~LSAEvent();

  LSAEvent(const LSAEvent& from);

  inline LSAEvent& operator=(const LSAEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LSAEvent(LSAEvent&& from) noexcept
    : LSAEvent() {
    *this = ::std::move(from);
  }

  inline LSAEvent& operator=(LSAEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LSAEvent& default_instance();

  enum PayloadCase {
    kSoftwareUpdateReportEvent = 1,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LSAEvent* internal_default_instance() {
    return reinterpret_cast<const LSAEvent*>(
               &_LSAEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LSAEvent* other);
  friend void swap(LSAEvent& a, LSAEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LSAEvent* New() const final {
    return CreateMaybeMessage<LSAEvent>(NULL);
  }

  LSAEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LSAEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LSAEvent& from);
  void MergeFrom(const LSAEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LSAEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.LSASoftwareUpdateReportEvent software_update_report_event = 1;
  bool has_software_update_report_event() const;
  void clear_software_update_report_event();
  static const int kSoftwareUpdateReportEventFieldNumber = 1;
  private:
  const ::logi::proto::LSASoftwareUpdateReportEvent& _internal_software_update_report_event() const;
  public:
  const ::logi::proto::LSASoftwareUpdateReportEvent& software_update_report_event() const;
  ::logi::proto::LSASoftwareUpdateReportEvent* release_software_update_report_event();
  ::logi::proto::LSASoftwareUpdateReportEvent* mutable_software_update_report_event();
  void set_allocated_software_update_report_event(::logi::proto::LSASoftwareUpdateReportEvent* software_update_report_event);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.LSAEvent)
 private:
  void set_has_software_update_report_event();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::logi::proto::LSASoftwareUpdateReportEvent* software_update_report_event_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sync_5fagent_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogiSyncAgentMessage

// .logi.proto.Header header = 1;
inline bool LogiSyncAgentMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::logi::proto::Header& LogiSyncAgentMessage::_internal_header() const {
  return *header_;
}
inline const ::logi::proto::Header& LogiSyncAgentMessage::header() const {
  const ::logi::proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncAgentMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::logi::proto::Header*>(
      &::logi::proto::_Header_default_instance_);
}
inline ::logi::proto::Header* LogiSyncAgentMessage::release_header() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncAgentMessage.header)
  
  ::logi::proto::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::logi::proto::Header* LogiSyncAgentMessage::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::logi::proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncAgentMessage.header)
  return header_;
}
inline void LogiSyncAgentMessage::set_allocated_header(::logi::proto::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LogiSyncAgentMessage.header)
}

// int32 internal_api_id = 2;
inline void LogiSyncAgentMessage::clear_internal_api_id() {
  internal_api_id_ = 0;
}
inline ::google::protobuf::int32 LogiSyncAgentMessage::internal_api_id() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncAgentMessage.internal_api_id)
  return internal_api_id_;
}
inline void LogiSyncAgentMessage::set_internal_api_id(::google::protobuf::int32 value) {
  
  internal_api_id_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.LogiSyncAgentMessage.internal_api_id)
}

// .logi.proto.LSARequest request = 3;
inline bool LogiSyncAgentMessage::has_request() const {
  return payload_case() == kRequest;
}
inline void LogiSyncAgentMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void LogiSyncAgentMessage::clear_request() {
  if (has_request()) {
    delete payload_.request_;
    clear_has_payload();
  }
}
inline const ::logi::proto::LSARequest& LogiSyncAgentMessage::_internal_request() const {
  return *payload_.request_;
}
inline ::logi::proto::LSARequest* LogiSyncAgentMessage::release_request() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncAgentMessage.request)
  if (has_request()) {
    clear_has_payload();
      ::logi::proto::LSARequest* temp = payload_.request_;
    payload_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::LSARequest& LogiSyncAgentMessage::request() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncAgentMessage.request)
  return has_request()
      ? *payload_.request_
      : *reinterpret_cast< ::logi::proto::LSARequest*>(&::logi::proto::_LSARequest_default_instance_);
}
inline ::logi::proto::LSARequest* LogiSyncAgentMessage::mutable_request() {
  if (!has_request()) {
    clear_payload();
    set_has_request();
    payload_.request_ = CreateMaybeMessage< ::logi::proto::LSARequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncAgentMessage.request)
  return payload_.request_;
}

// .logi.proto.LSAEvent event = 4;
inline bool LogiSyncAgentMessage::has_event() const {
  return payload_case() == kEvent;
}
inline void LogiSyncAgentMessage::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void LogiSyncAgentMessage::clear_event() {
  if (has_event()) {
    delete payload_.event_;
    clear_has_payload();
  }
}
inline const ::logi::proto::LSAEvent& LogiSyncAgentMessage::_internal_event() const {
  return *payload_.event_;
}
inline ::logi::proto::LSAEvent* LogiSyncAgentMessage::release_event() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncAgentMessage.event)
  if (has_event()) {
    clear_has_payload();
      ::logi::proto::LSAEvent* temp = payload_.event_;
    payload_.event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::LSAEvent& LogiSyncAgentMessage::event() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncAgentMessage.event)
  return has_event()
      ? *payload_.event_
      : *reinterpret_cast< ::logi::proto::LSAEvent*>(&::logi::proto::_LSAEvent_default_instance_);
}
inline ::logi::proto::LSAEvent* LogiSyncAgentMessage::mutable_event() {
  if (!has_event()) {
    clear_payload();
    set_has_event();
    payload_.event_ = CreateMaybeMessage< ::logi::proto::LSAEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncAgentMessage.event)
  return payload_.event_;
}

inline bool LogiSyncAgentMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void LogiSyncAgentMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline LogiSyncAgentMessage::PayloadCase LogiSyncAgentMessage::payload_case() const {
  return LogiSyncAgentMessage::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LSARequest

// .logi.proto.LSAGetSoftwareUpdateReportRequest get_software_update_report_request = 1;
inline bool LSARequest::has_get_software_update_report_request() const {
  return payload_case() == kGetSoftwareUpdateReportRequest;
}
inline void LSARequest::set_has_get_software_update_report_request() {
  _oneof_case_[0] = kGetSoftwareUpdateReportRequest;
}
inline const ::logi::proto::LSAGetSoftwareUpdateReportRequest& LSARequest::_internal_get_software_update_report_request() const {
  return *payload_.get_software_update_report_request_;
}
inline ::logi::proto::LSAGetSoftwareUpdateReportRequest* LSARequest::release_get_software_update_report_request() {
  // @@protoc_insertion_point(field_release:logi.proto.LSARequest.get_software_update_report_request)
  if (has_get_software_update_report_request()) {
    clear_has_payload();
      ::logi::proto::LSAGetSoftwareUpdateReportRequest* temp = payload_.get_software_update_report_request_;
    payload_.get_software_update_report_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::LSAGetSoftwareUpdateReportRequest& LSARequest::get_software_update_report_request() const {
  // @@protoc_insertion_point(field_get:logi.proto.LSARequest.get_software_update_report_request)
  return has_get_software_update_report_request()
      ? *payload_.get_software_update_report_request_
      : *reinterpret_cast< ::logi::proto::LSAGetSoftwareUpdateReportRequest*>(&::logi::proto::_LSAGetSoftwareUpdateReportRequest_default_instance_);
}
inline ::logi::proto::LSAGetSoftwareUpdateReportRequest* LSARequest::mutable_get_software_update_report_request() {
  if (!has_get_software_update_report_request()) {
    clear_payload();
    set_has_get_software_update_report_request();
    payload_.get_software_update_report_request_ = CreateMaybeMessage< ::logi::proto::LSAGetSoftwareUpdateReportRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LSARequest.get_software_update_report_request)
  return payload_.get_software_update_report_request_;
}

inline bool LSARequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void LSARequest::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline LSARequest::PayloadCase LSARequest::payload_case() const {
  return LSARequest::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LSAResponse

// .logi.proto.LSAGetSoftwareUpdateReportResponse get_software_update_report_response = 1;
inline bool LSAResponse::has_get_software_update_report_response() const {
  return payload_case() == kGetSoftwareUpdateReportResponse;
}
inline void LSAResponse::set_has_get_software_update_report_response() {
  _oneof_case_[0] = kGetSoftwareUpdateReportResponse;
}
inline const ::logi::proto::LSAGetSoftwareUpdateReportResponse& LSAResponse::_internal_get_software_update_report_response() const {
  return *payload_.get_software_update_report_response_;
}
inline ::logi::proto::LSAGetSoftwareUpdateReportResponse* LSAResponse::release_get_software_update_report_response() {
  // @@protoc_insertion_point(field_release:logi.proto.LSAResponse.get_software_update_report_response)
  if (has_get_software_update_report_response()) {
    clear_has_payload();
      ::logi::proto::LSAGetSoftwareUpdateReportResponse* temp = payload_.get_software_update_report_response_;
    payload_.get_software_update_report_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::LSAGetSoftwareUpdateReportResponse& LSAResponse::get_software_update_report_response() const {
  // @@protoc_insertion_point(field_get:logi.proto.LSAResponse.get_software_update_report_response)
  return has_get_software_update_report_response()
      ? *payload_.get_software_update_report_response_
      : *reinterpret_cast< ::logi::proto::LSAGetSoftwareUpdateReportResponse*>(&::logi::proto::_LSAGetSoftwareUpdateReportResponse_default_instance_);
}
inline ::logi::proto::LSAGetSoftwareUpdateReportResponse* LSAResponse::mutable_get_software_update_report_response() {
  if (!has_get_software_update_report_response()) {
    clear_payload();
    set_has_get_software_update_report_response();
    payload_.get_software_update_report_response_ = CreateMaybeMessage< ::logi::proto::LSAGetSoftwareUpdateReportResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LSAResponse.get_software_update_report_response)
  return payload_.get_software_update_report_response_;
}

inline bool LSAResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void LSAResponse::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline LSAResponse::PayloadCase LSAResponse::payload_case() const {
  return LSAResponse::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LSAEvent

// .logi.proto.LSASoftwareUpdateReportEvent software_update_report_event = 1;
inline bool LSAEvent::has_software_update_report_event() const {
  return payload_case() == kSoftwareUpdateReportEvent;
}
inline void LSAEvent::set_has_software_update_report_event() {
  _oneof_case_[0] = kSoftwareUpdateReportEvent;
}
inline const ::logi::proto::LSASoftwareUpdateReportEvent& LSAEvent::_internal_software_update_report_event() const {
  return *payload_.software_update_report_event_;
}
inline ::logi::proto::LSASoftwareUpdateReportEvent* LSAEvent::release_software_update_report_event() {
  // @@protoc_insertion_point(field_release:logi.proto.LSAEvent.software_update_report_event)
  if (has_software_update_report_event()) {
    clear_has_payload();
      ::logi::proto::LSASoftwareUpdateReportEvent* temp = payload_.software_update_report_event_;
    payload_.software_update_report_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::LSASoftwareUpdateReportEvent& LSAEvent::software_update_report_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.LSAEvent.software_update_report_event)
  return has_software_update_report_event()
      ? *payload_.software_update_report_event_
      : *reinterpret_cast< ::logi::proto::LSASoftwareUpdateReportEvent*>(&::logi::proto::_LSASoftwareUpdateReportEvent_default_instance_);
}
inline ::logi::proto::LSASoftwareUpdateReportEvent* LSAEvent::mutable_software_update_report_event() {
  if (!has_software_update_report_event()) {
    clear_payload();
    set_has_software_update_report_event();
    payload_.software_update_report_event_ = CreateMaybeMessage< ::logi::proto::LSASoftwareUpdateReportEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LSAEvent.software_update_report_event)
  return payload_.software_update_report_event_;
}

inline bool LSAEvent::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void LSAEvent::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline LSAEvent::PayloadCase LSAEvent::payload_case() const {
  return LSAEvent::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sync_5fagent_5fmessage_2eproto
