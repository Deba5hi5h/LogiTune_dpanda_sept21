// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firmware_requests.proto

#ifndef PROTOBUF_INCLUDED_firmware_5frequests_2eproto
#define PROTOBUF_INCLUDED_firmware_5frequests_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "firmware_structures.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5frequests_2eproto 

namespace protobuf_firmware_5frequests_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_firmware_5frequests_2eproto
namespace logi {
namespace proto {
class FirmwareRequest;
class FirmwareRequestDefaultTypeInternal;
extern FirmwareRequestDefaultTypeInternal _FirmwareRequest_default_instance_;
class FirmwareResponse;
class FirmwareResponseDefaultTypeInternal;
extern FirmwareResponseDefaultTypeInternal _FirmwareResponse_default_instance_;
class GetFirmwareUpdateProgressRequest;
class GetFirmwareUpdateProgressRequestDefaultTypeInternal;
extern GetFirmwareUpdateProgressRequestDefaultTypeInternal _GetFirmwareUpdateProgressRequest_default_instance_;
class GetFirmwareUpdateProgressResponse;
class GetFirmwareUpdateProgressResponseDefaultTypeInternal;
extern GetFirmwareUpdateProgressResponseDefaultTypeInternal _GetFirmwareUpdateProgressResponse_default_instance_;
class GetLatestFirmwareByProductIdRequest;
class GetLatestFirmwareByProductIdRequestDefaultTypeInternal;
extern GetLatestFirmwareByProductIdRequestDefaultTypeInternal _GetLatestFirmwareByProductIdRequest_default_instance_;
class GetLatestFirmwareByProductIdResponse;
class GetLatestFirmwareByProductIdResponseDefaultTypeInternal;
extern GetLatestFirmwareByProductIdResponseDefaultTypeInternal _GetLatestFirmwareByProductIdResponse_default_instance_;
class UpdateAllFirmwareRequest;
class UpdateAllFirmwareRequestDefaultTypeInternal;
extern UpdateAllFirmwareRequestDefaultTypeInternal _UpdateAllFirmwareRequest_default_instance_;
class UpdateAllFirmwareResponse;
class UpdateAllFirmwareResponseDefaultTypeInternal;
extern UpdateAllFirmwareResponseDefaultTypeInternal _UpdateAllFirmwareResponse_default_instance_;
class UpdateFirmwareByProductIdRequest;
class UpdateFirmwareByProductIdRequestDefaultTypeInternal;
extern UpdateFirmwareByProductIdRequestDefaultTypeInternal _UpdateFirmwareByProductIdRequest_default_instance_;
class UpdateFirmwareByProductIdResponse;
class UpdateFirmwareByProductIdResponseDefaultTypeInternal;
extern UpdateFirmwareByProductIdResponseDefaultTypeInternal _UpdateFirmwareByProductIdResponse_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::FirmwareRequest* Arena::CreateMaybeMessage<::logi::proto::FirmwareRequest>(Arena*);
template<> ::logi::proto::FirmwareResponse* Arena::CreateMaybeMessage<::logi::proto::FirmwareResponse>(Arena*);
template<> ::logi::proto::GetFirmwareUpdateProgressRequest* Arena::CreateMaybeMessage<::logi::proto::GetFirmwareUpdateProgressRequest>(Arena*);
template<> ::logi::proto::GetFirmwareUpdateProgressResponse* Arena::CreateMaybeMessage<::logi::proto::GetFirmwareUpdateProgressResponse>(Arena*);
template<> ::logi::proto::GetLatestFirmwareByProductIdRequest* Arena::CreateMaybeMessage<::logi::proto::GetLatestFirmwareByProductIdRequest>(Arena*);
template<> ::logi::proto::GetLatestFirmwareByProductIdResponse* Arena::CreateMaybeMessage<::logi::proto::GetLatestFirmwareByProductIdResponse>(Arena*);
template<> ::logi::proto::UpdateAllFirmwareRequest* Arena::CreateMaybeMessage<::logi::proto::UpdateAllFirmwareRequest>(Arena*);
template<> ::logi::proto::UpdateAllFirmwareResponse* Arena::CreateMaybeMessage<::logi::proto::UpdateAllFirmwareResponse>(Arena*);
template<> ::logi::proto::UpdateFirmwareByProductIdRequest* Arena::CreateMaybeMessage<::logi::proto::UpdateFirmwareByProductIdRequest>(Arena*);
template<> ::logi::proto::UpdateFirmwareByProductIdResponse* Arena::CreateMaybeMessage<::logi::proto::UpdateFirmwareByProductIdResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

// ===================================================================

class GetFirmwareUpdateProgressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.GetFirmwareUpdateProgressRequest) */ {
 public:
  GetFirmwareUpdateProgressRequest();
  virtual ~GetFirmwareUpdateProgressRequest();

  GetFirmwareUpdateProgressRequest(const GetFirmwareUpdateProgressRequest& from);

  inline GetFirmwareUpdateProgressRequest& operator=(const GetFirmwareUpdateProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFirmwareUpdateProgressRequest(GetFirmwareUpdateProgressRequest&& from) noexcept
    : GetFirmwareUpdateProgressRequest() {
    *this = ::std::move(from);
  }

  inline GetFirmwareUpdateProgressRequest& operator=(GetFirmwareUpdateProgressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFirmwareUpdateProgressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFirmwareUpdateProgressRequest* internal_default_instance() {
    return reinterpret_cast<const GetFirmwareUpdateProgressRequest*>(
               &_GetFirmwareUpdateProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetFirmwareUpdateProgressRequest* other);
  friend void swap(GetFirmwareUpdateProgressRequest& a, GetFirmwareUpdateProgressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFirmwareUpdateProgressRequest* New() const final {
    return CreateMaybeMessage<GetFirmwareUpdateProgressRequest>(NULL);
  }

  GetFirmwareUpdateProgressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFirmwareUpdateProgressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFirmwareUpdateProgressRequest& from);
  void MergeFrom(const GetFirmwareUpdateProgressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFirmwareUpdateProgressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool reserved = 1;
  void clear_reserved();
  static const int kReservedFieldNumber = 1;
  bool reserved() const;
  void set_reserved(bool value);

  // @@protoc_insertion_point(class_scope:logi.proto.GetFirmwareUpdateProgressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool reserved_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetFirmwareUpdateProgressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.GetFirmwareUpdateProgressResponse) */ {
 public:
  GetFirmwareUpdateProgressResponse();
  virtual ~GetFirmwareUpdateProgressResponse();

  GetFirmwareUpdateProgressResponse(const GetFirmwareUpdateProgressResponse& from);

  inline GetFirmwareUpdateProgressResponse& operator=(const GetFirmwareUpdateProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFirmwareUpdateProgressResponse(GetFirmwareUpdateProgressResponse&& from) noexcept
    : GetFirmwareUpdateProgressResponse() {
    *this = ::std::move(from);
  }

  inline GetFirmwareUpdateProgressResponse& operator=(GetFirmwareUpdateProgressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFirmwareUpdateProgressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFirmwareUpdateProgressResponse* internal_default_instance() {
    return reinterpret_cast<const GetFirmwareUpdateProgressResponse*>(
               &_GetFirmwareUpdateProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetFirmwareUpdateProgressResponse* other);
  friend void swap(GetFirmwareUpdateProgressResponse& a, GetFirmwareUpdateProgressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFirmwareUpdateProgressResponse* New() const final {
    return CreateMaybeMessage<GetFirmwareUpdateProgressResponse>(NULL);
  }

  GetFirmwareUpdateProgressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFirmwareUpdateProgressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFirmwareUpdateProgressResponse& from);
  void MergeFrom(const GetFirmwareUpdateProgressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFirmwareUpdateProgressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Error errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::logi::proto::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
      mutable_errors();
  const ::logi::proto::Error& errors(int index) const;
  ::logi::proto::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
      errors() const;

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  int updates_size() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  ::logi::proto::FirmwareUpdateProgress* mutable_updates(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >*
      mutable_updates();
  const ::logi::proto::FirmwareUpdateProgress& updates(int index) const;
  ::logi::proto::FirmwareUpdateProgress* add_updates();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >&
      updates() const;

  // @@protoc_insertion_point(class_scope:logi.proto.GetFirmwareUpdateProgressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error > errors_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress > updates_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLatestFirmwareByProductIdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.GetLatestFirmwareByProductIdRequest) */ {
 public:
  GetLatestFirmwareByProductIdRequest();
  virtual ~GetLatestFirmwareByProductIdRequest();

  GetLatestFirmwareByProductIdRequest(const GetLatestFirmwareByProductIdRequest& from);

  inline GetLatestFirmwareByProductIdRequest& operator=(const GetLatestFirmwareByProductIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLatestFirmwareByProductIdRequest(GetLatestFirmwareByProductIdRequest&& from) noexcept
    : GetLatestFirmwareByProductIdRequest() {
    *this = ::std::move(from);
  }

  inline GetLatestFirmwareByProductIdRequest& operator=(GetLatestFirmwareByProductIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLatestFirmwareByProductIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLatestFirmwareByProductIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetLatestFirmwareByProductIdRequest*>(
               &_GetLatestFirmwareByProductIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetLatestFirmwareByProductIdRequest* other);
  friend void swap(GetLatestFirmwareByProductIdRequest& a, GetLatestFirmwareByProductIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLatestFirmwareByProductIdRequest* New() const final {
    return CreateMaybeMessage<GetLatestFirmwareByProductIdRequest>(NULL);
  }

  GetLatestFirmwareByProductIdRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetLatestFirmwareByProductIdRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetLatestFirmwareByProductIdRequest& from);
  void MergeFrom(const GetLatestFirmwareByProductIdRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestFirmwareByProductIdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // @@protoc_insertion_point(class_scope:logi.proto.GetLatestFirmwareByProductIdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLatestFirmwareByProductIdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.GetLatestFirmwareByProductIdResponse) */ {
 public:
  GetLatestFirmwareByProductIdResponse();
  virtual ~GetLatestFirmwareByProductIdResponse();

  GetLatestFirmwareByProductIdResponse(const GetLatestFirmwareByProductIdResponse& from);

  inline GetLatestFirmwareByProductIdResponse& operator=(const GetLatestFirmwareByProductIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLatestFirmwareByProductIdResponse(GetLatestFirmwareByProductIdResponse&& from) noexcept
    : GetLatestFirmwareByProductIdResponse() {
    *this = ::std::move(from);
  }

  inline GetLatestFirmwareByProductIdResponse& operator=(GetLatestFirmwareByProductIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLatestFirmwareByProductIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLatestFirmwareByProductIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetLatestFirmwareByProductIdResponse*>(
               &_GetLatestFirmwareByProductIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetLatestFirmwareByProductIdResponse* other);
  friend void swap(GetLatestFirmwareByProductIdResponse& a, GetLatestFirmwareByProductIdResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLatestFirmwareByProductIdResponse* New() const final {
    return CreateMaybeMessage<GetLatestFirmwareByProductIdResponse>(NULL);
  }

  GetLatestFirmwareByProductIdResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetLatestFirmwareByProductIdResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetLatestFirmwareByProductIdResponse& from);
  void MergeFrom(const GetLatestFirmwareByProductIdResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestFirmwareByProductIdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Error errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::logi::proto::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
      mutable_errors();
  const ::logi::proto::Error& errors(int index) const;
  ::logi::proto::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
      errors() const;

  // repeated .logi.proto.LatestDeviceFirmwareInfo latest_device_firmware_versions = 6;
  int latest_device_firmware_versions_size() const;
  void clear_latest_device_firmware_versions();
  static const int kLatestDeviceFirmwareVersionsFieldNumber = 6;
  ::logi::proto::LatestDeviceFirmwareInfo* mutable_latest_device_firmware_versions(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::LatestDeviceFirmwareInfo >*
      mutable_latest_device_firmware_versions();
  const ::logi::proto::LatestDeviceFirmwareInfo& latest_device_firmware_versions(int index) const;
  ::logi::proto::LatestDeviceFirmwareInfo* add_latest_device_firmware_versions();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::LatestDeviceFirmwareInfo >&
      latest_device_firmware_versions() const;

  // string product_uuid = 2;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 2;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // string latest_firmware_package_version = 3;
  void clear_latest_firmware_package_version();
  static const int kLatestFirmwarePackageVersionFieldNumber = 3;
  const ::std::string& latest_firmware_package_version() const;
  void set_latest_firmware_package_version(const ::std::string& value);
  #if LANG_CXX11
  void set_latest_firmware_package_version(::std::string&& value);
  #endif
  void set_latest_firmware_package_version(const char* value);
  void set_latest_firmware_package_version(const char* value, size_t size);
  ::std::string* mutable_latest_firmware_package_version();
  ::std::string* release_latest_firmware_package_version();
  void set_allocated_latest_firmware_package_version(::std::string* latest_firmware_package_version);

  // string latest_firmware_release_notes_uri = 5;
  void clear_latest_firmware_release_notes_uri();
  static const int kLatestFirmwareReleaseNotesUriFieldNumber = 5;
  const ::std::string& latest_firmware_release_notes_uri() const;
  void set_latest_firmware_release_notes_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_latest_firmware_release_notes_uri(::std::string&& value);
  #endif
  void set_latest_firmware_release_notes_uri(const char* value);
  void set_latest_firmware_release_notes_uri(const char* value, size_t size);
  ::std::string* mutable_latest_firmware_release_notes_uri();
  ::std::string* release_latest_firmware_release_notes_uri();
  void set_allocated_latest_firmware_release_notes_uri(::std::string* latest_firmware_release_notes_uri);

  // uint32 latest_firmware_published_date = 4;
  void clear_latest_firmware_published_date();
  static const int kLatestFirmwarePublishedDateFieldNumber = 4;
  ::google::protobuf::uint32 latest_firmware_published_date() const;
  void set_latest_firmware_published_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logi.proto.GetLatestFirmwareByProductIdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error > errors_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::LatestDeviceFirmwareInfo > latest_device_firmware_versions_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  ::google::protobuf::internal::ArenaStringPtr latest_firmware_package_version_;
  ::google::protobuf::internal::ArenaStringPtr latest_firmware_release_notes_uri_;
  ::google::protobuf::uint32 latest_firmware_published_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateAllFirmwareRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.UpdateAllFirmwareRequest) */ {
 public:
  UpdateAllFirmwareRequest();
  virtual ~UpdateAllFirmwareRequest();

  UpdateAllFirmwareRequest(const UpdateAllFirmwareRequest& from);

  inline UpdateAllFirmwareRequest& operator=(const UpdateAllFirmwareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateAllFirmwareRequest(UpdateAllFirmwareRequest&& from) noexcept
    : UpdateAllFirmwareRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAllFirmwareRequest& operator=(UpdateAllFirmwareRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAllFirmwareRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAllFirmwareRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAllFirmwareRequest*>(
               &_UpdateAllFirmwareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateAllFirmwareRequest* other);
  friend void swap(UpdateAllFirmwareRequest& a, UpdateAllFirmwareRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateAllFirmwareRequest* New() const final {
    return CreateMaybeMessage<UpdateAllFirmwareRequest>(NULL);
  }

  UpdateAllFirmwareRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAllFirmwareRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateAllFirmwareRequest& from);
  void MergeFrom(const UpdateAllFirmwareRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAllFirmwareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool reserved = 1;
  void clear_reserved();
  static const int kReservedFieldNumber = 1;
  bool reserved() const;
  void set_reserved(bool value);

  // @@protoc_insertion_point(class_scope:logi.proto.UpdateAllFirmwareRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool reserved_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateAllFirmwareResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.UpdateAllFirmwareResponse) */ {
 public:
  UpdateAllFirmwareResponse();
  virtual ~UpdateAllFirmwareResponse();

  UpdateAllFirmwareResponse(const UpdateAllFirmwareResponse& from);

  inline UpdateAllFirmwareResponse& operator=(const UpdateAllFirmwareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateAllFirmwareResponse(UpdateAllFirmwareResponse&& from) noexcept
    : UpdateAllFirmwareResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAllFirmwareResponse& operator=(UpdateAllFirmwareResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAllFirmwareResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAllFirmwareResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAllFirmwareResponse*>(
               &_UpdateAllFirmwareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UpdateAllFirmwareResponse* other);
  friend void swap(UpdateAllFirmwareResponse& a, UpdateAllFirmwareResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateAllFirmwareResponse* New() const final {
    return CreateMaybeMessage<UpdateAllFirmwareResponse>(NULL);
  }

  UpdateAllFirmwareResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAllFirmwareResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateAllFirmwareResponse& from);
  void MergeFrom(const UpdateAllFirmwareResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAllFirmwareResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Error errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::logi::proto::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
      mutable_errors();
  const ::logi::proto::Error& errors(int index) const;
  ::logi::proto::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
      errors() const;

  // repeated .logi.proto.FirmwareUpdateProgress updates = 2;
  int updates_size() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  ::logi::proto::FirmwareUpdateProgress* mutable_updates(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >*
      mutable_updates();
  const ::logi::proto::FirmwareUpdateProgress& updates(int index) const;
  ::logi::proto::FirmwareUpdateProgress* add_updates();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >&
      updates() const;

  // @@protoc_insertion_point(class_scope:logi.proto.UpdateAllFirmwareResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error > errors_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress > updates_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateFirmwareByProductIdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.UpdateFirmwareByProductIdRequest) */ {
 public:
  UpdateFirmwareByProductIdRequest();
  virtual ~UpdateFirmwareByProductIdRequest();

  UpdateFirmwareByProductIdRequest(const UpdateFirmwareByProductIdRequest& from);

  inline UpdateFirmwareByProductIdRequest& operator=(const UpdateFirmwareByProductIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateFirmwareByProductIdRequest(UpdateFirmwareByProductIdRequest&& from) noexcept
    : UpdateFirmwareByProductIdRequest() {
    *this = ::std::move(from);
  }

  inline UpdateFirmwareByProductIdRequest& operator=(UpdateFirmwareByProductIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFirmwareByProductIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFirmwareByProductIdRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateFirmwareByProductIdRequest*>(
               &_UpdateFirmwareByProductIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UpdateFirmwareByProductIdRequest* other);
  friend void swap(UpdateFirmwareByProductIdRequest& a, UpdateFirmwareByProductIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFirmwareByProductIdRequest* New() const final {
    return CreateMaybeMessage<UpdateFirmwareByProductIdRequest>(NULL);
  }

  UpdateFirmwareByProductIdRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFirmwareByProductIdRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateFirmwareByProductIdRequest& from);
  void MergeFrom(const UpdateFirmwareByProductIdRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFirmwareByProductIdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // string firmware_package_version = 2;
  void clear_firmware_package_version();
  static const int kFirmwarePackageVersionFieldNumber = 2;
  const ::std::string& firmware_package_version() const;
  void set_firmware_package_version(const ::std::string& value);
  #if LANG_CXX11
  void set_firmware_package_version(::std::string&& value);
  #endif
  void set_firmware_package_version(const char* value);
  void set_firmware_package_version(const char* value, size_t size);
  ::std::string* mutable_firmware_package_version();
  ::std::string* release_firmware_package_version();
  void set_allocated_firmware_package_version(::std::string* firmware_package_version);

  // @@protoc_insertion_point(class_scope:logi.proto.UpdateFirmwareByProductIdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  ::google::protobuf::internal::ArenaStringPtr firmware_package_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateFirmwareByProductIdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.UpdateFirmwareByProductIdResponse) */ {
 public:
  UpdateFirmwareByProductIdResponse();
  virtual ~UpdateFirmwareByProductIdResponse();

  UpdateFirmwareByProductIdResponse(const UpdateFirmwareByProductIdResponse& from);

  inline UpdateFirmwareByProductIdResponse& operator=(const UpdateFirmwareByProductIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateFirmwareByProductIdResponse(UpdateFirmwareByProductIdResponse&& from) noexcept
    : UpdateFirmwareByProductIdResponse() {
    *this = ::std::move(from);
  }

  inline UpdateFirmwareByProductIdResponse& operator=(UpdateFirmwareByProductIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFirmwareByProductIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFirmwareByProductIdResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateFirmwareByProductIdResponse*>(
               &_UpdateFirmwareByProductIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UpdateFirmwareByProductIdResponse* other);
  friend void swap(UpdateFirmwareByProductIdResponse& a, UpdateFirmwareByProductIdResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFirmwareByProductIdResponse* New() const final {
    return CreateMaybeMessage<UpdateFirmwareByProductIdResponse>(NULL);
  }

  UpdateFirmwareByProductIdResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFirmwareByProductIdResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateFirmwareByProductIdResponse& from);
  void MergeFrom(const UpdateFirmwareByProductIdResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFirmwareByProductIdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Error errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::logi::proto::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
      mutable_errors();
  const ::logi::proto::Error& errors(int index) const;
  ::logi::proto::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
      errors() const;

  // .logi.proto.FirmwareUpdateProgress update = 2;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 2;
  private:
  const ::logi::proto::FirmwareUpdateProgress& _internal_update() const;
  public:
  const ::logi::proto::FirmwareUpdateProgress& update() const;
  ::logi::proto::FirmwareUpdateProgress* release_update();
  ::logi::proto::FirmwareUpdateProgress* mutable_update();
  void set_allocated_update(::logi::proto::FirmwareUpdateProgress* update);

  // @@protoc_insertion_point(class_scope:logi.proto.UpdateFirmwareByProductIdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error > errors_;
  ::logi::proto::FirmwareUpdateProgress* update_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FirmwareRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.FirmwareRequest) */ {
 public:
  FirmwareRequest();
  virtual ~FirmwareRequest();

  FirmwareRequest(const FirmwareRequest& from);

  inline FirmwareRequest& operator=(const FirmwareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirmwareRequest(FirmwareRequest&& from) noexcept
    : FirmwareRequest() {
    *this = ::std::move(from);
  }

  inline FirmwareRequest& operator=(FirmwareRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirmwareRequest& default_instance();

  enum RequestCase {
    kGetFirmwareUpdateProgressRequest = 1,
    kGetLatestFirmwareByProductIdRequest = 2,
    kUpdateFirmwareByIdRequest = 3,
    kUpdateAllFirmwareRequest = 4,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareRequest* internal_default_instance() {
    return reinterpret_cast<const FirmwareRequest*>(
               &_FirmwareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FirmwareRequest* other);
  friend void swap(FirmwareRequest& a, FirmwareRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirmwareRequest* New() const final {
    return CreateMaybeMessage<FirmwareRequest>(NULL);
  }

  FirmwareRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirmwareRequest& from);
  void MergeFrom(const FirmwareRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.GetFirmwareUpdateProgressRequest get_firmware_update_progress_request = 1;
  bool has_get_firmware_update_progress_request() const;
  void clear_get_firmware_update_progress_request();
  static const int kGetFirmwareUpdateProgressRequestFieldNumber = 1;
  private:
  const ::logi::proto::GetFirmwareUpdateProgressRequest& _internal_get_firmware_update_progress_request() const;
  public:
  const ::logi::proto::GetFirmwareUpdateProgressRequest& get_firmware_update_progress_request() const;
  ::logi::proto::GetFirmwareUpdateProgressRequest* release_get_firmware_update_progress_request();
  ::logi::proto::GetFirmwareUpdateProgressRequest* mutable_get_firmware_update_progress_request();
  void set_allocated_get_firmware_update_progress_request(::logi::proto::GetFirmwareUpdateProgressRequest* get_firmware_update_progress_request);

  // .logi.proto.GetLatestFirmwareByProductIdRequest get_latest_firmware_by_product_id_request = 2;
  bool has_get_latest_firmware_by_product_id_request() const;
  void clear_get_latest_firmware_by_product_id_request();
  static const int kGetLatestFirmwareByProductIdRequestFieldNumber = 2;
  private:
  const ::logi::proto::GetLatestFirmwareByProductIdRequest& _internal_get_latest_firmware_by_product_id_request() const;
  public:
  const ::logi::proto::GetLatestFirmwareByProductIdRequest& get_latest_firmware_by_product_id_request() const;
  ::logi::proto::GetLatestFirmwareByProductIdRequest* release_get_latest_firmware_by_product_id_request();
  ::logi::proto::GetLatestFirmwareByProductIdRequest* mutable_get_latest_firmware_by_product_id_request();
  void set_allocated_get_latest_firmware_by_product_id_request(::logi::proto::GetLatestFirmwareByProductIdRequest* get_latest_firmware_by_product_id_request);

  // .logi.proto.UpdateFirmwareByProductIdRequest update_firmware_by_id_request = 3;
  bool has_update_firmware_by_id_request() const;
  void clear_update_firmware_by_id_request();
  static const int kUpdateFirmwareByIdRequestFieldNumber = 3;
  private:
  const ::logi::proto::UpdateFirmwareByProductIdRequest& _internal_update_firmware_by_id_request() const;
  public:
  const ::logi::proto::UpdateFirmwareByProductIdRequest& update_firmware_by_id_request() const;
  ::logi::proto::UpdateFirmwareByProductIdRequest* release_update_firmware_by_id_request();
  ::logi::proto::UpdateFirmwareByProductIdRequest* mutable_update_firmware_by_id_request();
  void set_allocated_update_firmware_by_id_request(::logi::proto::UpdateFirmwareByProductIdRequest* update_firmware_by_id_request);

  // .logi.proto.UpdateAllFirmwareRequest update_all_firmware_request = 4;
  bool has_update_all_firmware_request() const;
  void clear_update_all_firmware_request();
  static const int kUpdateAllFirmwareRequestFieldNumber = 4;
  private:
  const ::logi::proto::UpdateAllFirmwareRequest& _internal_update_all_firmware_request() const;
  public:
  const ::logi::proto::UpdateAllFirmwareRequest& update_all_firmware_request() const;
  ::logi::proto::UpdateAllFirmwareRequest* release_update_all_firmware_request();
  ::logi::proto::UpdateAllFirmwareRequest* mutable_update_all_firmware_request();
  void set_allocated_update_all_firmware_request(::logi::proto::UpdateAllFirmwareRequest* update_all_firmware_request);

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.FirmwareRequest)
 private:
  void set_has_get_firmware_update_progress_request();
  void set_has_get_latest_firmware_by_product_id_request();
  void set_has_update_firmware_by_id_request();
  void set_has_update_all_firmware_request();

  inline bool has_request() const;
  inline void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RequestUnion {
    RequestUnion() {}
    ::logi::proto::GetFirmwareUpdateProgressRequest* get_firmware_update_progress_request_;
    ::logi::proto::GetLatestFirmwareByProductIdRequest* get_latest_firmware_by_product_id_request_;
    ::logi::proto::UpdateFirmwareByProductIdRequest* update_firmware_by_id_request_;
    ::logi::proto::UpdateAllFirmwareRequest* update_all_firmware_request_;
  } request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FirmwareResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.FirmwareResponse) */ {
 public:
  FirmwareResponse();
  virtual ~FirmwareResponse();

  FirmwareResponse(const FirmwareResponse& from);

  inline FirmwareResponse& operator=(const FirmwareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirmwareResponse(FirmwareResponse&& from) noexcept
    : FirmwareResponse() {
    *this = ::std::move(from);
  }

  inline FirmwareResponse& operator=(FirmwareResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirmwareResponse& default_instance();

  enum ResponseCase {
    kGetFirmwareUpdateProgressResponse = 2,
    kGetLatestFirmwareByProductIdResponse = 3,
    kUpdateFirmwareByIdResponse = 4,
    kUpdateAllFirmwareResponse = 5,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareResponse* internal_default_instance() {
    return reinterpret_cast<const FirmwareResponse*>(
               &_FirmwareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(FirmwareResponse* other);
  friend void swap(FirmwareResponse& a, FirmwareResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirmwareResponse* New() const final {
    return CreateMaybeMessage<FirmwareResponse>(NULL);
  }

  FirmwareResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirmwareResponse& from);
  void MergeFrom(const FirmwareResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.GetFirmwareUpdateProgressResponse get_firmware_update_progress_response = 2;
  bool has_get_firmware_update_progress_response() const;
  void clear_get_firmware_update_progress_response();
  static const int kGetFirmwareUpdateProgressResponseFieldNumber = 2;
  private:
  const ::logi::proto::GetFirmwareUpdateProgressResponse& _internal_get_firmware_update_progress_response() const;
  public:
  const ::logi::proto::GetFirmwareUpdateProgressResponse& get_firmware_update_progress_response() const;
  ::logi::proto::GetFirmwareUpdateProgressResponse* release_get_firmware_update_progress_response();
  ::logi::proto::GetFirmwareUpdateProgressResponse* mutable_get_firmware_update_progress_response();
  void set_allocated_get_firmware_update_progress_response(::logi::proto::GetFirmwareUpdateProgressResponse* get_firmware_update_progress_response);

  // .logi.proto.GetLatestFirmwareByProductIdResponse get_latest_firmware_by_product_id_response = 3;
  bool has_get_latest_firmware_by_product_id_response() const;
  void clear_get_latest_firmware_by_product_id_response();
  static const int kGetLatestFirmwareByProductIdResponseFieldNumber = 3;
  private:
  const ::logi::proto::GetLatestFirmwareByProductIdResponse& _internal_get_latest_firmware_by_product_id_response() const;
  public:
  const ::logi::proto::GetLatestFirmwareByProductIdResponse& get_latest_firmware_by_product_id_response() const;
  ::logi::proto::GetLatestFirmwareByProductIdResponse* release_get_latest_firmware_by_product_id_response();
  ::logi::proto::GetLatestFirmwareByProductIdResponse* mutable_get_latest_firmware_by_product_id_response();
  void set_allocated_get_latest_firmware_by_product_id_response(::logi::proto::GetLatestFirmwareByProductIdResponse* get_latest_firmware_by_product_id_response);

  // .logi.proto.UpdateFirmwareByProductIdResponse update_firmware_by_id_response = 4;
  bool has_update_firmware_by_id_response() const;
  void clear_update_firmware_by_id_response();
  static const int kUpdateFirmwareByIdResponseFieldNumber = 4;
  private:
  const ::logi::proto::UpdateFirmwareByProductIdResponse& _internal_update_firmware_by_id_response() const;
  public:
  const ::logi::proto::UpdateFirmwareByProductIdResponse& update_firmware_by_id_response() const;
  ::logi::proto::UpdateFirmwareByProductIdResponse* release_update_firmware_by_id_response();
  ::logi::proto::UpdateFirmwareByProductIdResponse* mutable_update_firmware_by_id_response();
  void set_allocated_update_firmware_by_id_response(::logi::proto::UpdateFirmwareByProductIdResponse* update_firmware_by_id_response);

  // .logi.proto.UpdateAllFirmwareResponse update_all_firmware_response = 5;
  bool has_update_all_firmware_response() const;
  void clear_update_all_firmware_response();
  static const int kUpdateAllFirmwareResponseFieldNumber = 5;
  private:
  const ::logi::proto::UpdateAllFirmwareResponse& _internal_update_all_firmware_response() const;
  public:
  const ::logi::proto::UpdateAllFirmwareResponse& update_all_firmware_response() const;
  ::logi::proto::UpdateAllFirmwareResponse* release_update_all_firmware_response();
  ::logi::proto::UpdateAllFirmwareResponse* mutable_update_all_firmware_response();
  void set_allocated_update_all_firmware_response(::logi::proto::UpdateAllFirmwareResponse* update_all_firmware_response);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.FirmwareResponse)
 private:
  void set_has_get_firmware_update_progress_response();
  void set_has_get_latest_firmware_by_product_id_response();
  void set_has_update_firmware_by_id_response();
  void set_has_update_all_firmware_response();

  inline bool has_response() const;
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ResponseUnion {
    ResponseUnion() {}
    ::logi::proto::GetFirmwareUpdateProgressResponse* get_firmware_update_progress_response_;
    ::logi::proto::GetLatestFirmwareByProductIdResponse* get_latest_firmware_by_product_id_response_;
    ::logi::proto::UpdateFirmwareByProductIdResponse* update_firmware_by_id_response_;
    ::logi::proto::UpdateAllFirmwareResponse* update_all_firmware_response_;
  } response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_firmware_5frequests_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFirmwareUpdateProgressRequest

// bool reserved = 1;
inline void GetFirmwareUpdateProgressRequest::clear_reserved() {
  reserved_ = false;
}
inline bool GetFirmwareUpdateProgressRequest::reserved() const {
  // @@protoc_insertion_point(field_get:logi.proto.GetFirmwareUpdateProgressRequest.reserved)
  return reserved_;
}
inline void GetFirmwareUpdateProgressRequest::set_reserved(bool value) {
  
  reserved_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.GetFirmwareUpdateProgressRequest.reserved)
}

// -------------------------------------------------------------------

// GetFirmwareUpdateProgressResponse

// repeated .logi.proto.Error errors = 1;
inline int GetFirmwareUpdateProgressResponse::errors_size() const {
  return errors_.size();
}
inline ::logi::proto::Error* GetFirmwareUpdateProgressResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.GetFirmwareUpdateProgressResponse.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
GetFirmwareUpdateProgressResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.GetFirmwareUpdateProgressResponse.errors)
  return &errors_;
}
inline const ::logi::proto::Error& GetFirmwareUpdateProgressResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.GetFirmwareUpdateProgressResponse.errors)
  return errors_.Get(index);
}
inline ::logi::proto::Error* GetFirmwareUpdateProgressResponse::add_errors() {
  // @@protoc_insertion_point(field_add:logi.proto.GetFirmwareUpdateProgressResponse.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
GetFirmwareUpdateProgressResponse::errors() const {
  // @@protoc_insertion_point(field_list:logi.proto.GetFirmwareUpdateProgressResponse.errors)
  return errors_;
}

// repeated .logi.proto.FirmwareUpdateProgress updates = 2;
inline int GetFirmwareUpdateProgressResponse::updates_size() const {
  return updates_.size();
}
inline ::logi::proto::FirmwareUpdateProgress* GetFirmwareUpdateProgressResponse::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.GetFirmwareUpdateProgressResponse.updates)
  return updates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >*
GetFirmwareUpdateProgressResponse::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.GetFirmwareUpdateProgressResponse.updates)
  return &updates_;
}
inline const ::logi::proto::FirmwareUpdateProgress& GetFirmwareUpdateProgressResponse::updates(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.GetFirmwareUpdateProgressResponse.updates)
  return updates_.Get(index);
}
inline ::logi::proto::FirmwareUpdateProgress* GetFirmwareUpdateProgressResponse::add_updates() {
  // @@protoc_insertion_point(field_add:logi.proto.GetFirmwareUpdateProgressResponse.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >&
GetFirmwareUpdateProgressResponse::updates() const {
  // @@protoc_insertion_point(field_list:logi.proto.GetFirmwareUpdateProgressResponse.updates)
  return updates_;
}

// -------------------------------------------------------------------

// GetLatestFirmwareByProductIdRequest

// string product_uuid = 1;
inline void GetLatestFirmwareByProductIdRequest::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLatestFirmwareByProductIdRequest::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void GetLatestFirmwareByProductIdRequest::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid)
}
#if LANG_CXX11
inline void GetLatestFirmwareByProductIdRequest::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid)
}
#endif
inline void GetLatestFirmwareByProductIdRequest::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid)
}
inline void GetLatestFirmwareByProductIdRequest::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid)
}
inline ::std::string* GetLatestFirmwareByProductIdRequest::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLatestFirmwareByProductIdRequest::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLatestFirmwareByProductIdRequest::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.GetLatestFirmwareByProductIdRequest.product_uuid)
}

// -------------------------------------------------------------------

// GetLatestFirmwareByProductIdResponse

// repeated .logi.proto.Error errors = 1;
inline int GetLatestFirmwareByProductIdResponse::errors_size() const {
  return errors_.size();
}
inline ::logi::proto::Error* GetLatestFirmwareByProductIdResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.GetLatestFirmwareByProductIdResponse.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
GetLatestFirmwareByProductIdResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.GetLatestFirmwareByProductIdResponse.errors)
  return &errors_;
}
inline const ::logi::proto::Error& GetLatestFirmwareByProductIdResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.GetLatestFirmwareByProductIdResponse.errors)
  return errors_.Get(index);
}
inline ::logi::proto::Error* GetLatestFirmwareByProductIdResponse::add_errors() {
  // @@protoc_insertion_point(field_add:logi.proto.GetLatestFirmwareByProductIdResponse.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
GetLatestFirmwareByProductIdResponse::errors() const {
  // @@protoc_insertion_point(field_list:logi.proto.GetLatestFirmwareByProductIdResponse.errors)
  return errors_;
}

// string product_uuid = 2;
inline void GetLatestFirmwareByProductIdResponse::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLatestFirmwareByProductIdResponse::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void GetLatestFirmwareByProductIdResponse::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid)
}
#if LANG_CXX11
inline void GetLatestFirmwareByProductIdResponse::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid)
}
#endif
inline void GetLatestFirmwareByProductIdResponse::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid)
}
inline void GetLatestFirmwareByProductIdResponse::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid)
}
inline ::std::string* GetLatestFirmwareByProductIdResponse::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLatestFirmwareByProductIdResponse::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLatestFirmwareByProductIdResponse::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.GetLatestFirmwareByProductIdResponse.product_uuid)
}

// string latest_firmware_package_version = 3;
inline void GetLatestFirmwareByProductIdResponse::clear_latest_firmware_package_version() {
  latest_firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLatestFirmwareByProductIdResponse::latest_firmware_package_version() const {
  // @@protoc_insertion_point(field_get:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version)
  return latest_firmware_package_version_.GetNoArena();
}
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_package_version(const ::std::string& value) {
  
  latest_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version)
}
#if LANG_CXX11
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_package_version(::std::string&& value) {
  
  latest_firmware_package_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version)
}
#endif
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_package_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  latest_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version)
}
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_package_version(const char* value, size_t size) {
  
  latest_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version)
}
inline ::std::string* GetLatestFirmwareByProductIdResponse::mutable_latest_firmware_package_version() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version)
  return latest_firmware_package_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLatestFirmwareByProductIdResponse::release_latest_firmware_package_version() {
  // @@protoc_insertion_point(field_release:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version)
  
  return latest_firmware_package_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLatestFirmwareByProductIdResponse::set_allocated_latest_firmware_package_version(::std::string* latest_firmware_package_version) {
  if (latest_firmware_package_version != NULL) {
    
  } else {
    
  }
  latest_firmware_package_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_firmware_package_version);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_package_version)
}

// uint32 latest_firmware_published_date = 4;
inline void GetLatestFirmwareByProductIdResponse::clear_latest_firmware_published_date() {
  latest_firmware_published_date_ = 0u;
}
inline ::google::protobuf::uint32 GetLatestFirmwareByProductIdResponse::latest_firmware_published_date() const {
  // @@protoc_insertion_point(field_get:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_published_date)
  return latest_firmware_published_date_;
}
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_published_date(::google::protobuf::uint32 value) {
  
  latest_firmware_published_date_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_published_date)
}

// string latest_firmware_release_notes_uri = 5;
inline void GetLatestFirmwareByProductIdResponse::clear_latest_firmware_release_notes_uri() {
  latest_firmware_release_notes_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetLatestFirmwareByProductIdResponse::latest_firmware_release_notes_uri() const {
  // @@protoc_insertion_point(field_get:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri)
  return latest_firmware_release_notes_uri_.GetNoArena();
}
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_release_notes_uri(const ::std::string& value) {
  
  latest_firmware_release_notes_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri)
}
#if LANG_CXX11
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_release_notes_uri(::std::string&& value) {
  
  latest_firmware_release_notes_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri)
}
#endif
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_release_notes_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  latest_firmware_release_notes_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri)
}
inline void GetLatestFirmwareByProductIdResponse::set_latest_firmware_release_notes_uri(const char* value, size_t size) {
  
  latest_firmware_release_notes_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri)
}
inline ::std::string* GetLatestFirmwareByProductIdResponse::mutable_latest_firmware_release_notes_uri() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri)
  return latest_firmware_release_notes_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLatestFirmwareByProductIdResponse::release_latest_firmware_release_notes_uri() {
  // @@protoc_insertion_point(field_release:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri)
  
  return latest_firmware_release_notes_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLatestFirmwareByProductIdResponse::set_allocated_latest_firmware_release_notes_uri(::std::string* latest_firmware_release_notes_uri) {
  if (latest_firmware_release_notes_uri != NULL) {
    
  } else {
    
  }
  latest_firmware_release_notes_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_firmware_release_notes_uri);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.GetLatestFirmwareByProductIdResponse.latest_firmware_release_notes_uri)
}

// repeated .logi.proto.LatestDeviceFirmwareInfo latest_device_firmware_versions = 6;
inline int GetLatestFirmwareByProductIdResponse::latest_device_firmware_versions_size() const {
  return latest_device_firmware_versions_.size();
}
inline ::logi::proto::LatestDeviceFirmwareInfo* GetLatestFirmwareByProductIdResponse::mutable_latest_device_firmware_versions(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.GetLatestFirmwareByProductIdResponse.latest_device_firmware_versions)
  return latest_device_firmware_versions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::LatestDeviceFirmwareInfo >*
GetLatestFirmwareByProductIdResponse::mutable_latest_device_firmware_versions() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.GetLatestFirmwareByProductIdResponse.latest_device_firmware_versions)
  return &latest_device_firmware_versions_;
}
inline const ::logi::proto::LatestDeviceFirmwareInfo& GetLatestFirmwareByProductIdResponse::latest_device_firmware_versions(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.GetLatestFirmwareByProductIdResponse.latest_device_firmware_versions)
  return latest_device_firmware_versions_.Get(index);
}
inline ::logi::proto::LatestDeviceFirmwareInfo* GetLatestFirmwareByProductIdResponse::add_latest_device_firmware_versions() {
  // @@protoc_insertion_point(field_add:logi.proto.GetLatestFirmwareByProductIdResponse.latest_device_firmware_versions)
  return latest_device_firmware_versions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::LatestDeviceFirmwareInfo >&
GetLatestFirmwareByProductIdResponse::latest_device_firmware_versions() const {
  // @@protoc_insertion_point(field_list:logi.proto.GetLatestFirmwareByProductIdResponse.latest_device_firmware_versions)
  return latest_device_firmware_versions_;
}

// -------------------------------------------------------------------

// UpdateAllFirmwareRequest

// bool reserved = 1;
inline void UpdateAllFirmwareRequest::clear_reserved() {
  reserved_ = false;
}
inline bool UpdateAllFirmwareRequest::reserved() const {
  // @@protoc_insertion_point(field_get:logi.proto.UpdateAllFirmwareRequest.reserved)
  return reserved_;
}
inline void UpdateAllFirmwareRequest::set_reserved(bool value) {
  
  reserved_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.UpdateAllFirmwareRequest.reserved)
}

// -------------------------------------------------------------------

// UpdateAllFirmwareResponse

// repeated .logi.proto.Error errors = 1;
inline int UpdateAllFirmwareResponse::errors_size() const {
  return errors_.size();
}
inline ::logi::proto::Error* UpdateAllFirmwareResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.UpdateAllFirmwareResponse.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
UpdateAllFirmwareResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.UpdateAllFirmwareResponse.errors)
  return &errors_;
}
inline const ::logi::proto::Error& UpdateAllFirmwareResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.UpdateAllFirmwareResponse.errors)
  return errors_.Get(index);
}
inline ::logi::proto::Error* UpdateAllFirmwareResponse::add_errors() {
  // @@protoc_insertion_point(field_add:logi.proto.UpdateAllFirmwareResponse.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
UpdateAllFirmwareResponse::errors() const {
  // @@protoc_insertion_point(field_list:logi.proto.UpdateAllFirmwareResponse.errors)
  return errors_;
}

// repeated .logi.proto.FirmwareUpdateProgress updates = 2;
inline int UpdateAllFirmwareResponse::updates_size() const {
  return updates_.size();
}
inline ::logi::proto::FirmwareUpdateProgress* UpdateAllFirmwareResponse::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.UpdateAllFirmwareResponse.updates)
  return updates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >*
UpdateAllFirmwareResponse::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.UpdateAllFirmwareResponse.updates)
  return &updates_;
}
inline const ::logi::proto::FirmwareUpdateProgress& UpdateAllFirmwareResponse::updates(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.UpdateAllFirmwareResponse.updates)
  return updates_.Get(index);
}
inline ::logi::proto::FirmwareUpdateProgress* UpdateAllFirmwareResponse::add_updates() {
  // @@protoc_insertion_point(field_add:logi.proto.UpdateAllFirmwareResponse.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::FirmwareUpdateProgress >&
UpdateAllFirmwareResponse::updates() const {
  // @@protoc_insertion_point(field_list:logi.proto.UpdateAllFirmwareResponse.updates)
  return updates_;
}

// -------------------------------------------------------------------

// UpdateFirmwareByProductIdRequest

// string product_uuid = 1;
inline void UpdateFirmwareByProductIdRequest::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFirmwareByProductIdRequest::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.UpdateFirmwareByProductIdRequest.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void UpdateFirmwareByProductIdRequest::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.UpdateFirmwareByProductIdRequest.product_uuid)
}
#if LANG_CXX11
inline void UpdateFirmwareByProductIdRequest::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.UpdateFirmwareByProductIdRequest.product_uuid)
}
#endif
inline void UpdateFirmwareByProductIdRequest::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.UpdateFirmwareByProductIdRequest.product_uuid)
}
inline void UpdateFirmwareByProductIdRequest::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.UpdateFirmwareByProductIdRequest.product_uuid)
}
inline ::std::string* UpdateFirmwareByProductIdRequest::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.UpdateFirmwareByProductIdRequest.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFirmwareByProductIdRequest::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.UpdateFirmwareByProductIdRequest.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFirmwareByProductIdRequest::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.UpdateFirmwareByProductIdRequest.product_uuid)
}

// string firmware_package_version = 2;
inline void UpdateFirmwareByProductIdRequest::clear_firmware_package_version() {
  firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFirmwareByProductIdRequest::firmware_package_version() const {
  // @@protoc_insertion_point(field_get:logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version)
  return firmware_package_version_.GetNoArena();
}
inline void UpdateFirmwareByProductIdRequest::set_firmware_package_version(const ::std::string& value) {
  
  firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version)
}
#if LANG_CXX11
inline void UpdateFirmwareByProductIdRequest::set_firmware_package_version(::std::string&& value) {
  
  firmware_package_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version)
}
#endif
inline void UpdateFirmwareByProductIdRequest::set_firmware_package_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version)
}
inline void UpdateFirmwareByProductIdRequest::set_firmware_package_version(const char* value, size_t size) {
  
  firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version)
}
inline ::std::string* UpdateFirmwareByProductIdRequest::mutable_firmware_package_version() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version)
  return firmware_package_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFirmwareByProductIdRequest::release_firmware_package_version() {
  // @@protoc_insertion_point(field_release:logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version)
  
  return firmware_package_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFirmwareByProductIdRequest::set_allocated_firmware_package_version(::std::string* firmware_package_version) {
  if (firmware_package_version != NULL) {
    
  } else {
    
  }
  firmware_package_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_package_version);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.UpdateFirmwareByProductIdRequest.firmware_package_version)
}

// -------------------------------------------------------------------

// UpdateFirmwareByProductIdResponse

// repeated .logi.proto.Error errors = 1;
inline int UpdateFirmwareByProductIdResponse::errors_size() const {
  return errors_.size();
}
inline ::logi::proto::Error* UpdateFirmwareByProductIdResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.UpdateFirmwareByProductIdResponse.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
UpdateFirmwareByProductIdResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.UpdateFirmwareByProductIdResponse.errors)
  return &errors_;
}
inline const ::logi::proto::Error& UpdateFirmwareByProductIdResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.UpdateFirmwareByProductIdResponse.errors)
  return errors_.Get(index);
}
inline ::logi::proto::Error* UpdateFirmwareByProductIdResponse::add_errors() {
  // @@protoc_insertion_point(field_add:logi.proto.UpdateFirmwareByProductIdResponse.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
UpdateFirmwareByProductIdResponse::errors() const {
  // @@protoc_insertion_point(field_list:logi.proto.UpdateFirmwareByProductIdResponse.errors)
  return errors_;
}

// .logi.proto.FirmwareUpdateProgress update = 2;
inline bool UpdateFirmwareByProductIdResponse::has_update() const {
  return this != internal_default_instance() && update_ != NULL;
}
inline const ::logi::proto::FirmwareUpdateProgress& UpdateFirmwareByProductIdResponse::_internal_update() const {
  return *update_;
}
inline const ::logi::proto::FirmwareUpdateProgress& UpdateFirmwareByProductIdResponse::update() const {
  const ::logi::proto::FirmwareUpdateProgress* p = update_;
  // @@protoc_insertion_point(field_get:logi.proto.UpdateFirmwareByProductIdResponse.update)
  return p != NULL ? *p : *reinterpret_cast<const ::logi::proto::FirmwareUpdateProgress*>(
      &::logi::proto::_FirmwareUpdateProgress_default_instance_);
}
inline ::logi::proto::FirmwareUpdateProgress* UpdateFirmwareByProductIdResponse::release_update() {
  // @@protoc_insertion_point(field_release:logi.proto.UpdateFirmwareByProductIdResponse.update)
  
  ::logi::proto::FirmwareUpdateProgress* temp = update_;
  update_ = NULL;
  return temp;
}
inline ::logi::proto::FirmwareUpdateProgress* UpdateFirmwareByProductIdResponse::mutable_update() {
  
  if (update_ == NULL) {
    auto* p = CreateMaybeMessage<::logi::proto::FirmwareUpdateProgress>(GetArenaNoVirtual());
    update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.UpdateFirmwareByProductIdResponse.update)
  return update_;
}
inline void UpdateFirmwareByProductIdResponse::set_allocated_update(::logi::proto::FirmwareUpdateProgress* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_);
  }
  if (update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:logi.proto.UpdateFirmwareByProductIdResponse.update)
}

// -------------------------------------------------------------------

// FirmwareRequest

// .logi.proto.GetFirmwareUpdateProgressRequest get_firmware_update_progress_request = 1;
inline bool FirmwareRequest::has_get_firmware_update_progress_request() const {
  return request_case() == kGetFirmwareUpdateProgressRequest;
}
inline void FirmwareRequest::set_has_get_firmware_update_progress_request() {
  _oneof_case_[0] = kGetFirmwareUpdateProgressRequest;
}
inline void FirmwareRequest::clear_get_firmware_update_progress_request() {
  if (has_get_firmware_update_progress_request()) {
    delete request_.get_firmware_update_progress_request_;
    clear_has_request();
  }
}
inline const ::logi::proto::GetFirmwareUpdateProgressRequest& FirmwareRequest::_internal_get_firmware_update_progress_request() const {
  return *request_.get_firmware_update_progress_request_;
}
inline ::logi::proto::GetFirmwareUpdateProgressRequest* FirmwareRequest::release_get_firmware_update_progress_request() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareRequest.get_firmware_update_progress_request)
  if (has_get_firmware_update_progress_request()) {
    clear_has_request();
      ::logi::proto::GetFirmwareUpdateProgressRequest* temp = request_.get_firmware_update_progress_request_;
    request_.get_firmware_update_progress_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::GetFirmwareUpdateProgressRequest& FirmwareRequest::get_firmware_update_progress_request() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareRequest.get_firmware_update_progress_request)
  return has_get_firmware_update_progress_request()
      ? *request_.get_firmware_update_progress_request_
      : *reinterpret_cast< ::logi::proto::GetFirmwareUpdateProgressRequest*>(&::logi::proto::_GetFirmwareUpdateProgressRequest_default_instance_);
}
inline ::logi::proto::GetFirmwareUpdateProgressRequest* FirmwareRequest::mutable_get_firmware_update_progress_request() {
  if (!has_get_firmware_update_progress_request()) {
    clear_request();
    set_has_get_firmware_update_progress_request();
    request_.get_firmware_update_progress_request_ = CreateMaybeMessage< ::logi::proto::GetFirmwareUpdateProgressRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareRequest.get_firmware_update_progress_request)
  return request_.get_firmware_update_progress_request_;
}

// .logi.proto.GetLatestFirmwareByProductIdRequest get_latest_firmware_by_product_id_request = 2;
inline bool FirmwareRequest::has_get_latest_firmware_by_product_id_request() const {
  return request_case() == kGetLatestFirmwareByProductIdRequest;
}
inline void FirmwareRequest::set_has_get_latest_firmware_by_product_id_request() {
  _oneof_case_[0] = kGetLatestFirmwareByProductIdRequest;
}
inline void FirmwareRequest::clear_get_latest_firmware_by_product_id_request() {
  if (has_get_latest_firmware_by_product_id_request()) {
    delete request_.get_latest_firmware_by_product_id_request_;
    clear_has_request();
  }
}
inline const ::logi::proto::GetLatestFirmwareByProductIdRequest& FirmwareRequest::_internal_get_latest_firmware_by_product_id_request() const {
  return *request_.get_latest_firmware_by_product_id_request_;
}
inline ::logi::proto::GetLatestFirmwareByProductIdRequest* FirmwareRequest::release_get_latest_firmware_by_product_id_request() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareRequest.get_latest_firmware_by_product_id_request)
  if (has_get_latest_firmware_by_product_id_request()) {
    clear_has_request();
      ::logi::proto::GetLatestFirmwareByProductIdRequest* temp = request_.get_latest_firmware_by_product_id_request_;
    request_.get_latest_firmware_by_product_id_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::GetLatestFirmwareByProductIdRequest& FirmwareRequest::get_latest_firmware_by_product_id_request() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareRequest.get_latest_firmware_by_product_id_request)
  return has_get_latest_firmware_by_product_id_request()
      ? *request_.get_latest_firmware_by_product_id_request_
      : *reinterpret_cast< ::logi::proto::GetLatestFirmwareByProductIdRequest*>(&::logi::proto::_GetLatestFirmwareByProductIdRequest_default_instance_);
}
inline ::logi::proto::GetLatestFirmwareByProductIdRequest* FirmwareRequest::mutable_get_latest_firmware_by_product_id_request() {
  if (!has_get_latest_firmware_by_product_id_request()) {
    clear_request();
    set_has_get_latest_firmware_by_product_id_request();
    request_.get_latest_firmware_by_product_id_request_ = CreateMaybeMessage< ::logi::proto::GetLatestFirmwareByProductIdRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareRequest.get_latest_firmware_by_product_id_request)
  return request_.get_latest_firmware_by_product_id_request_;
}

// .logi.proto.UpdateFirmwareByProductIdRequest update_firmware_by_id_request = 3;
inline bool FirmwareRequest::has_update_firmware_by_id_request() const {
  return request_case() == kUpdateFirmwareByIdRequest;
}
inline void FirmwareRequest::set_has_update_firmware_by_id_request() {
  _oneof_case_[0] = kUpdateFirmwareByIdRequest;
}
inline void FirmwareRequest::clear_update_firmware_by_id_request() {
  if (has_update_firmware_by_id_request()) {
    delete request_.update_firmware_by_id_request_;
    clear_has_request();
  }
}
inline const ::logi::proto::UpdateFirmwareByProductIdRequest& FirmwareRequest::_internal_update_firmware_by_id_request() const {
  return *request_.update_firmware_by_id_request_;
}
inline ::logi::proto::UpdateFirmwareByProductIdRequest* FirmwareRequest::release_update_firmware_by_id_request() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareRequest.update_firmware_by_id_request)
  if (has_update_firmware_by_id_request()) {
    clear_has_request();
      ::logi::proto::UpdateFirmwareByProductIdRequest* temp = request_.update_firmware_by_id_request_;
    request_.update_firmware_by_id_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::UpdateFirmwareByProductIdRequest& FirmwareRequest::update_firmware_by_id_request() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareRequest.update_firmware_by_id_request)
  return has_update_firmware_by_id_request()
      ? *request_.update_firmware_by_id_request_
      : *reinterpret_cast< ::logi::proto::UpdateFirmwareByProductIdRequest*>(&::logi::proto::_UpdateFirmwareByProductIdRequest_default_instance_);
}
inline ::logi::proto::UpdateFirmwareByProductIdRequest* FirmwareRequest::mutable_update_firmware_by_id_request() {
  if (!has_update_firmware_by_id_request()) {
    clear_request();
    set_has_update_firmware_by_id_request();
    request_.update_firmware_by_id_request_ = CreateMaybeMessage< ::logi::proto::UpdateFirmwareByProductIdRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareRequest.update_firmware_by_id_request)
  return request_.update_firmware_by_id_request_;
}

// .logi.proto.UpdateAllFirmwareRequest update_all_firmware_request = 4;
inline bool FirmwareRequest::has_update_all_firmware_request() const {
  return request_case() == kUpdateAllFirmwareRequest;
}
inline void FirmwareRequest::set_has_update_all_firmware_request() {
  _oneof_case_[0] = kUpdateAllFirmwareRequest;
}
inline void FirmwareRequest::clear_update_all_firmware_request() {
  if (has_update_all_firmware_request()) {
    delete request_.update_all_firmware_request_;
    clear_has_request();
  }
}
inline const ::logi::proto::UpdateAllFirmwareRequest& FirmwareRequest::_internal_update_all_firmware_request() const {
  return *request_.update_all_firmware_request_;
}
inline ::logi::proto::UpdateAllFirmwareRequest* FirmwareRequest::release_update_all_firmware_request() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareRequest.update_all_firmware_request)
  if (has_update_all_firmware_request()) {
    clear_has_request();
      ::logi::proto::UpdateAllFirmwareRequest* temp = request_.update_all_firmware_request_;
    request_.update_all_firmware_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::UpdateAllFirmwareRequest& FirmwareRequest::update_all_firmware_request() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareRequest.update_all_firmware_request)
  return has_update_all_firmware_request()
      ? *request_.update_all_firmware_request_
      : *reinterpret_cast< ::logi::proto::UpdateAllFirmwareRequest*>(&::logi::proto::_UpdateAllFirmwareRequest_default_instance_);
}
inline ::logi::proto::UpdateAllFirmwareRequest* FirmwareRequest::mutable_update_all_firmware_request() {
  if (!has_update_all_firmware_request()) {
    clear_request();
    set_has_update_all_firmware_request();
    request_.update_all_firmware_request_ = CreateMaybeMessage< ::logi::proto::UpdateAllFirmwareRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareRequest.update_all_firmware_request)
  return request_.update_all_firmware_request_;
}

inline bool FirmwareRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void FirmwareRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline FirmwareRequest::RequestCase FirmwareRequest::request_case() const {
  return FirmwareRequest::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirmwareResponse

// .logi.proto.GetFirmwareUpdateProgressResponse get_firmware_update_progress_response = 2;
inline bool FirmwareResponse::has_get_firmware_update_progress_response() const {
  return response_case() == kGetFirmwareUpdateProgressResponse;
}
inline void FirmwareResponse::set_has_get_firmware_update_progress_response() {
  _oneof_case_[0] = kGetFirmwareUpdateProgressResponse;
}
inline void FirmwareResponse::clear_get_firmware_update_progress_response() {
  if (has_get_firmware_update_progress_response()) {
    delete response_.get_firmware_update_progress_response_;
    clear_has_response();
  }
}
inline const ::logi::proto::GetFirmwareUpdateProgressResponse& FirmwareResponse::_internal_get_firmware_update_progress_response() const {
  return *response_.get_firmware_update_progress_response_;
}
inline ::logi::proto::GetFirmwareUpdateProgressResponse* FirmwareResponse::release_get_firmware_update_progress_response() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareResponse.get_firmware_update_progress_response)
  if (has_get_firmware_update_progress_response()) {
    clear_has_response();
      ::logi::proto::GetFirmwareUpdateProgressResponse* temp = response_.get_firmware_update_progress_response_;
    response_.get_firmware_update_progress_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::GetFirmwareUpdateProgressResponse& FirmwareResponse::get_firmware_update_progress_response() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareResponse.get_firmware_update_progress_response)
  return has_get_firmware_update_progress_response()
      ? *response_.get_firmware_update_progress_response_
      : *reinterpret_cast< ::logi::proto::GetFirmwareUpdateProgressResponse*>(&::logi::proto::_GetFirmwareUpdateProgressResponse_default_instance_);
}
inline ::logi::proto::GetFirmwareUpdateProgressResponse* FirmwareResponse::mutable_get_firmware_update_progress_response() {
  if (!has_get_firmware_update_progress_response()) {
    clear_response();
    set_has_get_firmware_update_progress_response();
    response_.get_firmware_update_progress_response_ = CreateMaybeMessage< ::logi::proto::GetFirmwareUpdateProgressResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareResponse.get_firmware_update_progress_response)
  return response_.get_firmware_update_progress_response_;
}

// .logi.proto.GetLatestFirmwareByProductIdResponse get_latest_firmware_by_product_id_response = 3;
inline bool FirmwareResponse::has_get_latest_firmware_by_product_id_response() const {
  return response_case() == kGetLatestFirmwareByProductIdResponse;
}
inline void FirmwareResponse::set_has_get_latest_firmware_by_product_id_response() {
  _oneof_case_[0] = kGetLatestFirmwareByProductIdResponse;
}
inline void FirmwareResponse::clear_get_latest_firmware_by_product_id_response() {
  if (has_get_latest_firmware_by_product_id_response()) {
    delete response_.get_latest_firmware_by_product_id_response_;
    clear_has_response();
  }
}
inline const ::logi::proto::GetLatestFirmwareByProductIdResponse& FirmwareResponse::_internal_get_latest_firmware_by_product_id_response() const {
  return *response_.get_latest_firmware_by_product_id_response_;
}
inline ::logi::proto::GetLatestFirmwareByProductIdResponse* FirmwareResponse::release_get_latest_firmware_by_product_id_response() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareResponse.get_latest_firmware_by_product_id_response)
  if (has_get_latest_firmware_by_product_id_response()) {
    clear_has_response();
      ::logi::proto::GetLatestFirmwareByProductIdResponse* temp = response_.get_latest_firmware_by_product_id_response_;
    response_.get_latest_firmware_by_product_id_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::GetLatestFirmwareByProductIdResponse& FirmwareResponse::get_latest_firmware_by_product_id_response() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareResponse.get_latest_firmware_by_product_id_response)
  return has_get_latest_firmware_by_product_id_response()
      ? *response_.get_latest_firmware_by_product_id_response_
      : *reinterpret_cast< ::logi::proto::GetLatestFirmwareByProductIdResponse*>(&::logi::proto::_GetLatestFirmwareByProductIdResponse_default_instance_);
}
inline ::logi::proto::GetLatestFirmwareByProductIdResponse* FirmwareResponse::mutable_get_latest_firmware_by_product_id_response() {
  if (!has_get_latest_firmware_by_product_id_response()) {
    clear_response();
    set_has_get_latest_firmware_by_product_id_response();
    response_.get_latest_firmware_by_product_id_response_ = CreateMaybeMessage< ::logi::proto::GetLatestFirmwareByProductIdResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareResponse.get_latest_firmware_by_product_id_response)
  return response_.get_latest_firmware_by_product_id_response_;
}

// .logi.proto.UpdateFirmwareByProductIdResponse update_firmware_by_id_response = 4;
inline bool FirmwareResponse::has_update_firmware_by_id_response() const {
  return response_case() == kUpdateFirmwareByIdResponse;
}
inline void FirmwareResponse::set_has_update_firmware_by_id_response() {
  _oneof_case_[0] = kUpdateFirmwareByIdResponse;
}
inline void FirmwareResponse::clear_update_firmware_by_id_response() {
  if (has_update_firmware_by_id_response()) {
    delete response_.update_firmware_by_id_response_;
    clear_has_response();
  }
}
inline const ::logi::proto::UpdateFirmwareByProductIdResponse& FirmwareResponse::_internal_update_firmware_by_id_response() const {
  return *response_.update_firmware_by_id_response_;
}
inline ::logi::proto::UpdateFirmwareByProductIdResponse* FirmwareResponse::release_update_firmware_by_id_response() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareResponse.update_firmware_by_id_response)
  if (has_update_firmware_by_id_response()) {
    clear_has_response();
      ::logi::proto::UpdateFirmwareByProductIdResponse* temp = response_.update_firmware_by_id_response_;
    response_.update_firmware_by_id_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::UpdateFirmwareByProductIdResponse& FirmwareResponse::update_firmware_by_id_response() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareResponse.update_firmware_by_id_response)
  return has_update_firmware_by_id_response()
      ? *response_.update_firmware_by_id_response_
      : *reinterpret_cast< ::logi::proto::UpdateFirmwareByProductIdResponse*>(&::logi::proto::_UpdateFirmwareByProductIdResponse_default_instance_);
}
inline ::logi::proto::UpdateFirmwareByProductIdResponse* FirmwareResponse::mutable_update_firmware_by_id_response() {
  if (!has_update_firmware_by_id_response()) {
    clear_response();
    set_has_update_firmware_by_id_response();
    response_.update_firmware_by_id_response_ = CreateMaybeMessage< ::logi::proto::UpdateFirmwareByProductIdResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareResponse.update_firmware_by_id_response)
  return response_.update_firmware_by_id_response_;
}

// .logi.proto.UpdateAllFirmwareResponse update_all_firmware_response = 5;
inline bool FirmwareResponse::has_update_all_firmware_response() const {
  return response_case() == kUpdateAllFirmwareResponse;
}
inline void FirmwareResponse::set_has_update_all_firmware_response() {
  _oneof_case_[0] = kUpdateAllFirmwareResponse;
}
inline void FirmwareResponse::clear_update_all_firmware_response() {
  if (has_update_all_firmware_response()) {
    delete response_.update_all_firmware_response_;
    clear_has_response();
  }
}
inline const ::logi::proto::UpdateAllFirmwareResponse& FirmwareResponse::_internal_update_all_firmware_response() const {
  return *response_.update_all_firmware_response_;
}
inline ::logi::proto::UpdateAllFirmwareResponse* FirmwareResponse::release_update_all_firmware_response() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareResponse.update_all_firmware_response)
  if (has_update_all_firmware_response()) {
    clear_has_response();
      ::logi::proto::UpdateAllFirmwareResponse* temp = response_.update_all_firmware_response_;
    response_.update_all_firmware_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::UpdateAllFirmwareResponse& FirmwareResponse::update_all_firmware_response() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareResponse.update_all_firmware_response)
  return has_update_all_firmware_response()
      ? *response_.update_all_firmware_response_
      : *reinterpret_cast< ::logi::proto::UpdateAllFirmwareResponse*>(&::logi::proto::_UpdateAllFirmwareResponse_default_instance_);
}
inline ::logi::proto::UpdateAllFirmwareResponse* FirmwareResponse::mutable_update_all_firmware_response() {
  if (!has_update_all_firmware_response()) {
    clear_response();
    set_has_update_all_firmware_response();
    response_.update_all_firmware_response_ = CreateMaybeMessage< ::logi::proto::UpdateAllFirmwareResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareResponse.update_all_firmware_response)
  return response_.update_all_firmware_response_;
}

inline bool FirmwareResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void FirmwareResponse::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline FirmwareResponse::ResponseCase FirmwareResponse::response_case() const {
  return FirmwareResponse::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_firmware_5frequests_2eproto
