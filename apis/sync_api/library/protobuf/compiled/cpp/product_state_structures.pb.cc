// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: product_state_structures.proto

#include "product_state_structures.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_product_5fstate_5fstructures_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_product_5fstate_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceEdge;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_product_5fstate_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_product_5fstate_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Device_PropertiesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_product_5fstate_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Device;
}  // namespace protobuf_product_5fstate_5fstructures_2eproto
namespace logi {
namespace proto {
class ProductDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Product>
      _instance;
} _Product_default_instance_;
class Device_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Device_PropertiesEntry_DoNotUse>
      _instance;
} _Device_PropertiesEntry_DoNotUse_default_instance_;
class DeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Device>
      _instance;
} _Device_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo>
      _instance;
} _DeviceInfo_default_instance_;
class DeviceEdgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceEdge>
      _instance;
} _DeviceEdge_default_instance_;
}  // namespace proto
}  // namespace logi
namespace protobuf_product_5fstate_5fstructures_2eproto {
static void InitDefaultsProduct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_Product_default_instance_;
    new (ptr) ::logi::proto::Product();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::Product::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Product =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProduct}, {
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_Device.base,
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_DeviceEdge.base,}};

static void InitDefaultsDevice_PropertiesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_Device_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::logi::proto::Device_PropertiesEntry_DoNotUse();
  }
  ::logi::proto::Device_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Device_PropertiesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDevice_PropertiesEntry_DoNotUse}, {}};

static void InitDefaultsDevice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_Device_default_instance_;
    new (ptr) ::logi::proto::Device();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::Device::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Device =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDevice}, {
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_Device_PropertiesEntry_DoNotUse.base,
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_DeviceInfo.base,}};

static void InitDefaultsDeviceInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_DeviceInfo_default_instance_;
    new (ptr) ::logi::proto::DeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::DeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfo}, {}};

static void InitDefaultsDeviceEdge() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_DeviceEdge_default_instance_;
    new (ptr) ::logi::proto::DeviceEdge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::DeviceEdge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceEdge =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceEdge}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Product.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Device_PropertiesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Device.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceEdge.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, firmware_package_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, last_firmware_update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, devices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, device_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, connection_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Product, update_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device_PropertiesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device_PropertiesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, form_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, is_connected_to_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, information_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, update_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::Device, connection_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::DeviceInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::DeviceInfo, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::DeviceInfo, firmware_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::DeviceEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::DeviceEdge, parent_device_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::DeviceEdge, child_device_uuid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logi::proto::Product)},
  { 15, 22, sizeof(::logi::proto::Device_PropertiesEntry_DoNotUse)},
  { 24, -1, sizeof(::logi::proto::Device)},
  { 38, -1, sizeof(::logi::proto::DeviceInfo)},
  { 46, -1, sizeof(::logi::proto::DeviceEdge)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_Product_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_Device_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_Device_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_DeviceEdge_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "product_state_structures.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036product_state_structures.proto\022\nlogi.p"
      "roto\032\014common.proto\"\261\003\n\007Product\022\014\n\004uuid\030\001"
      " \001(\t\022(\n\005model\030\002 \001(\0162\031.logi.proto.Product"
      ".Model\022\014\n\004name\030\003 \001(\t\022 \n\030firmware_package"
      "_version\030\004 \001(\t\022!\n\031last_firmware_update_t"
      "ime\030\005 \001(\r\022#\n\007devices\030\006 \003(\0132\022.logi.proto."
      "Device\0222\n\022device_connections\030\007 \003(\0132\026.log"
      "i.proto.DeviceEdge\022\025\n\rserial_number\030\010 \001("
      "\t\0229\n\020connection_state\030\t \001(\0162\037.logi.proto"
      ".SyncConnectionState\0221\n\014update_state\030\n \001"
      "(\0162\033.logi.proto.SyncUpdateState\"=\n\005Model"
      "\022\013\n\007UNKNOWN\020\000\022\n\n\006MEETUP\020\001\022\t\n\005RALLY\020\024\022\020\n\014"
      "RALLY_CAMERA\020\025\"\215\005\n\006Device\022\014\n\004uuid\030\001 \001(\t\022"
      "\014\n\004name\030\002 \001(\t\0222\n\013form_factor\030\003 \001(\0162\035.log"
      "i.proto.Device.FormFactor\022\034\n\024is_connecte"
      "d_to_host\030\004 \001(\010\0226\n\nproperties\030\005 \003(\0132\".lo"
      "gi.proto.Device.PropertiesEntry\022+\n\013infor"
      "mation\030\006 \003(\0132\026.logi.proto.DeviceInfo\022\025\n\r"
      "serial_number\030\007 \001(\t\0221\n\014update_state\030\010 \001("
      "\0162\033.logi.proto.SyncUpdateState\0229\n\020connec"
      "tion_state\030\t \001(\0162\037.logi.proto.SyncConnec"
      "tionState\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001("
      "\r\022\r\n\005value\030\002 \001(\t:\0028\001\"\233\001\n\nFormFactor\022\013\n\007U"
      "NKNOWN\020\000\022\n\n\006MEETUP\020\001\022\023\n\017RALLY_TABLE_HUB\020"
      "\024\022\020\n\014RALLY_TV_HUB\020\025\022\020\n\014RALLY_CAMERA\020\026\022\021\n"
      "\rRALLY_MIC_POD\020\027\022\025\n\021RALLY_MIC_POD_HUB\020\030\022"
      "\021\n\rRALLY_SPEAKER\020\031\"Z\n\010Property\022\014\n\010RESERV"
      "ED\020\000\022\021\n\rAUDIO_CHANNEL\020\001\022\023\n\017BLE_MAC_ADDRE"
      "SS\020\002\022\030\n\024ETHERNET_MAC_ADDRESS\020\003\"\343\001\n\nDevic"
      "eInfo\022)\n\004type\030\001 \001(\0162\033.logi.proto.DeviceI"
      "nfo.Type\022\013\n\003pid\030\002 \001(\r\022\030\n\020firmware_versio"
      "n\030\003 \001(\t\"\202\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\t\n\005OTHER\020\001"
      "\022\010\n\004SELF\020\002\022\n\n\006EEPROM\020\003\022\t\n\005VIDEO\020\004\022\t\n\005AUD"
      "IO\020\005\022\017\n\013AUDIO_CODEC\020\006\022\r\n\tVIDEO_BLE\020\007\022\r\n\t"
      "AUDIO_BLE\020\010\022\007\n\003MCU\020\t\"C\n\nDeviceEdge\022\032\n\022pa"
      "rent_device_uuid\030\001 \001(\t\022\031\n\021child_device_u"
      "uid\030\002 \001(\tB%\n#com.logitech.vc.sync.proto."
      "messagesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "product_state_structures.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_product_5fstate_5fstructures_2eproto
namespace logi {
namespace proto {
const ::google::protobuf::EnumDescriptor* Product_Model_descriptor() {
  protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_product_5fstate_5fstructures_2eproto::file_level_enum_descriptors[0];
}
bool Product_Model_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Product_Model Product::UNKNOWN;
const Product_Model Product::MEETUP;
const Product_Model Product::RALLY;
const Product_Model Product::RALLY_CAMERA;
const Product_Model Product::Model_MIN;
const Product_Model Product::Model_MAX;
const int Product::Model_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Device_FormFactor_descriptor() {
  protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_product_5fstate_5fstructures_2eproto::file_level_enum_descriptors[1];
}
bool Device_FormFactor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Device_FormFactor Device::UNKNOWN;
const Device_FormFactor Device::MEETUP;
const Device_FormFactor Device::RALLY_TABLE_HUB;
const Device_FormFactor Device::RALLY_TV_HUB;
const Device_FormFactor Device::RALLY_CAMERA;
const Device_FormFactor Device::RALLY_MIC_POD;
const Device_FormFactor Device::RALLY_MIC_POD_HUB;
const Device_FormFactor Device::RALLY_SPEAKER;
const Device_FormFactor Device::FormFactor_MIN;
const Device_FormFactor Device::FormFactor_MAX;
const int Device::FormFactor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Device_Property_descriptor() {
  protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_product_5fstate_5fstructures_2eproto::file_level_enum_descriptors[2];
}
bool Device_Property_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Device_Property Device::RESERVED;
const Device_Property Device::AUDIO_CHANNEL;
const Device_Property Device::BLE_MAC_ADDRESS;
const Device_Property Device::ETHERNET_MAC_ADDRESS;
const Device_Property Device::Property_MIN;
const Device_Property Device::Property_MAX;
const int Device::Property_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DeviceInfo_Type_descriptor() {
  protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_product_5fstate_5fstructures_2eproto::file_level_enum_descriptors[3];
}
bool DeviceInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceInfo_Type DeviceInfo::UNKNOWN;
const DeviceInfo_Type DeviceInfo::OTHER;
const DeviceInfo_Type DeviceInfo::SELF;
const DeviceInfo_Type DeviceInfo::EEPROM;
const DeviceInfo_Type DeviceInfo::VIDEO;
const DeviceInfo_Type DeviceInfo::AUDIO;
const DeviceInfo_Type DeviceInfo::AUDIO_CODEC;
const DeviceInfo_Type DeviceInfo::VIDEO_BLE;
const DeviceInfo_Type DeviceInfo::AUDIO_BLE;
const DeviceInfo_Type DeviceInfo::MCU;
const DeviceInfo_Type DeviceInfo::Type_MIN;
const DeviceInfo_Type DeviceInfo::Type_MAX;
const int DeviceInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Product::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Product::kUuidFieldNumber;
const int Product::kModelFieldNumber;
const int Product::kNameFieldNumber;
const int Product::kFirmwarePackageVersionFieldNumber;
const int Product::kLastFirmwareUpdateTimeFieldNumber;
const int Product::kDevicesFieldNumber;
const int Product::kDeviceConnectionsFieldNumber;
const int Product::kSerialNumberFieldNumber;
const int Product::kConnectionStateFieldNumber;
const int Product::kUpdateStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Product::Product()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_Product.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.Product)
}
Product::Product(const Product& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      devices_(from.devices_),
      device_connections_(from.device_connections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_package_version().size() > 0) {
    firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_package_version_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  ::memcpy(&model_, &from.model_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_state_) -
    reinterpret_cast<char*>(&model_)) + sizeof(update_state_));
  // @@protoc_insertion_point(copy_constructor:logi.proto.Product)
}

void Product::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_state_) -
      reinterpret_cast<char*>(&model_)) + sizeof(update_state_));
}

Product::~Product() {
  // @@protoc_insertion_point(destructor:logi.proto.Product)
  SharedDtor();
}

void Product::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Product::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Product::descriptor() {
  ::protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Product& Product::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_product_5fstate_5fstructures_2eproto::scc_info_Product.base);
  return *internal_default_instance();
}


void Product::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.Product)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  device_connections_.Clear();
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_state_) -
      reinterpret_cast<char*>(&model_)) + sizeof(update_state_));
  _internal_metadata_.Clear();
}

bool Product::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.Product)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.Product.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.Product.Model model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_model(static_cast< ::logi::proto::Product_Model >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.Product.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_package_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_package_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.Product.firmware_package_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_firmware_update_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_firmware_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .logi.proto.Device devices = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .logi.proto.DeviceEdge device_connections = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_device_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.Product.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.SyncConnectionState connection_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connection_state(static_cast< ::logi::proto::SyncConnectionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.SyncUpdateState update_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_update_state(static_cast< ::logi::proto::SyncUpdateState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.Product)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.Product)
  return false;
#undef DO_
}

void Product::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.Product)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Product.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // .logi.proto.Product.Model model = 2;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->model(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Product.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string firmware_package_version = 4;
  if (this->firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Product.firmware_package_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->firmware_package_version(), output);
  }

  // uint32 last_firmware_update_time = 5;
  if (this->last_firmware_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_firmware_update_time(), output);
  }

  // repeated .logi.proto.Device devices = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->devices(static_cast<int>(i)),
      output);
  }

  // repeated .logi.proto.DeviceEdge device_connections = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_connections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->device_connections(static_cast<int>(i)),
      output);
  }

  // string serial_number = 8;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Product.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->serial_number(), output);
  }

  // .logi.proto.SyncConnectionState connection_state = 9;
  if (this->connection_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->connection_state(), output);
  }

  // .logi.proto.SyncUpdateState update_state = 10;
  if (this->update_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->update_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.Product)
}

::google::protobuf::uint8* Product::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.Product)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Product.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // .logi.proto.Product.Model model = 2;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->model(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Product.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string firmware_package_version = 4;
  if (this->firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Product.firmware_package_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->firmware_package_version(), target);
  }

  // uint32 last_firmware_update_time = 5;
  if (this->last_firmware_update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_firmware_update_time(), target);
  }

  // repeated .logi.proto.Device devices = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->devices(static_cast<int>(i)), deterministic, target);
  }

  // repeated .logi.proto.DeviceEdge device_connections = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->device_connections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->device_connections(static_cast<int>(i)), deterministic, target);
  }

  // string serial_number = 8;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Product.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->serial_number(), target);
  }

  // .logi.proto.SyncConnectionState connection_state = 9;
  if (this->connection_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->connection_state(), target);
  }

  // .logi.proto.SyncUpdateState update_state = 10;
  if (this->update_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->update_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.Product)
  return target;
}

size_t Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.Product)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .logi.proto.Device devices = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->devices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devices(static_cast<int>(i)));
    }
  }

  // repeated .logi.proto.DeviceEdge device_connections = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->device_connections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->device_connections(static_cast<int>(i)));
    }
  }

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string firmware_package_version = 4;
  if (this->firmware_package_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_package_version());
  }

  // string serial_number = 8;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // .logi.proto.Product.Model model = 2;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->model());
  }

  // uint32 last_firmware_update_time = 5;
  if (this->last_firmware_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_firmware_update_time());
  }

  // .logi.proto.SyncConnectionState connection_state = 9;
  if (this->connection_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_state());
  }

  // .logi.proto.SyncUpdateState update_state = 10;
  if (this->update_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Product::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.Product)
  GOOGLE_DCHECK_NE(&from, this);
  const Product* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Product>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.Product)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.Product)
    MergeFrom(*source);
  }
}

void Product::MergeFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.Product)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  device_connections_.MergeFrom(from.device_connections_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.firmware_package_version().size() > 0) {

    firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_package_version_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.model() != 0) {
    set_model(from.model());
  }
  if (from.last_firmware_update_time() != 0) {
    set_last_firmware_update_time(from.last_firmware_update_time());
  }
  if (from.connection_state() != 0) {
    set_connection_state(from.connection_state());
  }
  if (from.update_state() != 0) {
    set_update_state(from.update_state());
  }
}

void Product::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Product::CopyFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  return true;
}

void Product::Swap(Product* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Product::InternalSwap(Product* other) {
  using std::swap;
  CastToBase(&devices_)->InternalSwap(CastToBase(&other->devices_));
  CastToBase(&device_connections_)->InternalSwap(CastToBase(&other->device_connections_));
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firmware_package_version_.Swap(&other->firmware_package_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(model_, other->model_);
  swap(last_firmware_update_time_, other->last_firmware_update_time_);
  swap(connection_state_, other->connection_state_);
  swap(update_state_, other->update_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Product::GetMetadata() const {
  protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Device_PropertiesEntry_DoNotUse::Device_PropertiesEntry_DoNotUse() {}
Device_PropertiesEntry_DoNotUse::Device_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Device_PropertiesEntry_DoNotUse::MergeFrom(const Device_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Device_PropertiesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[1];
}
void Device_PropertiesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Device::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kUuidFieldNumber;
const int Device::kNameFieldNumber;
const int Device::kFormFactorFieldNumber;
const int Device::kIsConnectedToHostFieldNumber;
const int Device::kPropertiesFieldNumber;
const int Device::kInformationFieldNumber;
const int Device::kSerialNumberFieldNumber;
const int Device::kUpdateStateFieldNumber;
const int Device::kConnectionStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_Device.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.Device)
}
Device::Device(const Device& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      information_(from.information_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  ::memcpy(&form_factor_, &from.form_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&connection_state_) -
    reinterpret_cast<char*>(&form_factor_)) + sizeof(connection_state_));
  // @@protoc_insertion_point(copy_constructor:logi.proto.Device)
}

void Device::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&form_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_state_) -
      reinterpret_cast<char*>(&form_factor_)) + sizeof(connection_state_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:logi.proto.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  ::protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Device& Device::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_product_5fstate_5fstructures_2eproto::scc_info_Device.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  information_.Clear();
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&form_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_state_) -
      reinterpret_cast<char*>(&form_factor_)) + sizeof(connection_state_));
  _internal_metadata_.Clear();
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.Device)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.Device.uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.Device.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.Device.FormFactor form_factor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_form_factor(static_cast< ::logi::proto::Device_FormFactor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_connected_to_host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_connected_to_host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, string> properties = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          Device_PropertiesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Device_PropertiesEntry_DoNotUse,
              ::google::protobuf::uint32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.Device.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .logi.proto.DeviceInfo information = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_information()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.Device.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.SyncUpdateState update_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_update_state(static_cast< ::logi::proto::SyncUpdateState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.SyncConnectionState connection_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_connection_state(static_cast< ::logi::proto::SyncConnectionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Device.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Device.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .logi.proto.Device.FormFactor form_factor = 3;
  if (this->form_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->form_factor(), output);
  }

  // bool is_connected_to_host = 4;
  if (this->is_connected_to_host() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_connected_to_host(), output);
  }

  // map<uint32, string> properties = 5;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "logi.proto.Device.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Device_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<Device_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .logi.proto.DeviceInfo information = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->information_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->information(static_cast<int>(i)),
      output);
  }

  // string serial_number = 7;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Device.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serial_number(), output);
  }

  // .logi.proto.SyncUpdateState update_state = 8;
  if (this->update_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->update_state(), output);
  }

  // .logi.proto.SyncConnectionState connection_state = 9;
  if (this->connection_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->connection_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.Device)
}

::google::protobuf::uint8* Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Device.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Device.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .logi.proto.Device.FormFactor form_factor = 3;
  if (this->form_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->form_factor(), target);
  }

  // bool is_connected_to_host = 4;
  if (this->is_connected_to_host() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_connected_to_host(), target);
  }

  // map<uint32, string> properties = 5;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "logi.proto.Device.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Device_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::std::unique_ptr<Device_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .logi.proto.DeviceInfo information = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->information_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->information(static_cast<int>(i)), deterministic, target);
  }

  // string serial_number = 7;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.Device.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serial_number(), target);
  }

  // .logi.proto.SyncUpdateState update_state = 8;
  if (this->update_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->update_state(), target);
  }

  // .logi.proto.SyncConnectionState connection_state = 9;
  if (this->connection_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->connection_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.Device)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, string> properties = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::std::unique_ptr<Device_PropertiesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .logi.proto.DeviceInfo information = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->information_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->information(static_cast<int>(i)));
    }
  }

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string serial_number = 7;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // .logi.proto.Device.FormFactor form_factor = 3;
  if (this->form_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->form_factor());
  }

  // bool is_connected_to_host = 4;
  if (this->is_connected_to_host() != 0) {
    total_size += 1 + 1;
  }

  // .logi.proto.SyncUpdateState update_state = 8;
  if (this->update_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_state());
  }

  // .logi.proto.SyncConnectionState connection_state = 9;
  if (this->connection_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  information_.MergeFrom(from.information_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.form_factor() != 0) {
    set_form_factor(from.form_factor());
  }
  if (from.is_connected_to_host() != 0) {
    set_is_connected_to_host(from.is_connected_to_host());
  }
  if (from.update_state() != 0) {
    set_update_state(from.update_state());
  }
  if (from.connection_state() != 0) {
    set_connection_state(from.connection_state());
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  using std::swap;
  properties_.Swap(&other->properties_);
  CastToBase(&information_)->InternalSwap(CastToBase(&other->information_));
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(form_factor_, other->form_factor_);
  swap(is_connected_to_host_, other->is_connected_to_host_);
  swap(update_state_, other->update_state_);
  swap(connection_state_, other->connection_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kTypeFieldNumber;
const int DeviceInfo::kPidFieldNumber;
const int DeviceInfo::kFirmwareVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_DeviceInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_version().size() > 0) {
    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:logi.proto.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(pid_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:logi.proto.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  ::protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfo& DeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_product_5fstate_5fstructures_2eproto::scc_info_DeviceInfo.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(pid_));
  _internal_metadata_.Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.DeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.DeviceInfo.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::logi::proto::DeviceInfo_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_version().data(), static_cast<int>(this->firmware_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.DeviceInfo.firmware_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.DeviceInfo.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // string firmware_version = 3;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), static_cast<int>(this->firmware_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.DeviceInfo.firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firmware_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.DeviceInfo.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pid(), target);
  }

  // string firmware_version = 3;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), static_cast<int>(this->firmware_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.DeviceInfo.firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firmware_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.DeviceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string firmware_version = 3;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_version());
  }

  // .logi.proto.DeviceInfo.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firmware_version().size() > 0) {

    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  firmware_version_.Swap(&other->firmware_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(pid_, other->pid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceEdge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceEdge::kParentDeviceUuidFieldNumber;
const int DeviceEdge::kChildDeviceUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceEdge::DeviceEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_DeviceEdge.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.DeviceEdge)
}
DeviceEdge::DeviceEdge(const DeviceEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_device_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent_device_uuid().size() > 0) {
    parent_device_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_device_uuid_);
  }
  child_device_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.child_device_uuid().size() > 0) {
    child_device_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_device_uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.DeviceEdge)
}

void DeviceEdge::SharedCtor() {
  parent_device_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_device_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceEdge::~DeviceEdge() {
  // @@protoc_insertion_point(destructor:logi.proto.DeviceEdge)
  SharedDtor();
}

void DeviceEdge::SharedDtor() {
  parent_device_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_device_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceEdge::descriptor() {
  ::protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceEdge& DeviceEdge::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_product_5fstate_5fstructures_2eproto::scc_info_DeviceEdge.base);
  return *internal_default_instance();
}


void DeviceEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.DeviceEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_device_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_device_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeviceEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.DeviceEdge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent_device_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_device_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent_device_uuid().data(), static_cast<int>(this->parent_device_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.DeviceEdge.parent_device_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string child_device_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_device_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->child_device_uuid().data(), static_cast<int>(this->child_device_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.DeviceEdge.child_device_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.DeviceEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.DeviceEdge)
  return false;
#undef DO_
}

void DeviceEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.DeviceEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_device_uuid = 1;
  if (this->parent_device_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_device_uuid().data(), static_cast<int>(this->parent_device_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.DeviceEdge.parent_device_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent_device_uuid(), output);
  }

  // string child_device_uuid = 2;
  if (this->child_device_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->child_device_uuid().data(), static_cast<int>(this->child_device_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.DeviceEdge.child_device_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->child_device_uuid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.DeviceEdge)
}

::google::protobuf::uint8* DeviceEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.DeviceEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_device_uuid = 1;
  if (this->parent_device_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_device_uuid().data(), static_cast<int>(this->parent_device_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.DeviceEdge.parent_device_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent_device_uuid(), target);
  }

  // string child_device_uuid = 2;
  if (this->child_device_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->child_device_uuid().data(), static_cast<int>(this->child_device_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.DeviceEdge.child_device_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->child_device_uuid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.DeviceEdge)
  return target;
}

size_t DeviceEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.DeviceEdge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string parent_device_uuid = 1;
  if (this->parent_device_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_device_uuid());
  }

  // string child_device_uuid = 2;
  if (this->child_device_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->child_device_uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.DeviceEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.DeviceEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.DeviceEdge)
    MergeFrom(*source);
  }
}

void DeviceEdge::MergeFrom(const DeviceEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.DeviceEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent_device_uuid().size() > 0) {

    parent_device_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_device_uuid_);
  }
  if (from.child_device_uuid().size() > 0) {

    child_device_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_device_uuid_);
  }
}

void DeviceEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.DeviceEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceEdge::CopyFrom(const DeviceEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.DeviceEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceEdge::IsInitialized() const {
  return true;
}

void DeviceEdge::Swap(DeviceEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceEdge::InternalSwap(DeviceEdge* other) {
  using std::swap;
  parent_device_uuid_.Swap(&other->parent_device_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  child_device_uuid_.Swap(&other->child_device_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceEdge::GetMetadata() const {
  protobuf_product_5fstate_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_product_5fstate_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::Product* Arena::CreateMaybeMessage< ::logi::proto::Product >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::Product >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::Device_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::logi::proto::Device_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::Device_PropertiesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::Device* Arena::CreateMaybeMessage< ::logi::proto::Device >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::Device >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::DeviceInfo* Arena::CreateMaybeMessage< ::logi::proto::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::DeviceInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::DeviceEdge* Arena::CreateMaybeMessage< ::logi::proto::DeviceEdge >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::DeviceEdge >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
