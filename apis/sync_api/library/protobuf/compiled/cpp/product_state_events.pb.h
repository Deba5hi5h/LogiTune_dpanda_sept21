// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: product_state_events.proto

#ifndef PROTOBUF_INCLUDED_product_5fstate_5fevents_2eproto
#define PROTOBUF_INCLUDED_product_5fstate_5fevents_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "product_state_structures.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_product_5fstate_5fevents_2eproto 

namespace protobuf_product_5fstate_5fevents_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_product_5fstate_5fevents_2eproto
namespace logi {
namespace proto {
class DeviceConnectedToProductEvent;
class DeviceConnectedToProductEventDefaultTypeInternal;
extern DeviceConnectedToProductEventDefaultTypeInternal _DeviceConnectedToProductEvent_default_instance_;
class DeviceDisconnectedFromProductEvent;
class DeviceDisconnectedFromProductEventDefaultTypeInternal;
extern DeviceDisconnectedFromProductEventDefaultTypeInternal _DeviceDisconnectedFromProductEvent_default_instance_;
class DevicePropertyChangedEvent;
class DevicePropertyChangedEventDefaultTypeInternal;
extern DevicePropertyChangedEventDefaultTypeInternal _DevicePropertyChangedEvent_default_instance_;
class ProductAvailableEvent;
class ProductAvailableEventDefaultTypeInternal;
extern ProductAvailableEventDefaultTypeInternal _ProductAvailableEvent_default_instance_;
class ProductConfigurationChangedEvent;
class ProductConfigurationChangedEventDefaultTypeInternal;
extern ProductConfigurationChangedEventDefaultTypeInternal _ProductConfigurationChangedEvent_default_instance_;
class ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse;
class ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUseDefaultTypeInternal;
extern ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUseDefaultTypeInternal _ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse_default_instance_;
class ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse;
class ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUseDefaultTypeInternal;
extern ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUseDefaultTypeInternal _ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse_default_instance_;
class ProductErrorEvent;
class ProductErrorEventDefaultTypeInternal;
extern ProductErrorEventDefaultTypeInternal _ProductErrorEvent_default_instance_;
class ProductEvent;
class ProductEventDefaultTypeInternal;
extern ProductEventDefaultTypeInternal _ProductEvent_default_instance_;
class ProductStateChangedEvent;
class ProductStateChangedEventDefaultTypeInternal;
extern ProductStateChangedEventDefaultTypeInternal _ProductStateChangedEvent_default_instance_;
class ProductUnavailableEvent;
class ProductUnavailableEventDefaultTypeInternal;
extern ProductUnavailableEventDefaultTypeInternal _ProductUnavailableEvent_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::DeviceConnectedToProductEvent* Arena::CreateMaybeMessage<::logi::proto::DeviceConnectedToProductEvent>(Arena*);
template<> ::logi::proto::DeviceDisconnectedFromProductEvent* Arena::CreateMaybeMessage<::logi::proto::DeviceDisconnectedFromProductEvent>(Arena*);
template<> ::logi::proto::DevicePropertyChangedEvent* Arena::CreateMaybeMessage<::logi::proto::DevicePropertyChangedEvent>(Arena*);
template<> ::logi::proto::ProductAvailableEvent* Arena::CreateMaybeMessage<::logi::proto::ProductAvailableEvent>(Arena*);
template<> ::logi::proto::ProductConfigurationChangedEvent* Arena::CreateMaybeMessage<::logi::proto::ProductConfigurationChangedEvent>(Arena*);
template<> ::logi::proto::ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse* Arena::CreateMaybeMessage<::logi::proto::ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse>(Arena*);
template<> ::logi::proto::ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse* Arena::CreateMaybeMessage<::logi::proto::ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse>(Arena*);
template<> ::logi::proto::ProductErrorEvent* Arena::CreateMaybeMessage<::logi::proto::ProductErrorEvent>(Arena*);
template<> ::logi::proto::ProductEvent* Arena::CreateMaybeMessage<::logi::proto::ProductEvent>(Arena*);
template<> ::logi::proto::ProductStateChangedEvent* Arena::CreateMaybeMessage<::logi::proto::ProductStateChangedEvent>(Arena*);
template<> ::logi::proto::ProductUnavailableEvent* Arena::CreateMaybeMessage<::logi::proto::ProductUnavailableEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

// ===================================================================

class ProductStateChangedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.ProductStateChangedEvent) */ {
 public:
  ProductStateChangedEvent();
  virtual ~ProductStateChangedEvent();

  ProductStateChangedEvent(const ProductStateChangedEvent& from);

  inline ProductStateChangedEvent& operator=(const ProductStateChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductStateChangedEvent(ProductStateChangedEvent&& from) noexcept
    : ProductStateChangedEvent() {
    *this = ::std::move(from);
  }

  inline ProductStateChangedEvent& operator=(ProductStateChangedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductStateChangedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductStateChangedEvent* internal_default_instance() {
    return reinterpret_cast<const ProductStateChangedEvent*>(
               &_ProductStateChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProductStateChangedEvent* other);
  friend void swap(ProductStateChangedEvent& a, ProductStateChangedEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductStateChangedEvent* New() const final {
    return CreateMaybeMessage<ProductStateChangedEvent>(NULL);
  }

  ProductStateChangedEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductStateChangedEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductStateChangedEvent& from);
  void MergeFrom(const ProductStateChangedEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductStateChangedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // .logi.proto.Product product = 3;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 3;
  private:
  const ::logi::proto::Product& _internal_product() const;
  public:
  const ::logi::proto::Product& product() const;
  ::logi::proto::Product* release_product();
  ::logi::proto::Product* mutable_product();
  void set_allocated_product(::logi::proto::Product* product);

  // .logi.proto.SyncConnectionState connection_state = 2;
  void clear_connection_state();
  static const int kConnectionStateFieldNumber = 2;
  ::logi::proto::SyncConnectionState connection_state() const;
  void set_connection_state(::logi::proto::SyncConnectionState value);

  // @@protoc_insertion_point(class_scope:logi.proto.ProductStateChangedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  ::logi::proto::Product* product_;
  int connection_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProductAvailableEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.ProductAvailableEvent) */ {
 public:
  ProductAvailableEvent();
  virtual ~ProductAvailableEvent();

  ProductAvailableEvent(const ProductAvailableEvent& from);

  inline ProductAvailableEvent& operator=(const ProductAvailableEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductAvailableEvent(ProductAvailableEvent&& from) noexcept
    : ProductAvailableEvent() {
    *this = ::std::move(from);
  }

  inline ProductAvailableEvent& operator=(ProductAvailableEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductAvailableEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductAvailableEvent* internal_default_instance() {
    return reinterpret_cast<const ProductAvailableEvent*>(
               &_ProductAvailableEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProductAvailableEvent* other);
  friend void swap(ProductAvailableEvent& a, ProductAvailableEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductAvailableEvent* New() const final {
    return CreateMaybeMessage<ProductAvailableEvent>(NULL);
  }

  ProductAvailableEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductAvailableEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductAvailableEvent& from);
  void MergeFrom(const ProductAvailableEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductAvailableEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.Product product = 1;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 1;
  private:
  const ::logi::proto::Product& _internal_product() const;
  public:
  const ::logi::proto::Product& product() const;
  ::logi::proto::Product* release_product();
  ::logi::proto::Product* mutable_product();
  void set_allocated_product(::logi::proto::Product* product);

  // @@protoc_insertion_point(class_scope:logi.proto.ProductAvailableEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::logi::proto::Product* product_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProductUnavailableEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.ProductUnavailableEvent) */ {
 public:
  ProductUnavailableEvent();
  virtual ~ProductUnavailableEvent();

  ProductUnavailableEvent(const ProductUnavailableEvent& from);

  inline ProductUnavailableEvent& operator=(const ProductUnavailableEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductUnavailableEvent(ProductUnavailableEvent&& from) noexcept
    : ProductUnavailableEvent() {
    *this = ::std::move(from);
  }

  inline ProductUnavailableEvent& operator=(ProductUnavailableEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductUnavailableEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductUnavailableEvent* internal_default_instance() {
    return reinterpret_cast<const ProductUnavailableEvent*>(
               &_ProductUnavailableEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ProductUnavailableEvent* other);
  friend void swap(ProductUnavailableEvent& a, ProductUnavailableEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductUnavailableEvent* New() const final {
    return CreateMaybeMessage<ProductUnavailableEvent>(NULL);
  }

  ProductUnavailableEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductUnavailableEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductUnavailableEvent& from);
  void MergeFrom(const ProductUnavailableEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductUnavailableEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // @@protoc_insertion_point(class_scope:logi.proto.ProductUnavailableEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceConnectedToProductEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.DeviceConnectedToProductEvent) */ {
 public:
  DeviceConnectedToProductEvent();
  virtual ~DeviceConnectedToProductEvent();

  DeviceConnectedToProductEvent(const DeviceConnectedToProductEvent& from);

  inline DeviceConnectedToProductEvent& operator=(const DeviceConnectedToProductEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceConnectedToProductEvent(DeviceConnectedToProductEvent&& from) noexcept
    : DeviceConnectedToProductEvent() {
    *this = ::std::move(from);
  }

  inline DeviceConnectedToProductEvent& operator=(DeviceConnectedToProductEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceConnectedToProductEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceConnectedToProductEvent* internal_default_instance() {
    return reinterpret_cast<const DeviceConnectedToProductEvent*>(
               &_DeviceConnectedToProductEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeviceConnectedToProductEvent* other);
  friend void swap(DeviceConnectedToProductEvent& a, DeviceConnectedToProductEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceConnectedToProductEvent* New() const final {
    return CreateMaybeMessage<DeviceConnectedToProductEvent>(NULL);
  }

  DeviceConnectedToProductEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConnectedToProductEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceConnectedToProductEvent& from);
  void MergeFrom(const DeviceConnectedToProductEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConnectedToProductEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Device devices = 2;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 2;
  ::logi::proto::Device* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >*
      mutable_devices();
  const ::logi::proto::Device& devices(int index) const;
  ::logi::proto::Device* add_devices();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >&
      devices() const;

  // repeated .logi.proto.DeviceEdge device_connection = 3;
  int device_connection_size() const;
  void clear_device_connection();
  static const int kDeviceConnectionFieldNumber = 3;
  ::logi::proto::DeviceEdge* mutable_device_connection(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >*
      mutable_device_connection();
  const ::logi::proto::DeviceEdge& device_connection(int index) const;
  ::logi::proto::DeviceEdge* add_device_connection();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >&
      device_connection() const;

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // @@protoc_insertion_point(class_scope:logi.proto.DeviceConnectedToProductEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Device > devices_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge > device_connection_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceDisconnectedFromProductEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.DeviceDisconnectedFromProductEvent) */ {
 public:
  DeviceDisconnectedFromProductEvent();
  virtual ~DeviceDisconnectedFromProductEvent();

  DeviceDisconnectedFromProductEvent(const DeviceDisconnectedFromProductEvent& from);

  inline DeviceDisconnectedFromProductEvent& operator=(const DeviceDisconnectedFromProductEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceDisconnectedFromProductEvent(DeviceDisconnectedFromProductEvent&& from) noexcept
    : DeviceDisconnectedFromProductEvent() {
    *this = ::std::move(from);
  }

  inline DeviceDisconnectedFromProductEvent& operator=(DeviceDisconnectedFromProductEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceDisconnectedFromProductEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceDisconnectedFromProductEvent* internal_default_instance() {
    return reinterpret_cast<const DeviceDisconnectedFromProductEvent*>(
               &_DeviceDisconnectedFromProductEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeviceDisconnectedFromProductEvent* other);
  friend void swap(DeviceDisconnectedFromProductEvent& a, DeviceDisconnectedFromProductEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceDisconnectedFromProductEvent* New() const final {
    return CreateMaybeMessage<DeviceDisconnectedFromProductEvent>(NULL);
  }

  DeviceDisconnectedFromProductEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceDisconnectedFromProductEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceDisconnectedFromProductEvent& from);
  void MergeFrom(const DeviceDisconnectedFromProductEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceDisconnectedFromProductEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string device_uuids = 2;
  int device_uuids_size() const;
  void clear_device_uuids();
  static const int kDeviceUuidsFieldNumber = 2;
  const ::std::string& device_uuids(int index) const;
  ::std::string* mutable_device_uuids(int index);
  void set_device_uuids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_device_uuids(int index, ::std::string&& value);
  #endif
  void set_device_uuids(int index, const char* value);
  void set_device_uuids(int index, const char* value, size_t size);
  ::std::string* add_device_uuids();
  void add_device_uuids(const ::std::string& value);
  #if LANG_CXX11
  void add_device_uuids(::std::string&& value);
  #endif
  void add_device_uuids(const char* value);
  void add_device_uuids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& device_uuids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_device_uuids();

  // repeated .logi.proto.DeviceEdge device_connection = 3;
  int device_connection_size() const;
  void clear_device_connection();
  static const int kDeviceConnectionFieldNumber = 3;
  ::logi::proto::DeviceEdge* mutable_device_connection(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >*
      mutable_device_connection();
  const ::logi::proto::DeviceEdge& device_connection(int index) const;
  ::logi::proto::DeviceEdge* add_device_connection();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >&
      device_connection() const;

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // @@protoc_insertion_point(class_scope:logi.proto.DeviceDisconnectedFromProductEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> device_uuids_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge > device_connection_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DevicePropertyChangedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.DevicePropertyChangedEvent) */ {
 public:
  DevicePropertyChangedEvent();
  virtual ~DevicePropertyChangedEvent();

  DevicePropertyChangedEvent(const DevicePropertyChangedEvent& from);

  inline DevicePropertyChangedEvent& operator=(const DevicePropertyChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DevicePropertyChangedEvent(DevicePropertyChangedEvent&& from) noexcept
    : DevicePropertyChangedEvent() {
    *this = ::std::move(from);
  }

  inline DevicePropertyChangedEvent& operator=(DevicePropertyChangedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DevicePropertyChangedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevicePropertyChangedEvent* internal_default_instance() {
    return reinterpret_cast<const DevicePropertyChangedEvent*>(
               &_DevicePropertyChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DevicePropertyChangedEvent* other);
  friend void swap(DevicePropertyChangedEvent& a, DevicePropertyChangedEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DevicePropertyChangedEvent* New() const final {
    return CreateMaybeMessage<DevicePropertyChangedEvent>(NULL);
  }

  DevicePropertyChangedEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DevicePropertyChangedEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DevicePropertyChangedEvent& from);
  void MergeFrom(const DevicePropertyChangedEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevicePropertyChangedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // string device_uuid = 2;
  void clear_device_uuid();
  static const int kDeviceUuidFieldNumber = 2;
  const ::std::string& device_uuid() const;
  void set_device_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_device_uuid(::std::string&& value);
  #endif
  void set_device_uuid(const char* value);
  void set_device_uuid(const char* value, size_t size);
  ::std::string* mutable_device_uuid();
  ::std::string* release_device_uuid();
  void set_allocated_device_uuid(::std::string* device_uuid);

  // string property_value = 4;
  void clear_property_value();
  static const int kPropertyValueFieldNumber = 4;
  const ::std::string& property_value() const;
  void set_property_value(const ::std::string& value);
  #if LANG_CXX11
  void set_property_value(::std::string&& value);
  #endif
  void set_property_value(const char* value);
  void set_property_value(const char* value, size_t size);
  ::std::string* mutable_property_value();
  ::std::string* release_property_value();
  void set_allocated_property_value(::std::string* property_value);

  // .logi.proto.Device.Property property_key = 3;
  void clear_property_key();
  static const int kPropertyKeyFieldNumber = 3;
  ::logi::proto::Device_Property property_key() const;
  void set_property_key(::logi::proto::Device_Property value);

  // bool is_removed = 5;
  void clear_is_removed();
  static const int kIsRemovedFieldNumber = 5;
  bool is_removed() const;
  void set_is_removed(bool value);

  // @@protoc_insertion_point(class_scope:logi.proto.DevicePropertyChangedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  ::google::protobuf::internal::ArenaStringPtr device_uuid_;
  ::google::protobuf::internal::ArenaStringPtr property_value_;
  int property_key_;
  bool is_removed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse();
  ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse& other);
  static const ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse*>(&_ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse, 
    ::google::protobuf::uint32, ::google::protobuf::uint32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    0 > SuperType;
  ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse();
  ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse& other);
  static const ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse*>(&_ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ProductConfigurationChangedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.ProductConfigurationChangedEvent) */ {
 public:
  ProductConfigurationChangedEvent();
  virtual ~ProductConfigurationChangedEvent();

  ProductConfigurationChangedEvent(const ProductConfigurationChangedEvent& from);

  inline ProductConfigurationChangedEvent& operator=(const ProductConfigurationChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductConfigurationChangedEvent(ProductConfigurationChangedEvent&& from) noexcept
    : ProductConfigurationChangedEvent() {
    *this = ::std::move(from);
  }

  inline ProductConfigurationChangedEvent& operator=(ProductConfigurationChangedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductConfigurationChangedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductConfigurationChangedEvent* internal_default_instance() {
    return reinterpret_cast<const ProductConfigurationChangedEvent*>(
               &_ProductConfigurationChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ProductConfigurationChangedEvent* other);
  friend void swap(ProductConfigurationChangedEvent& a, ProductConfigurationChangedEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductConfigurationChangedEvent* New() const final {
    return CreateMaybeMessage<ProductConfigurationChangedEvent>(NULL);
  }

  ProductConfigurationChangedEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductConfigurationChangedEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductConfigurationChangedEvent& from);
  void MergeFrom(const ProductConfigurationChangedEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductConfigurationChangedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> expected_device_count = 2;
  int expected_device_count_size() const;
  void clear_expected_device_count();
  static const int kExpectedDeviceCountFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      expected_device_count() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_expected_device_count();

  // map<uint32, uint32> actual_device_count = 3;
  int actual_device_count_size() const;
  void clear_actual_device_count();
  static const int kActualDeviceCountFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      actual_device_count() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_actual_device_count();

  // repeated .logi.proto.Device forgotten_devices = 4;
  int forgotten_devices_size() const;
  void clear_forgotten_devices();
  static const int kForgottenDevicesFieldNumber = 4;
  ::logi::proto::Device* mutable_forgotten_devices(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >*
      mutable_forgotten_devices();
  const ::logi::proto::Device& forgotten_devices(int index) const;
  ::logi::proto::Device* add_forgotten_devices();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >&
      forgotten_devices() const;

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // @@protoc_insertion_point(class_scope:logi.proto.ProductConfigurationChangedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ProductConfigurationChangedEvent_ExpectedDeviceCountEntry_DoNotUse,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > expected_device_count_;
  ::google::protobuf::internal::MapField<
      ProductConfigurationChangedEvent_ActualDeviceCountEntry_DoNotUse,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > actual_device_count_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Device > forgotten_devices_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProductErrorEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.ProductErrorEvent) */ {
 public:
  ProductErrorEvent();
  virtual ~ProductErrorEvent();

  ProductErrorEvent(const ProductErrorEvent& from);

  inline ProductErrorEvent& operator=(const ProductErrorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductErrorEvent(ProductErrorEvent&& from) noexcept
    : ProductErrorEvent() {
    *this = ::std::move(from);
  }

  inline ProductErrorEvent& operator=(ProductErrorEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductErrorEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductErrorEvent* internal_default_instance() {
    return reinterpret_cast<const ProductErrorEvent*>(
               &_ProductErrorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ProductErrorEvent* other);
  friend void swap(ProductErrorEvent& a, ProductErrorEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductErrorEvent* New() const final {
    return CreateMaybeMessage<ProductErrorEvent>(NULL);
  }

  ProductErrorEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductErrorEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductErrorEvent& from);
  void MergeFrom(const ProductErrorEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductErrorEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Error errors = 3;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 3;
  ::logi::proto::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
      mutable_errors();
  const ::logi::proto::Error& errors(int index) const;
  ::logi::proto::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
      errors() const;

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // string device_uuid = 2;
  void clear_device_uuid();
  static const int kDeviceUuidFieldNumber = 2;
  const ::std::string& device_uuid() const;
  void set_device_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_device_uuid(::std::string&& value);
  #endif
  void set_device_uuid(const char* value);
  void set_device_uuid(const char* value, size_t size);
  ::std::string* mutable_device_uuid();
  ::std::string* release_device_uuid();
  void set_allocated_device_uuid(::std::string* device_uuid);

  // @@protoc_insertion_point(class_scope:logi.proto.ProductErrorEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error > errors_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  ::google::protobuf::internal::ArenaStringPtr device_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProductEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.ProductEvent) */ {
 public:
  ProductEvent();
  virtual ~ProductEvent();

  ProductEvent(const ProductEvent& from);

  inline ProductEvent& operator=(const ProductEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductEvent(ProductEvent&& from) noexcept
    : ProductEvent() {
    *this = ::std::move(from);
  }

  inline ProductEvent& operator=(ProductEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductEvent& default_instance();

  enum EventCase {
    kProductAvailableEvent = 1,
    kProductUnavailableEvent = 2,
    kDeviceConnectedToProductEvent = 3,
    kDeviceDisconnectedFromProductEvent = 4,
    kProductErrorEvent = 5,
    kDevicePropertyChangedEvent = 6,
    kProductConfigurationChangedEvent = 7,
    kProductStateChangedEvent = 8,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductEvent* internal_default_instance() {
    return reinterpret_cast<const ProductEvent*>(
               &_ProductEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ProductEvent* other);
  friend void swap(ProductEvent& a, ProductEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductEvent* New() const final {
    return CreateMaybeMessage<ProductEvent>(NULL);
  }

  ProductEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductEvent& from);
  void MergeFrom(const ProductEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.ProductAvailableEvent product_available_event = 1;
  bool has_product_available_event() const;
  void clear_product_available_event();
  static const int kProductAvailableEventFieldNumber = 1;
  private:
  const ::logi::proto::ProductAvailableEvent& _internal_product_available_event() const;
  public:
  const ::logi::proto::ProductAvailableEvent& product_available_event() const;
  ::logi::proto::ProductAvailableEvent* release_product_available_event();
  ::logi::proto::ProductAvailableEvent* mutable_product_available_event();
  void set_allocated_product_available_event(::logi::proto::ProductAvailableEvent* product_available_event);

  // .logi.proto.ProductUnavailableEvent product_unavailable_event = 2;
  bool has_product_unavailable_event() const;
  void clear_product_unavailable_event();
  static const int kProductUnavailableEventFieldNumber = 2;
  private:
  const ::logi::proto::ProductUnavailableEvent& _internal_product_unavailable_event() const;
  public:
  const ::logi::proto::ProductUnavailableEvent& product_unavailable_event() const;
  ::logi::proto::ProductUnavailableEvent* release_product_unavailable_event();
  ::logi::proto::ProductUnavailableEvent* mutable_product_unavailable_event();
  void set_allocated_product_unavailable_event(::logi::proto::ProductUnavailableEvent* product_unavailable_event);

  // .logi.proto.DeviceConnectedToProductEvent device_connected_to_product_event = 3;
  bool has_device_connected_to_product_event() const;
  void clear_device_connected_to_product_event();
  static const int kDeviceConnectedToProductEventFieldNumber = 3;
  private:
  const ::logi::proto::DeviceConnectedToProductEvent& _internal_device_connected_to_product_event() const;
  public:
  const ::logi::proto::DeviceConnectedToProductEvent& device_connected_to_product_event() const;
  ::logi::proto::DeviceConnectedToProductEvent* release_device_connected_to_product_event();
  ::logi::proto::DeviceConnectedToProductEvent* mutable_device_connected_to_product_event();
  void set_allocated_device_connected_to_product_event(::logi::proto::DeviceConnectedToProductEvent* device_connected_to_product_event);

  // .logi.proto.DeviceDisconnectedFromProductEvent device_disconnected_from_product_event = 4;
  bool has_device_disconnected_from_product_event() const;
  void clear_device_disconnected_from_product_event();
  static const int kDeviceDisconnectedFromProductEventFieldNumber = 4;
  private:
  const ::logi::proto::DeviceDisconnectedFromProductEvent& _internal_device_disconnected_from_product_event() const;
  public:
  const ::logi::proto::DeviceDisconnectedFromProductEvent& device_disconnected_from_product_event() const;
  ::logi::proto::DeviceDisconnectedFromProductEvent* release_device_disconnected_from_product_event();
  ::logi::proto::DeviceDisconnectedFromProductEvent* mutable_device_disconnected_from_product_event();
  void set_allocated_device_disconnected_from_product_event(::logi::proto::DeviceDisconnectedFromProductEvent* device_disconnected_from_product_event);

  // .logi.proto.ProductErrorEvent product_error_event = 5;
  bool has_product_error_event() const;
  void clear_product_error_event();
  static const int kProductErrorEventFieldNumber = 5;
  private:
  const ::logi::proto::ProductErrorEvent& _internal_product_error_event() const;
  public:
  const ::logi::proto::ProductErrorEvent& product_error_event() const;
  ::logi::proto::ProductErrorEvent* release_product_error_event();
  ::logi::proto::ProductErrorEvent* mutable_product_error_event();
  void set_allocated_product_error_event(::logi::proto::ProductErrorEvent* product_error_event);

  // .logi.proto.DevicePropertyChangedEvent device_property_changed_event = 6;
  bool has_device_property_changed_event() const;
  void clear_device_property_changed_event();
  static const int kDevicePropertyChangedEventFieldNumber = 6;
  private:
  const ::logi::proto::DevicePropertyChangedEvent& _internal_device_property_changed_event() const;
  public:
  const ::logi::proto::DevicePropertyChangedEvent& device_property_changed_event() const;
  ::logi::proto::DevicePropertyChangedEvent* release_device_property_changed_event();
  ::logi::proto::DevicePropertyChangedEvent* mutable_device_property_changed_event();
  void set_allocated_device_property_changed_event(::logi::proto::DevicePropertyChangedEvent* device_property_changed_event);

  // .logi.proto.ProductConfigurationChangedEvent product_configuration_changed_event = 7;
  bool has_product_configuration_changed_event() const;
  void clear_product_configuration_changed_event();
  static const int kProductConfigurationChangedEventFieldNumber = 7;
  private:
  const ::logi::proto::ProductConfigurationChangedEvent& _internal_product_configuration_changed_event() const;
  public:
  const ::logi::proto::ProductConfigurationChangedEvent& product_configuration_changed_event() const;
  ::logi::proto::ProductConfigurationChangedEvent* release_product_configuration_changed_event();
  ::logi::proto::ProductConfigurationChangedEvent* mutable_product_configuration_changed_event();
  void set_allocated_product_configuration_changed_event(::logi::proto::ProductConfigurationChangedEvent* product_configuration_changed_event);

  // .logi.proto.ProductStateChangedEvent product_state_changed_event = 8;
  bool has_product_state_changed_event() const;
  void clear_product_state_changed_event();
  static const int kProductStateChangedEventFieldNumber = 8;
  private:
  const ::logi::proto::ProductStateChangedEvent& _internal_product_state_changed_event() const;
  public:
  const ::logi::proto::ProductStateChangedEvent& product_state_changed_event() const;
  ::logi::proto::ProductStateChangedEvent* release_product_state_changed_event();
  ::logi::proto::ProductStateChangedEvent* mutable_product_state_changed_event();
  void set_allocated_product_state_changed_event(::logi::proto::ProductStateChangedEvent* product_state_changed_event);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.ProductEvent)
 private:
  void set_has_product_available_event();
  void set_has_product_unavailable_event();
  void set_has_device_connected_to_product_event();
  void set_has_device_disconnected_from_product_event();
  void set_has_product_error_event();
  void set_has_device_property_changed_event();
  void set_has_product_configuration_changed_event();
  void set_has_product_state_changed_event();

  inline bool has_event() const;
  inline void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union EventUnion {
    EventUnion() {}
    ::logi::proto::ProductAvailableEvent* product_available_event_;
    ::logi::proto::ProductUnavailableEvent* product_unavailable_event_;
    ::logi::proto::DeviceConnectedToProductEvent* device_connected_to_product_event_;
    ::logi::proto::DeviceDisconnectedFromProductEvent* device_disconnected_from_product_event_;
    ::logi::proto::ProductErrorEvent* product_error_event_;
    ::logi::proto::DevicePropertyChangedEvent* device_property_changed_event_;
    ::logi::proto::ProductConfigurationChangedEvent* product_configuration_changed_event_;
    ::logi::proto::ProductStateChangedEvent* product_state_changed_event_;
  } event_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_product_5fstate_5fevents_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProductStateChangedEvent

// string product_uuid = 1;
inline void ProductStateChangedEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductStateChangedEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductStateChangedEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void ProductStateChangedEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.ProductStateChangedEvent.product_uuid)
}
#if LANG_CXX11
inline void ProductStateChangedEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.ProductStateChangedEvent.product_uuid)
}
#endif
inline void ProductStateChangedEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.ProductStateChangedEvent.product_uuid)
}
inline void ProductStateChangedEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.ProductStateChangedEvent.product_uuid)
}
inline ::std::string* ProductStateChangedEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductStateChangedEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductStateChangedEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductStateChangedEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductStateChangedEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.ProductStateChangedEvent.product_uuid)
}

// .logi.proto.SyncConnectionState connection_state = 2;
inline void ProductStateChangedEvent::clear_connection_state() {
  connection_state_ = 0;
}
inline ::logi::proto::SyncConnectionState ProductStateChangedEvent::connection_state() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductStateChangedEvent.connection_state)
  return static_cast< ::logi::proto::SyncConnectionState >(connection_state_);
}
inline void ProductStateChangedEvent::set_connection_state(::logi::proto::SyncConnectionState value) {
  
  connection_state_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.ProductStateChangedEvent.connection_state)
}

// .logi.proto.Product product = 3;
inline bool ProductStateChangedEvent::has_product() const {
  return this != internal_default_instance() && product_ != NULL;
}
inline const ::logi::proto::Product& ProductStateChangedEvent::_internal_product() const {
  return *product_;
}
inline const ::logi::proto::Product& ProductStateChangedEvent::product() const {
  const ::logi::proto::Product* p = product_;
  // @@protoc_insertion_point(field_get:logi.proto.ProductStateChangedEvent.product)
  return p != NULL ? *p : *reinterpret_cast<const ::logi::proto::Product*>(
      &::logi::proto::_Product_default_instance_);
}
inline ::logi::proto::Product* ProductStateChangedEvent::release_product() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductStateChangedEvent.product)
  
  ::logi::proto::Product* temp = product_;
  product_ = NULL;
  return temp;
}
inline ::logi::proto::Product* ProductStateChangedEvent::mutable_product() {
  
  if (product_ == NULL) {
    auto* p = CreateMaybeMessage<::logi::proto::Product>(GetArenaNoVirtual());
    product_ = p;
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductStateChangedEvent.product)
  return product_;
}
inline void ProductStateChangedEvent::set_allocated_product(::logi::proto::Product* product) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(product_);
  }
  if (product) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:logi.proto.ProductStateChangedEvent.product)
}

// -------------------------------------------------------------------

// ProductAvailableEvent

// .logi.proto.Product product = 1;
inline bool ProductAvailableEvent::has_product() const {
  return this != internal_default_instance() && product_ != NULL;
}
inline const ::logi::proto::Product& ProductAvailableEvent::_internal_product() const {
  return *product_;
}
inline const ::logi::proto::Product& ProductAvailableEvent::product() const {
  const ::logi::proto::Product* p = product_;
  // @@protoc_insertion_point(field_get:logi.proto.ProductAvailableEvent.product)
  return p != NULL ? *p : *reinterpret_cast<const ::logi::proto::Product*>(
      &::logi::proto::_Product_default_instance_);
}
inline ::logi::proto::Product* ProductAvailableEvent::release_product() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductAvailableEvent.product)
  
  ::logi::proto::Product* temp = product_;
  product_ = NULL;
  return temp;
}
inline ::logi::proto::Product* ProductAvailableEvent::mutable_product() {
  
  if (product_ == NULL) {
    auto* p = CreateMaybeMessage<::logi::proto::Product>(GetArenaNoVirtual());
    product_ = p;
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductAvailableEvent.product)
  return product_;
}
inline void ProductAvailableEvent::set_allocated_product(::logi::proto::Product* product) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(product_);
  }
  if (product) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:logi.proto.ProductAvailableEvent.product)
}

// -------------------------------------------------------------------

// ProductUnavailableEvent

// string product_uuid = 1;
inline void ProductUnavailableEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductUnavailableEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductUnavailableEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void ProductUnavailableEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.ProductUnavailableEvent.product_uuid)
}
#if LANG_CXX11
inline void ProductUnavailableEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.ProductUnavailableEvent.product_uuid)
}
#endif
inline void ProductUnavailableEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.ProductUnavailableEvent.product_uuid)
}
inline void ProductUnavailableEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.ProductUnavailableEvent.product_uuid)
}
inline ::std::string* ProductUnavailableEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductUnavailableEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductUnavailableEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductUnavailableEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductUnavailableEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.ProductUnavailableEvent.product_uuid)
}

// -------------------------------------------------------------------

// DeviceConnectedToProductEvent

// string product_uuid = 1;
inline void DeviceConnectedToProductEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceConnectedToProductEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceConnectedToProductEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void DeviceConnectedToProductEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.DeviceConnectedToProductEvent.product_uuid)
}
#if LANG_CXX11
inline void DeviceConnectedToProductEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.DeviceConnectedToProductEvent.product_uuid)
}
#endif
inline void DeviceConnectedToProductEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.DeviceConnectedToProductEvent.product_uuid)
}
inline void DeviceConnectedToProductEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DeviceConnectedToProductEvent.product_uuid)
}
inline ::std::string* DeviceConnectedToProductEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceConnectedToProductEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceConnectedToProductEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.DeviceConnectedToProductEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConnectedToProductEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.DeviceConnectedToProductEvent.product_uuid)
}

// repeated .logi.proto.Device devices = 2;
inline int DeviceConnectedToProductEvent::devices_size() const {
  return devices_.size();
}
inline ::logi::proto::Device* DeviceConnectedToProductEvent::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceConnectedToProductEvent.devices)
  return devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >*
DeviceConnectedToProductEvent::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.DeviceConnectedToProductEvent.devices)
  return &devices_;
}
inline const ::logi::proto::Device& DeviceConnectedToProductEvent::devices(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceConnectedToProductEvent.devices)
  return devices_.Get(index);
}
inline ::logi::proto::Device* DeviceConnectedToProductEvent::add_devices() {
  // @@protoc_insertion_point(field_add:logi.proto.DeviceConnectedToProductEvent.devices)
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >&
DeviceConnectedToProductEvent::devices() const {
  // @@protoc_insertion_point(field_list:logi.proto.DeviceConnectedToProductEvent.devices)
  return devices_;
}

// repeated .logi.proto.DeviceEdge device_connection = 3;
inline int DeviceConnectedToProductEvent::device_connection_size() const {
  return device_connection_.size();
}
inline ::logi::proto::DeviceEdge* DeviceConnectedToProductEvent::mutable_device_connection(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceConnectedToProductEvent.device_connection)
  return device_connection_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >*
DeviceConnectedToProductEvent::mutable_device_connection() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.DeviceConnectedToProductEvent.device_connection)
  return &device_connection_;
}
inline const ::logi::proto::DeviceEdge& DeviceConnectedToProductEvent::device_connection(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceConnectedToProductEvent.device_connection)
  return device_connection_.Get(index);
}
inline ::logi::proto::DeviceEdge* DeviceConnectedToProductEvent::add_device_connection() {
  // @@protoc_insertion_point(field_add:logi.proto.DeviceConnectedToProductEvent.device_connection)
  return device_connection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >&
DeviceConnectedToProductEvent::device_connection() const {
  // @@protoc_insertion_point(field_list:logi.proto.DeviceConnectedToProductEvent.device_connection)
  return device_connection_;
}

// -------------------------------------------------------------------

// DeviceDisconnectedFromProductEvent

// string product_uuid = 1;
inline void DeviceDisconnectedFromProductEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceDisconnectedFromProductEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceDisconnectedFromProductEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void DeviceDisconnectedFromProductEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.DeviceDisconnectedFromProductEvent.product_uuid)
}
#if LANG_CXX11
inline void DeviceDisconnectedFromProductEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.DeviceDisconnectedFromProductEvent.product_uuid)
}
#endif
inline void DeviceDisconnectedFromProductEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.DeviceDisconnectedFromProductEvent.product_uuid)
}
inline void DeviceDisconnectedFromProductEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DeviceDisconnectedFromProductEvent.product_uuid)
}
inline ::std::string* DeviceDisconnectedFromProductEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceDisconnectedFromProductEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceDisconnectedFromProductEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.DeviceDisconnectedFromProductEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceDisconnectedFromProductEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.DeviceDisconnectedFromProductEvent.product_uuid)
}

// repeated string device_uuids = 2;
inline int DeviceDisconnectedFromProductEvent::device_uuids_size() const {
  return device_uuids_.size();
}
inline void DeviceDisconnectedFromProductEvent::clear_device_uuids() {
  device_uuids_.Clear();
}
inline const ::std::string& DeviceDisconnectedFromProductEvent::device_uuids(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
  return device_uuids_.Get(index);
}
inline ::std::string* DeviceDisconnectedFromProductEvent::mutable_device_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
  return device_uuids_.Mutable(index);
}
inline void DeviceDisconnectedFromProductEvent::set_device_uuids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
  device_uuids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DeviceDisconnectedFromProductEvent::set_device_uuids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
  device_uuids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DeviceDisconnectedFromProductEvent::set_device_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  device_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
}
inline void DeviceDisconnectedFromProductEvent::set_device_uuids(int index, const char* value, size_t size) {
  device_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
}
inline ::std::string* DeviceDisconnectedFromProductEvent::add_device_uuids() {
  // @@protoc_insertion_point(field_add_mutable:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
  return device_uuids_.Add();
}
inline void DeviceDisconnectedFromProductEvent::add_device_uuids(const ::std::string& value) {
  device_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
}
#if LANG_CXX11
inline void DeviceDisconnectedFromProductEvent::add_device_uuids(::std::string&& value) {
  device_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
}
#endif
inline void DeviceDisconnectedFromProductEvent::add_device_uuids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  device_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
}
inline void DeviceDisconnectedFromProductEvent::add_device_uuids(const char* value, size_t size) {
  device_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DeviceDisconnectedFromProductEvent::device_uuids() const {
  // @@protoc_insertion_point(field_list:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
  return device_uuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DeviceDisconnectedFromProductEvent::mutable_device_uuids() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.DeviceDisconnectedFromProductEvent.device_uuids)
  return &device_uuids_;
}

// repeated .logi.proto.DeviceEdge device_connection = 3;
inline int DeviceDisconnectedFromProductEvent::device_connection_size() const {
  return device_connection_.size();
}
inline ::logi::proto::DeviceEdge* DeviceDisconnectedFromProductEvent::mutable_device_connection(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.DeviceDisconnectedFromProductEvent.device_connection)
  return device_connection_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >*
DeviceDisconnectedFromProductEvent::mutable_device_connection() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.DeviceDisconnectedFromProductEvent.device_connection)
  return &device_connection_;
}
inline const ::logi::proto::DeviceEdge& DeviceDisconnectedFromProductEvent::device_connection(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.DeviceDisconnectedFromProductEvent.device_connection)
  return device_connection_.Get(index);
}
inline ::logi::proto::DeviceEdge* DeviceDisconnectedFromProductEvent::add_device_connection() {
  // @@protoc_insertion_point(field_add:logi.proto.DeviceDisconnectedFromProductEvent.device_connection)
  return device_connection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::DeviceEdge >&
DeviceDisconnectedFromProductEvent::device_connection() const {
  // @@protoc_insertion_point(field_list:logi.proto.DeviceDisconnectedFromProductEvent.device_connection)
  return device_connection_;
}

// -------------------------------------------------------------------

// DevicePropertyChangedEvent

// string product_uuid = 1;
inline void DevicePropertyChangedEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevicePropertyChangedEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.DevicePropertyChangedEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void DevicePropertyChangedEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.DevicePropertyChangedEvent.product_uuid)
}
#if LANG_CXX11
inline void DevicePropertyChangedEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.DevicePropertyChangedEvent.product_uuid)
}
#endif
inline void DevicePropertyChangedEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.DevicePropertyChangedEvent.product_uuid)
}
inline void DevicePropertyChangedEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DevicePropertyChangedEvent.product_uuid)
}
inline ::std::string* DevicePropertyChangedEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.DevicePropertyChangedEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevicePropertyChangedEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.DevicePropertyChangedEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevicePropertyChangedEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.DevicePropertyChangedEvent.product_uuid)
}

// string device_uuid = 2;
inline void DevicePropertyChangedEvent::clear_device_uuid() {
  device_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevicePropertyChangedEvent::device_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.DevicePropertyChangedEvent.device_uuid)
  return device_uuid_.GetNoArena();
}
inline void DevicePropertyChangedEvent::set_device_uuid(const ::std::string& value) {
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.DevicePropertyChangedEvent.device_uuid)
}
#if LANG_CXX11
inline void DevicePropertyChangedEvent::set_device_uuid(::std::string&& value) {
  
  device_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.DevicePropertyChangedEvent.device_uuid)
}
#endif
inline void DevicePropertyChangedEvent::set_device_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.DevicePropertyChangedEvent.device_uuid)
}
inline void DevicePropertyChangedEvent::set_device_uuid(const char* value, size_t size) {
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DevicePropertyChangedEvent.device_uuid)
}
inline ::std::string* DevicePropertyChangedEvent::mutable_device_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.DevicePropertyChangedEvent.device_uuid)
  return device_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevicePropertyChangedEvent::release_device_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.DevicePropertyChangedEvent.device_uuid)
  
  return device_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevicePropertyChangedEvent::set_allocated_device_uuid(::std::string* device_uuid) {
  if (device_uuid != NULL) {
    
  } else {
    
  }
  device_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.DevicePropertyChangedEvent.device_uuid)
}

// .logi.proto.Device.Property property_key = 3;
inline void DevicePropertyChangedEvent::clear_property_key() {
  property_key_ = 0;
}
inline ::logi::proto::Device_Property DevicePropertyChangedEvent::property_key() const {
  // @@protoc_insertion_point(field_get:logi.proto.DevicePropertyChangedEvent.property_key)
  return static_cast< ::logi::proto::Device_Property >(property_key_);
}
inline void DevicePropertyChangedEvent::set_property_key(::logi::proto::Device_Property value) {
  
  property_key_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.DevicePropertyChangedEvent.property_key)
}

// string property_value = 4;
inline void DevicePropertyChangedEvent::clear_property_value() {
  property_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DevicePropertyChangedEvent::property_value() const {
  // @@protoc_insertion_point(field_get:logi.proto.DevicePropertyChangedEvent.property_value)
  return property_value_.GetNoArena();
}
inline void DevicePropertyChangedEvent::set_property_value(const ::std::string& value) {
  
  property_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.DevicePropertyChangedEvent.property_value)
}
#if LANG_CXX11
inline void DevicePropertyChangedEvent::set_property_value(::std::string&& value) {
  
  property_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.DevicePropertyChangedEvent.property_value)
}
#endif
inline void DevicePropertyChangedEvent::set_property_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.DevicePropertyChangedEvent.property_value)
}
inline void DevicePropertyChangedEvent::set_property_value(const char* value, size_t size) {
  
  property_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.DevicePropertyChangedEvent.property_value)
}
inline ::std::string* DevicePropertyChangedEvent::mutable_property_value() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.DevicePropertyChangedEvent.property_value)
  return property_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DevicePropertyChangedEvent::release_property_value() {
  // @@protoc_insertion_point(field_release:logi.proto.DevicePropertyChangedEvent.property_value)
  
  return property_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DevicePropertyChangedEvent::set_allocated_property_value(::std::string* property_value) {
  if (property_value != NULL) {
    
  } else {
    
  }
  property_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_value);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.DevicePropertyChangedEvent.property_value)
}

// bool is_removed = 5;
inline void DevicePropertyChangedEvent::clear_is_removed() {
  is_removed_ = false;
}
inline bool DevicePropertyChangedEvent::is_removed() const {
  // @@protoc_insertion_point(field_get:logi.proto.DevicePropertyChangedEvent.is_removed)
  return is_removed_;
}
inline void DevicePropertyChangedEvent::set_is_removed(bool value) {
  
  is_removed_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.DevicePropertyChangedEvent.is_removed)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProductConfigurationChangedEvent

// string product_uuid = 1;
inline void ProductConfigurationChangedEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductConfigurationChangedEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductConfigurationChangedEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void ProductConfigurationChangedEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.ProductConfigurationChangedEvent.product_uuid)
}
#if LANG_CXX11
inline void ProductConfigurationChangedEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.ProductConfigurationChangedEvent.product_uuid)
}
#endif
inline void ProductConfigurationChangedEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.ProductConfigurationChangedEvent.product_uuid)
}
inline void ProductConfigurationChangedEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.ProductConfigurationChangedEvent.product_uuid)
}
inline ::std::string* ProductConfigurationChangedEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductConfigurationChangedEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductConfigurationChangedEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductConfigurationChangedEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductConfigurationChangedEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.ProductConfigurationChangedEvent.product_uuid)
}

// map<uint32, uint32> expected_device_count = 2;
inline int ProductConfigurationChangedEvent::expected_device_count_size() const {
  return expected_device_count_.size();
}
inline void ProductConfigurationChangedEvent::clear_expected_device_count() {
  expected_device_count_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
ProductConfigurationChangedEvent::expected_device_count() const {
  // @@protoc_insertion_point(field_map:logi.proto.ProductConfigurationChangedEvent.expected_device_count)
  return expected_device_count_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
ProductConfigurationChangedEvent::mutable_expected_device_count() {
  // @@protoc_insertion_point(field_mutable_map:logi.proto.ProductConfigurationChangedEvent.expected_device_count)
  return expected_device_count_.MutableMap();
}

// map<uint32, uint32> actual_device_count = 3;
inline int ProductConfigurationChangedEvent::actual_device_count_size() const {
  return actual_device_count_.size();
}
inline void ProductConfigurationChangedEvent::clear_actual_device_count() {
  actual_device_count_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
ProductConfigurationChangedEvent::actual_device_count() const {
  // @@protoc_insertion_point(field_map:logi.proto.ProductConfigurationChangedEvent.actual_device_count)
  return actual_device_count_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
ProductConfigurationChangedEvent::mutable_actual_device_count() {
  // @@protoc_insertion_point(field_mutable_map:logi.proto.ProductConfigurationChangedEvent.actual_device_count)
  return actual_device_count_.MutableMap();
}

// repeated .logi.proto.Device forgotten_devices = 4;
inline int ProductConfigurationChangedEvent::forgotten_devices_size() const {
  return forgotten_devices_.size();
}
inline ::logi::proto::Device* ProductConfigurationChangedEvent::mutable_forgotten_devices(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductConfigurationChangedEvent.forgotten_devices)
  return forgotten_devices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >*
ProductConfigurationChangedEvent::mutable_forgotten_devices() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.ProductConfigurationChangedEvent.forgotten_devices)
  return &forgotten_devices_;
}
inline const ::logi::proto::Device& ProductConfigurationChangedEvent::forgotten_devices(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductConfigurationChangedEvent.forgotten_devices)
  return forgotten_devices_.Get(index);
}
inline ::logi::proto::Device* ProductConfigurationChangedEvent::add_forgotten_devices() {
  // @@protoc_insertion_point(field_add:logi.proto.ProductConfigurationChangedEvent.forgotten_devices)
  return forgotten_devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Device >&
ProductConfigurationChangedEvent::forgotten_devices() const {
  // @@protoc_insertion_point(field_list:logi.proto.ProductConfigurationChangedEvent.forgotten_devices)
  return forgotten_devices_;
}

// -------------------------------------------------------------------

// ProductErrorEvent

// string product_uuid = 1;
inline void ProductErrorEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductErrorEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductErrorEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void ProductErrorEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.ProductErrorEvent.product_uuid)
}
#if LANG_CXX11
inline void ProductErrorEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.ProductErrorEvent.product_uuid)
}
#endif
inline void ProductErrorEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.ProductErrorEvent.product_uuid)
}
inline void ProductErrorEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.ProductErrorEvent.product_uuid)
}
inline ::std::string* ProductErrorEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductErrorEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductErrorEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductErrorEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductErrorEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.ProductErrorEvent.product_uuid)
}

// string device_uuid = 2;
inline void ProductErrorEvent::clear_device_uuid() {
  device_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductErrorEvent::device_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductErrorEvent.device_uuid)
  return device_uuid_.GetNoArena();
}
inline void ProductErrorEvent::set_device_uuid(const ::std::string& value) {
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.ProductErrorEvent.device_uuid)
}
#if LANG_CXX11
inline void ProductErrorEvent::set_device_uuid(::std::string&& value) {
  
  device_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.ProductErrorEvent.device_uuid)
}
#endif
inline void ProductErrorEvent::set_device_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.ProductErrorEvent.device_uuid)
}
inline void ProductErrorEvent::set_device_uuid(const char* value, size_t size) {
  
  device_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.ProductErrorEvent.device_uuid)
}
inline ::std::string* ProductErrorEvent::mutable_device_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductErrorEvent.device_uuid)
  return device_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductErrorEvent::release_device_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductErrorEvent.device_uuid)
  
  return device_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductErrorEvent::set_allocated_device_uuid(::std::string* device_uuid) {
  if (device_uuid != NULL) {
    
  } else {
    
  }
  device_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.ProductErrorEvent.device_uuid)
}

// repeated .logi.proto.Error errors = 3;
inline int ProductErrorEvent::errors_size() const {
  return errors_.size();
}
inline ::logi::proto::Error* ProductErrorEvent::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductErrorEvent.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
ProductErrorEvent::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.ProductErrorEvent.errors)
  return &errors_;
}
inline const ::logi::proto::Error& ProductErrorEvent::errors(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductErrorEvent.errors)
  return errors_.Get(index);
}
inline ::logi::proto::Error* ProductErrorEvent::add_errors() {
  // @@protoc_insertion_point(field_add:logi.proto.ProductErrorEvent.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
ProductErrorEvent::errors() const {
  // @@protoc_insertion_point(field_list:logi.proto.ProductErrorEvent.errors)
  return errors_;
}

// -------------------------------------------------------------------

// ProductEvent

// .logi.proto.ProductAvailableEvent product_available_event = 1;
inline bool ProductEvent::has_product_available_event() const {
  return event_case() == kProductAvailableEvent;
}
inline void ProductEvent::set_has_product_available_event() {
  _oneof_case_[0] = kProductAvailableEvent;
}
inline void ProductEvent::clear_product_available_event() {
  if (has_product_available_event()) {
    delete event_.product_available_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::ProductAvailableEvent& ProductEvent::_internal_product_available_event() const {
  return *event_.product_available_event_;
}
inline ::logi::proto::ProductAvailableEvent* ProductEvent::release_product_available_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductEvent.product_available_event)
  if (has_product_available_event()) {
    clear_has_event();
      ::logi::proto::ProductAvailableEvent* temp = event_.product_available_event_;
    event_.product_available_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ProductAvailableEvent& ProductEvent::product_available_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductEvent.product_available_event)
  return has_product_available_event()
      ? *event_.product_available_event_
      : *reinterpret_cast< ::logi::proto::ProductAvailableEvent*>(&::logi::proto::_ProductAvailableEvent_default_instance_);
}
inline ::logi::proto::ProductAvailableEvent* ProductEvent::mutable_product_available_event() {
  if (!has_product_available_event()) {
    clear_event();
    set_has_product_available_event();
    event_.product_available_event_ = CreateMaybeMessage< ::logi::proto::ProductAvailableEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductEvent.product_available_event)
  return event_.product_available_event_;
}

// .logi.proto.ProductUnavailableEvent product_unavailable_event = 2;
inline bool ProductEvent::has_product_unavailable_event() const {
  return event_case() == kProductUnavailableEvent;
}
inline void ProductEvent::set_has_product_unavailable_event() {
  _oneof_case_[0] = kProductUnavailableEvent;
}
inline void ProductEvent::clear_product_unavailable_event() {
  if (has_product_unavailable_event()) {
    delete event_.product_unavailable_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::ProductUnavailableEvent& ProductEvent::_internal_product_unavailable_event() const {
  return *event_.product_unavailable_event_;
}
inline ::logi::proto::ProductUnavailableEvent* ProductEvent::release_product_unavailable_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductEvent.product_unavailable_event)
  if (has_product_unavailable_event()) {
    clear_has_event();
      ::logi::proto::ProductUnavailableEvent* temp = event_.product_unavailable_event_;
    event_.product_unavailable_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ProductUnavailableEvent& ProductEvent::product_unavailable_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductEvent.product_unavailable_event)
  return has_product_unavailable_event()
      ? *event_.product_unavailable_event_
      : *reinterpret_cast< ::logi::proto::ProductUnavailableEvent*>(&::logi::proto::_ProductUnavailableEvent_default_instance_);
}
inline ::logi::proto::ProductUnavailableEvent* ProductEvent::mutable_product_unavailable_event() {
  if (!has_product_unavailable_event()) {
    clear_event();
    set_has_product_unavailable_event();
    event_.product_unavailable_event_ = CreateMaybeMessage< ::logi::proto::ProductUnavailableEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductEvent.product_unavailable_event)
  return event_.product_unavailable_event_;
}

// .logi.proto.DeviceConnectedToProductEvent device_connected_to_product_event = 3;
inline bool ProductEvent::has_device_connected_to_product_event() const {
  return event_case() == kDeviceConnectedToProductEvent;
}
inline void ProductEvent::set_has_device_connected_to_product_event() {
  _oneof_case_[0] = kDeviceConnectedToProductEvent;
}
inline void ProductEvent::clear_device_connected_to_product_event() {
  if (has_device_connected_to_product_event()) {
    delete event_.device_connected_to_product_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::DeviceConnectedToProductEvent& ProductEvent::_internal_device_connected_to_product_event() const {
  return *event_.device_connected_to_product_event_;
}
inline ::logi::proto::DeviceConnectedToProductEvent* ProductEvent::release_device_connected_to_product_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductEvent.device_connected_to_product_event)
  if (has_device_connected_to_product_event()) {
    clear_has_event();
      ::logi::proto::DeviceConnectedToProductEvent* temp = event_.device_connected_to_product_event_;
    event_.device_connected_to_product_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::DeviceConnectedToProductEvent& ProductEvent::device_connected_to_product_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductEvent.device_connected_to_product_event)
  return has_device_connected_to_product_event()
      ? *event_.device_connected_to_product_event_
      : *reinterpret_cast< ::logi::proto::DeviceConnectedToProductEvent*>(&::logi::proto::_DeviceConnectedToProductEvent_default_instance_);
}
inline ::logi::proto::DeviceConnectedToProductEvent* ProductEvent::mutable_device_connected_to_product_event() {
  if (!has_device_connected_to_product_event()) {
    clear_event();
    set_has_device_connected_to_product_event();
    event_.device_connected_to_product_event_ = CreateMaybeMessage< ::logi::proto::DeviceConnectedToProductEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductEvent.device_connected_to_product_event)
  return event_.device_connected_to_product_event_;
}

// .logi.proto.DeviceDisconnectedFromProductEvent device_disconnected_from_product_event = 4;
inline bool ProductEvent::has_device_disconnected_from_product_event() const {
  return event_case() == kDeviceDisconnectedFromProductEvent;
}
inline void ProductEvent::set_has_device_disconnected_from_product_event() {
  _oneof_case_[0] = kDeviceDisconnectedFromProductEvent;
}
inline void ProductEvent::clear_device_disconnected_from_product_event() {
  if (has_device_disconnected_from_product_event()) {
    delete event_.device_disconnected_from_product_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::DeviceDisconnectedFromProductEvent& ProductEvent::_internal_device_disconnected_from_product_event() const {
  return *event_.device_disconnected_from_product_event_;
}
inline ::logi::proto::DeviceDisconnectedFromProductEvent* ProductEvent::release_device_disconnected_from_product_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductEvent.device_disconnected_from_product_event)
  if (has_device_disconnected_from_product_event()) {
    clear_has_event();
      ::logi::proto::DeviceDisconnectedFromProductEvent* temp = event_.device_disconnected_from_product_event_;
    event_.device_disconnected_from_product_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::DeviceDisconnectedFromProductEvent& ProductEvent::device_disconnected_from_product_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductEvent.device_disconnected_from_product_event)
  return has_device_disconnected_from_product_event()
      ? *event_.device_disconnected_from_product_event_
      : *reinterpret_cast< ::logi::proto::DeviceDisconnectedFromProductEvent*>(&::logi::proto::_DeviceDisconnectedFromProductEvent_default_instance_);
}
inline ::logi::proto::DeviceDisconnectedFromProductEvent* ProductEvent::mutable_device_disconnected_from_product_event() {
  if (!has_device_disconnected_from_product_event()) {
    clear_event();
    set_has_device_disconnected_from_product_event();
    event_.device_disconnected_from_product_event_ = CreateMaybeMessage< ::logi::proto::DeviceDisconnectedFromProductEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductEvent.device_disconnected_from_product_event)
  return event_.device_disconnected_from_product_event_;
}

// .logi.proto.ProductErrorEvent product_error_event = 5;
inline bool ProductEvent::has_product_error_event() const {
  return event_case() == kProductErrorEvent;
}
inline void ProductEvent::set_has_product_error_event() {
  _oneof_case_[0] = kProductErrorEvent;
}
inline void ProductEvent::clear_product_error_event() {
  if (has_product_error_event()) {
    delete event_.product_error_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::ProductErrorEvent& ProductEvent::_internal_product_error_event() const {
  return *event_.product_error_event_;
}
inline ::logi::proto::ProductErrorEvent* ProductEvent::release_product_error_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductEvent.product_error_event)
  if (has_product_error_event()) {
    clear_has_event();
      ::logi::proto::ProductErrorEvent* temp = event_.product_error_event_;
    event_.product_error_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ProductErrorEvent& ProductEvent::product_error_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductEvent.product_error_event)
  return has_product_error_event()
      ? *event_.product_error_event_
      : *reinterpret_cast< ::logi::proto::ProductErrorEvent*>(&::logi::proto::_ProductErrorEvent_default_instance_);
}
inline ::logi::proto::ProductErrorEvent* ProductEvent::mutable_product_error_event() {
  if (!has_product_error_event()) {
    clear_event();
    set_has_product_error_event();
    event_.product_error_event_ = CreateMaybeMessage< ::logi::proto::ProductErrorEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductEvent.product_error_event)
  return event_.product_error_event_;
}

// .logi.proto.DevicePropertyChangedEvent device_property_changed_event = 6;
inline bool ProductEvent::has_device_property_changed_event() const {
  return event_case() == kDevicePropertyChangedEvent;
}
inline void ProductEvent::set_has_device_property_changed_event() {
  _oneof_case_[0] = kDevicePropertyChangedEvent;
}
inline void ProductEvent::clear_device_property_changed_event() {
  if (has_device_property_changed_event()) {
    delete event_.device_property_changed_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::DevicePropertyChangedEvent& ProductEvent::_internal_device_property_changed_event() const {
  return *event_.device_property_changed_event_;
}
inline ::logi::proto::DevicePropertyChangedEvent* ProductEvent::release_device_property_changed_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductEvent.device_property_changed_event)
  if (has_device_property_changed_event()) {
    clear_has_event();
      ::logi::proto::DevicePropertyChangedEvent* temp = event_.device_property_changed_event_;
    event_.device_property_changed_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::DevicePropertyChangedEvent& ProductEvent::device_property_changed_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductEvent.device_property_changed_event)
  return has_device_property_changed_event()
      ? *event_.device_property_changed_event_
      : *reinterpret_cast< ::logi::proto::DevicePropertyChangedEvent*>(&::logi::proto::_DevicePropertyChangedEvent_default_instance_);
}
inline ::logi::proto::DevicePropertyChangedEvent* ProductEvent::mutable_device_property_changed_event() {
  if (!has_device_property_changed_event()) {
    clear_event();
    set_has_device_property_changed_event();
    event_.device_property_changed_event_ = CreateMaybeMessage< ::logi::proto::DevicePropertyChangedEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductEvent.device_property_changed_event)
  return event_.device_property_changed_event_;
}

// .logi.proto.ProductConfigurationChangedEvent product_configuration_changed_event = 7;
inline bool ProductEvent::has_product_configuration_changed_event() const {
  return event_case() == kProductConfigurationChangedEvent;
}
inline void ProductEvent::set_has_product_configuration_changed_event() {
  _oneof_case_[0] = kProductConfigurationChangedEvent;
}
inline void ProductEvent::clear_product_configuration_changed_event() {
  if (has_product_configuration_changed_event()) {
    delete event_.product_configuration_changed_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::ProductConfigurationChangedEvent& ProductEvent::_internal_product_configuration_changed_event() const {
  return *event_.product_configuration_changed_event_;
}
inline ::logi::proto::ProductConfigurationChangedEvent* ProductEvent::release_product_configuration_changed_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductEvent.product_configuration_changed_event)
  if (has_product_configuration_changed_event()) {
    clear_has_event();
      ::logi::proto::ProductConfigurationChangedEvent* temp = event_.product_configuration_changed_event_;
    event_.product_configuration_changed_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ProductConfigurationChangedEvent& ProductEvent::product_configuration_changed_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductEvent.product_configuration_changed_event)
  return has_product_configuration_changed_event()
      ? *event_.product_configuration_changed_event_
      : *reinterpret_cast< ::logi::proto::ProductConfigurationChangedEvent*>(&::logi::proto::_ProductConfigurationChangedEvent_default_instance_);
}
inline ::logi::proto::ProductConfigurationChangedEvent* ProductEvent::mutable_product_configuration_changed_event() {
  if (!has_product_configuration_changed_event()) {
    clear_event();
    set_has_product_configuration_changed_event();
    event_.product_configuration_changed_event_ = CreateMaybeMessage< ::logi::proto::ProductConfigurationChangedEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductEvent.product_configuration_changed_event)
  return event_.product_configuration_changed_event_;
}

// .logi.proto.ProductStateChangedEvent product_state_changed_event = 8;
inline bool ProductEvent::has_product_state_changed_event() const {
  return event_case() == kProductStateChangedEvent;
}
inline void ProductEvent::set_has_product_state_changed_event() {
  _oneof_case_[0] = kProductStateChangedEvent;
}
inline void ProductEvent::clear_product_state_changed_event() {
  if (has_product_state_changed_event()) {
    delete event_.product_state_changed_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::ProductStateChangedEvent& ProductEvent::_internal_product_state_changed_event() const {
  return *event_.product_state_changed_event_;
}
inline ::logi::proto::ProductStateChangedEvent* ProductEvent::release_product_state_changed_event() {
  // @@protoc_insertion_point(field_release:logi.proto.ProductEvent.product_state_changed_event)
  if (has_product_state_changed_event()) {
    clear_has_event();
      ::logi::proto::ProductStateChangedEvent* temp = event_.product_state_changed_event_;
    event_.product_state_changed_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ProductStateChangedEvent& ProductEvent::product_state_changed_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.ProductEvent.product_state_changed_event)
  return has_product_state_changed_event()
      ? *event_.product_state_changed_event_
      : *reinterpret_cast< ::logi::proto::ProductStateChangedEvent*>(&::logi::proto::_ProductStateChangedEvent_default_instance_);
}
inline ::logi::proto::ProductStateChangedEvent* ProductEvent::mutable_product_state_changed_event() {
  if (!has_product_state_changed_event()) {
    clear_event();
    set_has_product_state_changed_event();
    event_.product_state_changed_event_ = CreateMaybeMessage< ::logi::proto::ProductStateChangedEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.ProductEvent.product_state_changed_event)
  return event_.product_state_changed_event_;
}

inline bool ProductEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void ProductEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline ProductEvent::EventCase ProductEvent::event_case() const {
  return ProductEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_product_5fstate_5fevents_2eproto
