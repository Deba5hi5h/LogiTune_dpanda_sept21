// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_device_structures.proto

#include "cloud_device_structures.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cloud_5fdevice_5fstructures_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fdevice_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LRProductSnapshot_ActualDeviceCountEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fdevice_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cloud_5fdevice_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LRProductUpdateSnapshot;
}  // namespace protobuf_cloud_5fdevice_5fstructures_2eproto
namespace protobuf_product_5fstate_5fstructures_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_product_5fstate_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Product;
}  // namespace protobuf_product_5fstate_5fstructures_2eproto
namespace logi {
namespace proto {
class LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse>
      _instance;
} _LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse_default_instance_;
class LRProductSnapshot_ActualDeviceCountEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LRProductSnapshot_ActualDeviceCountEntry_DoNotUse>
      _instance;
} _LRProductSnapshot_ActualDeviceCountEntry_DoNotUse_default_instance_;
class LRProductSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LRProductSnapshot>
      _instance;
} _LRProductSnapshot_default_instance_;
class LRProductUpdateSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LRProductUpdateSnapshot>
      _instance;
} _LRProductUpdateSnapshot_default_instance_;
}  // namespace proto
}  // namespace logi
namespace protobuf_cloud_5fdevice_5fstructures_2eproto {
static void InitDefaultsLRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse_default_instance_;
    new (ptr) ::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse();
  }
  ::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse}, {}};

static void InitDefaultsLRProductSnapshot_ActualDeviceCountEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LRProductSnapshot_ActualDeviceCountEntry_DoNotUse_default_instance_;
    new (ptr) ::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse();
  }
  ::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LRProductSnapshot_ActualDeviceCountEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLRProductSnapshot_ActualDeviceCountEntry_DoNotUse}, {}};

static void InitDefaultsLRProductSnapshot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LRProductSnapshot_default_instance_;
    new (ptr) ::logi::proto::LRProductSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::LRProductSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_LRProductSnapshot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLRProductSnapshot}, {
      &protobuf_product_5fstate_5fstructures_2eproto::scc_info_Product.base,
      &protobuf_cloud_5fdevice_5fstructures_2eproto::scc_info_LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse.base,
      &protobuf_cloud_5fdevice_5fstructures_2eproto::scc_info_LRProductSnapshot_ActualDeviceCountEntry_DoNotUse.base,
      &protobuf_cloud_5fdevice_5fstructures_2eproto::scc_info_LRProductUpdateSnapshot.base,}};

static void InitDefaultsLRProductUpdateSnapshot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LRProductUpdateSnapshot_default_instance_;
    new (ptr) ::logi::proto::LRProductUpdateSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::LRProductUpdateSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LRProductUpdateSnapshot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLRProductUpdateSnapshot}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LRProductSnapshot_ActualDeviceCountEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LRProductSnapshot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LRProductUpdateSnapshot.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot, product_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot, expected_device_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot, actual_device_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot, latest_firmware_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot, latest_firmware_published_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductSnapshot, update_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductUpdateSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductUpdateSnapshot, percentage_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductUpdateSnapshot, time_remaining_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LRProductUpdateSnapshot, error_code_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse)},
  { 9, 16, sizeof(::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse)},
  { 18, -1, sizeof(::logi::proto::LRProductSnapshot)},
  { 29, -1, sizeof(::logi::proto::LRProductUpdateSnapshot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LRProductSnapshot_ActualDeviceCountEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LRProductSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LRProductUpdateSnapshot_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cloud_device_structures.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035cloud_device_structures.proto\022\nlogi.pr"
      "oto\032#cloud_provisioning_structures.proto"
      "\032\036product_state_structures.proto\"\333\003\n\021LRP"
      "roductSnapshot\022$\n\007product\030\001 \001(\0132\023.logi.p"
      "roto.Product\022U\n\025expected_device_count\030\002 "
      "\003(\01326.logi.proto.LRProductSnapshot.Expec"
      "tedDeviceCountEntry\022Q\n\023actual_device_cou"
      "nt\030\003 \003(\01324.logi.proto.LRProductSnapshot."
      "ActualDeviceCountEntry\022\027\n\017latest_firmwar"
      "e\030\004 \001(\t\022+\n#latest_firmware_published_tim"
      "estamp\030\005 \001(\t\022:\n\rupdate_status\030\006 \001(\0132#.lo"
      "gi.proto.LRProductUpdateSnapshot\032:\n\030Expe"
      "ctedDeviceCountEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005val"
      "ue\030\002 \001(\r:\0028\001\0328\n\026ActualDeviceCountEntry\022\013"
      "\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"j\n\027LRProd"
      "uctUpdateSnapshot\022\033\n\023percentage_progress"
      "\030\001 \001(\002\022\036\n\026time_remaining_seconds\030\002 \001(\r\022\022"
      "\n\nerror_code\030\003 \001(\rB.\n,com.logitech.vc.ra"
      "iden.proto.device.messagesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 754);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cloud_device_structures.proto", &protobuf_RegisterTypes);
  ::protobuf_cloud_5fprovisioning_5fstructures_2eproto::AddDescriptors();
  ::protobuf_product_5fstate_5fstructures_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cloud_5fdevice_5fstructures_2eproto
namespace logi {
namespace proto {

// ===================================================================

LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse() {}
LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse::MergeFrom(const LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cloud_5fdevice_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fdevice_5fstructures_2eproto::file_level_metadata[0];
}
void LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

LRProductSnapshot_ActualDeviceCountEntry_DoNotUse::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse() {}
LRProductSnapshot_ActualDeviceCountEntry_DoNotUse::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void LRProductSnapshot_ActualDeviceCountEntry_DoNotUse::MergeFrom(const LRProductSnapshot_ActualDeviceCountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata LRProductSnapshot_ActualDeviceCountEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cloud_5fdevice_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fdevice_5fstructures_2eproto::file_level_metadata[1];
}
void LRProductSnapshot_ActualDeviceCountEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void LRProductSnapshot::InitAsDefaultInstance() {
  ::logi::proto::_LRProductSnapshot_default_instance_._instance.get_mutable()->product_ = const_cast< ::logi::proto::Product*>(
      ::logi::proto::Product::internal_default_instance());
  ::logi::proto::_LRProductSnapshot_default_instance_._instance.get_mutable()->update_status_ = const_cast< ::logi::proto::LRProductUpdateSnapshot*>(
      ::logi::proto::LRProductUpdateSnapshot::internal_default_instance());
}
void LRProductSnapshot::clear_product() {
  if (GetArenaNoVirtual() == NULL && product_ != NULL) {
    delete product_;
  }
  product_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRProductSnapshot::kProductFieldNumber;
const int LRProductSnapshot::kExpectedDeviceCountFieldNumber;
const int LRProductSnapshot::kActualDeviceCountFieldNumber;
const int LRProductSnapshot::kLatestFirmwareFieldNumber;
const int LRProductSnapshot::kLatestFirmwarePublishedTimestampFieldNumber;
const int LRProductSnapshot::kUpdateStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRProductSnapshot::LRProductSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cloud_5fdevice_5fstructures_2eproto::scc_info_LRProductSnapshot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.LRProductSnapshot)
}
LRProductSnapshot::LRProductSnapshot(const LRProductSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expected_device_count_.MergeFrom(from.expected_device_count_);
  actual_device_count_.MergeFrom(from.actual_device_count_);
  latest_firmware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latest_firmware().size() > 0) {
    latest_firmware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_);
  }
  latest_firmware_published_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latest_firmware_published_timestamp().size() > 0) {
    latest_firmware_published_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_published_timestamp_);
  }
  if (from.has_product()) {
    product_ = new ::logi::proto::Product(*from.product_);
  } else {
    product_ = NULL;
  }
  if (from.has_update_status()) {
    update_status_ = new ::logi::proto::LRProductUpdateSnapshot(*from.update_status_);
  } else {
    update_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.LRProductSnapshot)
}

void LRProductSnapshot::SharedCtor() {
  latest_firmware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_published_timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&product_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_status_) -
      reinterpret_cast<char*>(&product_)) + sizeof(update_status_));
}

LRProductSnapshot::~LRProductSnapshot() {
  // @@protoc_insertion_point(destructor:logi.proto.LRProductSnapshot)
  SharedDtor();
}

void LRProductSnapshot::SharedDtor() {
  latest_firmware_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_published_timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete product_;
  if (this != internal_default_instance()) delete update_status_;
}

void LRProductSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LRProductSnapshot::descriptor() {
  ::protobuf_cloud_5fdevice_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fdevice_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LRProductSnapshot& LRProductSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cloud_5fdevice_5fstructures_2eproto::scc_info_LRProductSnapshot.base);
  return *internal_default_instance();
}


void LRProductSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.LRProductSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expected_device_count_.Clear();
  actual_device_count_.Clear();
  latest_firmware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_firmware_published_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && product_ != NULL) {
    delete product_;
  }
  product_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_status_ != NULL) {
    delete update_status_;
  }
  update_status_ = NULL;
  _internal_metadata_.Clear();
}

bool LRProductSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.LRProductSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.Product product = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> expected_device_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&expected_device_count_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> actual_device_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          LRProductSnapshot_ActualDeviceCountEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              LRProductSnapshot_ActualDeviceCountEntry_DoNotUse,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&actual_device_count_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string latest_firmware = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_firmware()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latest_firmware().data(), static_cast<int>(this->latest_firmware().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.LRProductSnapshot.latest_firmware"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string latest_firmware_published_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_firmware_published_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latest_firmware_published_timestamp().data(), static_cast<int>(this->latest_firmware_published_timestamp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.LRProductSnapshot.latest_firmware_published_timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.LRProductUpdateSnapshot update_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.LRProductSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.LRProductSnapshot)
  return false;
#undef DO_
}

void LRProductSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.LRProductSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.Product product = 1;
  if (this->has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_product(), output);
  }

  // map<uint32, uint32> expected_device_count = 2;
  if (!this->expected_device_count().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->expected_device_count().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->expected_device_count().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->expected_device_count().begin();
          it != this->expected_device_count().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expected_device_count_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::std::unique_ptr<LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->expected_device_count().begin();
          it != this->expected_device_count().end(); ++it) {
        entry.reset(expected_device_count_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // map<uint32, uint32> actual_device_count = 3;
  if (!this->actual_device_count().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->actual_device_count().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->actual_device_count().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->actual_device_count().begin();
          it != this->actual_device_count().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LRProductSnapshot_ActualDeviceCountEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(actual_device_count_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::std::unique_ptr<LRProductSnapshot_ActualDeviceCountEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->actual_device_count().begin();
          it != this->actual_device_count().end(); ++it) {
        entry.reset(actual_device_count_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // string latest_firmware = 4;
  if (this->latest_firmware().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware().data(), static_cast<int>(this->latest_firmware().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.LRProductSnapshot.latest_firmware");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->latest_firmware(), output);
  }

  // string latest_firmware_published_timestamp = 5;
  if (this->latest_firmware_published_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware_published_timestamp().data(), static_cast<int>(this->latest_firmware_published_timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.LRProductSnapshot.latest_firmware_published_timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->latest_firmware_published_timestamp(), output);
  }

  // .logi.proto.LRProductUpdateSnapshot update_status = 6;
  if (this->has_update_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_update_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.LRProductSnapshot)
}

::google::protobuf::uint8* LRProductSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.LRProductSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.Product product = 1;
  if (this->has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_product(), deterministic, target);
  }

  // map<uint32, uint32> expected_device_count = 2;
  if (!this->expected_device_count().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->expected_device_count().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->expected_device_count().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->expected_device_count().begin();
          it != this->expected_device_count().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(expected_device_count_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->expected_device_count().begin();
          it != this->expected_device_count().end(); ++it) {
        entry.reset(expected_device_count_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, uint32> actual_device_count = 3;
  if (!this->actual_device_count().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->actual_device_count().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->actual_device_count().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->actual_device_count().begin();
          it != this->actual_device_count().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LRProductSnapshot_ActualDeviceCountEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(actual_device_count_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<LRProductSnapshot_ActualDeviceCountEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->actual_device_count().begin();
          it != this->actual_device_count().end(); ++it) {
        entry.reset(actual_device_count_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // string latest_firmware = 4;
  if (this->latest_firmware().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware().data(), static_cast<int>(this->latest_firmware().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.LRProductSnapshot.latest_firmware");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->latest_firmware(), target);
  }

  // string latest_firmware_published_timestamp = 5;
  if (this->latest_firmware_published_timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware_published_timestamp().data(), static_cast<int>(this->latest_firmware_published_timestamp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.LRProductSnapshot.latest_firmware_published_timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->latest_firmware_published_timestamp(), target);
  }

  // .logi.proto.LRProductUpdateSnapshot update_status = 6;
  if (this->has_update_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_update_status(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.LRProductSnapshot)
  return target;
}

size_t LRProductSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.LRProductSnapshot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> expected_device_count = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->expected_device_count_size());
  {
    ::std::unique_ptr<LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->expected_device_count().begin();
        it != this->expected_device_count().end(); ++it) {
      entry.reset(expected_device_count_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, uint32> actual_device_count = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->actual_device_count_size());
  {
    ::std::unique_ptr<LRProductSnapshot_ActualDeviceCountEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->actual_device_count().begin();
        it != this->actual_device_count().end(); ++it) {
      entry.reset(actual_device_count_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string latest_firmware = 4;
  if (this->latest_firmware().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latest_firmware());
  }

  // string latest_firmware_published_timestamp = 5;
  if (this->latest_firmware_published_timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latest_firmware_published_timestamp());
  }

  // .logi.proto.Product product = 1;
  if (this->has_product()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *product_);
  }

  // .logi.proto.LRProductUpdateSnapshot update_status = 6;
  if (this->has_update_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LRProductSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.LRProductSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const LRProductSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LRProductSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.LRProductSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.LRProductSnapshot)
    MergeFrom(*source);
  }
}

void LRProductSnapshot::MergeFrom(const LRProductSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.LRProductSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expected_device_count_.MergeFrom(from.expected_device_count_);
  actual_device_count_.MergeFrom(from.actual_device_count_);
  if (from.latest_firmware().size() > 0) {

    latest_firmware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_);
  }
  if (from.latest_firmware_published_timestamp().size() > 0) {

    latest_firmware_published_timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_published_timestamp_);
  }
  if (from.has_product()) {
    mutable_product()->::logi::proto::Product::MergeFrom(from.product());
  }
  if (from.has_update_status()) {
    mutable_update_status()->::logi::proto::LRProductUpdateSnapshot::MergeFrom(from.update_status());
  }
}

void LRProductSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.LRProductSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRProductSnapshot::CopyFrom(const LRProductSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.LRProductSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRProductSnapshot::IsInitialized() const {
  return true;
}

void LRProductSnapshot::Swap(LRProductSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRProductSnapshot::InternalSwap(LRProductSnapshot* other) {
  using std::swap;
  expected_device_count_.Swap(&other->expected_device_count_);
  actual_device_count_.Swap(&other->actual_device_count_);
  latest_firmware_.Swap(&other->latest_firmware_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  latest_firmware_published_timestamp_.Swap(&other->latest_firmware_published_timestamp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(product_, other->product_);
  swap(update_status_, other->update_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LRProductSnapshot::GetMetadata() const {
  protobuf_cloud_5fdevice_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fdevice_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LRProductUpdateSnapshot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LRProductUpdateSnapshot::kPercentageProgressFieldNumber;
const int LRProductUpdateSnapshot::kTimeRemainingSecondsFieldNumber;
const int LRProductUpdateSnapshot::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LRProductUpdateSnapshot::LRProductUpdateSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cloud_5fdevice_5fstructures_2eproto::scc_info_LRProductUpdateSnapshot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.LRProductUpdateSnapshot)
}
LRProductUpdateSnapshot::LRProductUpdateSnapshot(const LRProductUpdateSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&percentage_progress_, &from.percentage_progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&percentage_progress_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:logi.proto.LRProductUpdateSnapshot)
}

void LRProductUpdateSnapshot::SharedCtor() {
  ::memset(&percentage_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&percentage_progress_)) + sizeof(error_code_));
}

LRProductUpdateSnapshot::~LRProductUpdateSnapshot() {
  // @@protoc_insertion_point(destructor:logi.proto.LRProductUpdateSnapshot)
  SharedDtor();
}

void LRProductUpdateSnapshot::SharedDtor() {
}

void LRProductUpdateSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LRProductUpdateSnapshot::descriptor() {
  ::protobuf_cloud_5fdevice_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fdevice_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LRProductUpdateSnapshot& LRProductUpdateSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cloud_5fdevice_5fstructures_2eproto::scc_info_LRProductUpdateSnapshot.base);
  return *internal_default_instance();
}


void LRProductUpdateSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.LRProductUpdateSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&percentage_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&percentage_progress_)) + sizeof(error_code_));
  _internal_metadata_.Clear();
}

bool LRProductUpdateSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.LRProductUpdateSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float percentage_progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percentage_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_remaining_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remaining_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.LRProductUpdateSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.LRProductUpdateSnapshot)
  return false;
#undef DO_
}

void LRProductUpdateSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.LRProductUpdateSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float percentage_progress = 1;
  if (this->percentage_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->percentage_progress(), output);
  }

  // uint32 time_remaining_seconds = 2;
  if (this->time_remaining_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_remaining_seconds(), output);
  }

  // uint32 error_code = 3;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->error_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.LRProductUpdateSnapshot)
}

::google::protobuf::uint8* LRProductUpdateSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.LRProductUpdateSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float percentage_progress = 1;
  if (this->percentage_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->percentage_progress(), target);
  }

  // uint32 time_remaining_seconds = 2;
  if (this->time_remaining_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_remaining_seconds(), target);
  }

  // uint32 error_code = 3;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->error_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.LRProductUpdateSnapshot)
  return target;
}

size_t LRProductUpdateSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.LRProductUpdateSnapshot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float percentage_progress = 1;
  if (this->percentage_progress() != 0) {
    total_size += 1 + 4;
  }

  // uint32 time_remaining_seconds = 2;
  if (this->time_remaining_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_remaining_seconds());
  }

  // uint32 error_code = 3;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LRProductUpdateSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.LRProductUpdateSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const LRProductUpdateSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LRProductUpdateSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.LRProductUpdateSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.LRProductUpdateSnapshot)
    MergeFrom(*source);
  }
}

void LRProductUpdateSnapshot::MergeFrom(const LRProductUpdateSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.LRProductUpdateSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.percentage_progress() != 0) {
    set_percentage_progress(from.percentage_progress());
  }
  if (from.time_remaining_seconds() != 0) {
    set_time_remaining_seconds(from.time_remaining_seconds());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void LRProductUpdateSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.LRProductUpdateSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRProductUpdateSnapshot::CopyFrom(const LRProductUpdateSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.LRProductUpdateSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRProductUpdateSnapshot::IsInitialized() const {
  return true;
}

void LRProductUpdateSnapshot::Swap(LRProductUpdateSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LRProductUpdateSnapshot::InternalSwap(LRProductUpdateSnapshot* other) {
  using std::swap;
  swap(percentage_progress_, other->percentage_progress_);
  swap(time_remaining_seconds_, other->time_remaining_seconds_);
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LRProductUpdateSnapshot::GetMetadata() const {
  protobuf_cloud_5fdevice_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cloud_5fdevice_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse* Arena::CreateMaybeMessage< ::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LRProductSnapshot_ExpectedDeviceCountEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse* Arena::CreateMaybeMessage< ::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LRProductSnapshot_ActualDeviceCountEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LRProductSnapshot* Arena::CreateMaybeMessage< ::logi::proto::LRProductSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LRProductSnapshot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LRProductUpdateSnapshot* Arena::CreateMaybeMessage< ::logi::proto::LRProductUpdateSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LRProductUpdateSnapshot >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
