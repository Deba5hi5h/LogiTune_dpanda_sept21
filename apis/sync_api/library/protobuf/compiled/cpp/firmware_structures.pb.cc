// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firmware_structures.proto

#include "firmware_structures.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace logi {
namespace proto {
class LatestDeviceFirmwareInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatestDeviceFirmwareInfo>
      _instance;
} _LatestDeviceFirmwareInfo_default_instance_;
class FirmwareUpdateProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareUpdateProgress>
      _instance;
} _FirmwareUpdateProgress_default_instance_;
}  // namespace proto
}  // namespace logi
namespace protobuf_firmware_5fstructures_2eproto {
static void InitDefaultsLatestDeviceFirmwareInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_LatestDeviceFirmwareInfo_default_instance_;
    new (ptr) ::logi::proto::LatestDeviceFirmwareInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::LatestDeviceFirmwareInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LatestDeviceFirmwareInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatestDeviceFirmwareInfo}, {}};

static void InitDefaultsFirmwareUpdateProgress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_FirmwareUpdateProgress_default_instance_;
    new (ptr) ::logi::proto::FirmwareUpdateProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::FirmwareUpdateProgress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareUpdateProgress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFirmwareUpdateProgress}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LatestDeviceFirmwareInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareUpdateProgress.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LatestDeviceFirmwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LatestDeviceFirmwareInfo, device_form_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LatestDeviceFirmwareInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::LatestDeviceFirmwareInfo, latest_firmware_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgress, product_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgress, device_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgress, firmware_package_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgress, current_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgress, overall_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgress, remaining_update_time_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logi::proto::LatestDeviceFirmwareInfo)},
  { 8, -1, sizeof(::logi::proto::FirmwareUpdateProgress)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_LatestDeviceFirmwareInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_FirmwareUpdateProgress_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "firmware_structures.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031firmware_structures.proto\022\nlogi.proto\032"
      "\014common.proto\032\036product_state_structures."
      "proto\"\241\001\n\030LatestDeviceFirmwareInfo\0229\n\022de"
      "vice_form_factor\030\001 \001(\0162\035.logi.proto.Devi"
      "ce.FormFactor\022)\n\004type\030\002 \001(\0162\033.logi.proto"
      ".DeviceInfo.Type\022\037\n\027latest_firmware_vers"
      "ion\030\003 \001(\t\"\270\001\n\026FirmwareUpdateProgress\022\024\n\014"
      "product_uuid\030\001 \001(\t\022\023\n\013device_uuid\030\002 \001(\t\022"
      " \n\030firmware_package_version\030\003 \001(\t\022\030\n\020cur"
      "rent_progress\030\004 \001(\002\022\030\n\020overall_progress\030"
      "\005 \001(\002\022\035\n\025remaining_update_time\030\006 \001(\rB%\n#"
      "com.logitech.vc.sync.proto.messagesb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "firmware_structures.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_product_5fstate_5fstructures_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_firmware_5fstructures_2eproto
namespace logi {
namespace proto {

// ===================================================================

void LatestDeviceFirmwareInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatestDeviceFirmwareInfo::kDeviceFormFactorFieldNumber;
const int LatestDeviceFirmwareInfo::kTypeFieldNumber;
const int LatestDeviceFirmwareInfo::kLatestFirmwareVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatestDeviceFirmwareInfo::LatestDeviceFirmwareInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5fstructures_2eproto::scc_info_LatestDeviceFirmwareInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.LatestDeviceFirmwareInfo)
}
LatestDeviceFirmwareInfo::LatestDeviceFirmwareInfo(const LatestDeviceFirmwareInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latest_firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latest_firmware_version().size() > 0) {
    latest_firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_version_);
  }
  ::memcpy(&device_form_factor_, &from.device_form_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_form_factor_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:logi.proto.LatestDeviceFirmwareInfo)
}

void LatestDeviceFirmwareInfo::SharedCtor() {
  latest_firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_form_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&device_form_factor_)) + sizeof(type_));
}

LatestDeviceFirmwareInfo::~LatestDeviceFirmwareInfo() {
  // @@protoc_insertion_point(destructor:logi.proto.LatestDeviceFirmwareInfo)
  SharedDtor();
}

void LatestDeviceFirmwareInfo::SharedDtor() {
  latest_firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LatestDeviceFirmwareInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatestDeviceFirmwareInfo::descriptor() {
  ::protobuf_firmware_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatestDeviceFirmwareInfo& LatestDeviceFirmwareInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5fstructures_2eproto::scc_info_LatestDeviceFirmwareInfo.base);
  return *internal_default_instance();
}


void LatestDeviceFirmwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.LatestDeviceFirmwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latest_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_form_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&device_form_factor_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool LatestDeviceFirmwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.LatestDeviceFirmwareInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.Device.FormFactor device_form_factor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_form_factor(static_cast< ::logi::proto::Device_FormFactor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.DeviceInfo.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::logi::proto::DeviceInfo_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string latest_firmware_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latest_firmware_version().data(), static_cast<int>(this->latest_firmware_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.LatestDeviceFirmwareInfo.latest_firmware_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.LatestDeviceFirmwareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.LatestDeviceFirmwareInfo)
  return false;
#undef DO_
}

void LatestDeviceFirmwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.LatestDeviceFirmwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.Device.FormFactor device_form_factor = 1;
  if (this->device_form_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_form_factor(), output);
  }

  // .logi.proto.DeviceInfo.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string latest_firmware_version = 3;
  if (this->latest_firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware_version().data(), static_cast<int>(this->latest_firmware_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.LatestDeviceFirmwareInfo.latest_firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->latest_firmware_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.LatestDeviceFirmwareInfo)
}

::google::protobuf::uint8* LatestDeviceFirmwareInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.LatestDeviceFirmwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.Device.FormFactor device_form_factor = 1;
  if (this->device_form_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->device_form_factor(), target);
  }

  // .logi.proto.DeviceInfo.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string latest_firmware_version = 3;
  if (this->latest_firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latest_firmware_version().data(), static_cast<int>(this->latest_firmware_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.LatestDeviceFirmwareInfo.latest_firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->latest_firmware_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.LatestDeviceFirmwareInfo)
  return target;
}

size_t LatestDeviceFirmwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.LatestDeviceFirmwareInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string latest_firmware_version = 3;
  if (this->latest_firmware_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latest_firmware_version());
  }

  // .logi.proto.Device.FormFactor device_form_factor = 1;
  if (this->device_form_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_form_factor());
  }

  // .logi.proto.DeviceInfo.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatestDeviceFirmwareInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.LatestDeviceFirmwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LatestDeviceFirmwareInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatestDeviceFirmwareInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.LatestDeviceFirmwareInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.LatestDeviceFirmwareInfo)
    MergeFrom(*source);
  }
}

void LatestDeviceFirmwareInfo::MergeFrom(const LatestDeviceFirmwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.LatestDeviceFirmwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latest_firmware_version().size() > 0) {

    latest_firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_firmware_version_);
  }
  if (from.device_form_factor() != 0) {
    set_device_form_factor(from.device_form_factor());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LatestDeviceFirmwareInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.LatestDeviceFirmwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatestDeviceFirmwareInfo::CopyFrom(const LatestDeviceFirmwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.LatestDeviceFirmwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatestDeviceFirmwareInfo::IsInitialized() const {
  return true;
}

void LatestDeviceFirmwareInfo::Swap(LatestDeviceFirmwareInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatestDeviceFirmwareInfo::InternalSwap(LatestDeviceFirmwareInfo* other) {
  using std::swap;
  latest_firmware_version_.Swap(&other->latest_firmware_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_form_factor_, other->device_form_factor_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatestDeviceFirmwareInfo::GetMetadata() const {
  protobuf_firmware_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareUpdateProgress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareUpdateProgress::kProductUuidFieldNumber;
const int FirmwareUpdateProgress::kDeviceUuidFieldNumber;
const int FirmwareUpdateProgress::kFirmwarePackageVersionFieldNumber;
const int FirmwareUpdateProgress::kCurrentProgressFieldNumber;
const int FirmwareUpdateProgress::kOverallProgressFieldNumber;
const int FirmwareUpdateProgress::kRemainingUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareUpdateProgress::FirmwareUpdateProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5fstructures_2eproto::scc_info_FirmwareUpdateProgress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.FirmwareUpdateProgress)
}
FirmwareUpdateProgress::FirmwareUpdateProgress(const FirmwareUpdateProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_uuid().size() > 0) {
    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  device_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_uuid().size() > 0) {
    device_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_uuid_);
  }
  firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware_package_version().size() > 0) {
    firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_package_version_);
  }
  ::memcpy(&current_progress_, &from.current_progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_update_time_) -
    reinterpret_cast<char*>(&current_progress_)) + sizeof(remaining_update_time_));
  // @@protoc_insertion_point(copy_constructor:logi.proto.FirmwareUpdateProgress)
}

void FirmwareUpdateProgress::SharedCtor() {
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_update_time_) -
      reinterpret_cast<char*>(&current_progress_)) + sizeof(remaining_update_time_));
}

FirmwareUpdateProgress::~FirmwareUpdateProgress() {
  // @@protoc_insertion_point(destructor:logi.proto.FirmwareUpdateProgress)
  SharedDtor();
}

void FirmwareUpdateProgress::SharedDtor() {
  product_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FirmwareUpdateProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareUpdateProgress::descriptor() {
  ::protobuf_firmware_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareUpdateProgress& FirmwareUpdateProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5fstructures_2eproto::scc_info_FirmwareUpdateProgress.base);
  return *internal_default_instance();
}


void FirmwareUpdateProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.FirmwareUpdateProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_update_time_) -
      reinterpret_cast<char*>(&current_progress_)) + sizeof(remaining_update_time_));
  _internal_metadata_.Clear();
}

bool FirmwareUpdateProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.FirmwareUpdateProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateProgress.product_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_uuid().data(), static_cast<int>(this->device_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateProgress.device_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmware_package_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_package_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateProgress.firmware_package_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float current_progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float overall_progress = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overall_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remaining_update_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaining_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.FirmwareUpdateProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.FirmwareUpdateProgress)
  return false;
#undef DO_
}

void FirmwareUpdateProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.FirmwareUpdateProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateProgress.product_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_uuid(), output);
  }

  // string device_uuid = 2;
  if (this->device_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_uuid().data(), static_cast<int>(this->device_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateProgress.device_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_uuid(), output);
  }

  // string firmware_package_version = 3;
  if (this->firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateProgress.firmware_package_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firmware_package_version(), output);
  }

  // float current_progress = 4;
  if (this->current_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->current_progress(), output);
  }

  // float overall_progress = 5;
  if (this->overall_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->overall_progress(), output);
  }

  // uint32 remaining_update_time = 6;
  if (this->remaining_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remaining_update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.FirmwareUpdateProgress)
}

::google::protobuf::uint8* FirmwareUpdateProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.FirmwareUpdateProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateProgress.product_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_uuid(), target);
  }

  // string device_uuid = 2;
  if (this->device_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_uuid().data(), static_cast<int>(this->device_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateProgress.device_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_uuid(), target);
  }

  // string firmware_package_version = 3;
  if (this->firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_package_version().data(), static_cast<int>(this->firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateProgress.firmware_package_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firmware_package_version(), target);
  }

  // float current_progress = 4;
  if (this->current_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->current_progress(), target);
  }

  // float overall_progress = 5;
  if (this->overall_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->overall_progress(), target);
  }

  // uint32 remaining_update_time = 6;
  if (this->remaining_update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remaining_update_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.FirmwareUpdateProgress)
  return target;
}

size_t FirmwareUpdateProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.FirmwareUpdateProgress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_uuid());
  }

  // string device_uuid = 2;
  if (this->device_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_uuid());
  }

  // string firmware_package_version = 3;
  if (this->firmware_package_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_package_version());
  }

  // float current_progress = 4;
  if (this->current_progress() != 0) {
    total_size += 1 + 4;
  }

  // float overall_progress = 5;
  if (this->overall_progress() != 0) {
    total_size += 1 + 4;
  }

  // uint32 remaining_update_time = 6;
  if (this->remaining_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remaining_update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareUpdateProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.FirmwareUpdateProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareUpdateProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareUpdateProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.FirmwareUpdateProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.FirmwareUpdateProgress)
    MergeFrom(*source);
  }
}

void FirmwareUpdateProgress::MergeFrom(const FirmwareUpdateProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.FirmwareUpdateProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_uuid().size() > 0) {

    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  if (from.device_uuid().size() > 0) {

    device_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_uuid_);
  }
  if (from.firmware_package_version().size() > 0) {

    firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_package_version_);
  }
  if (from.current_progress() != 0) {
    set_current_progress(from.current_progress());
  }
  if (from.overall_progress() != 0) {
    set_overall_progress(from.overall_progress());
  }
  if (from.remaining_update_time() != 0) {
    set_remaining_update_time(from.remaining_update_time());
  }
}

void FirmwareUpdateProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.FirmwareUpdateProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareUpdateProgress::CopyFrom(const FirmwareUpdateProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.FirmwareUpdateProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareUpdateProgress::IsInitialized() const {
  return true;
}

void FirmwareUpdateProgress::Swap(FirmwareUpdateProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareUpdateProgress::InternalSwap(FirmwareUpdateProgress* other) {
  using std::swap;
  product_uuid_.Swap(&other->product_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_uuid_.Swap(&other->device_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firmware_package_version_.Swap(&other->firmware_package_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(current_progress_, other->current_progress_);
  swap(overall_progress_, other->overall_progress_);
  swap(remaining_update_time_, other->remaining_update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareUpdateProgress::GetMetadata() const {
  protobuf_firmware_5fstructures_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fstructures_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::LatestDeviceFirmwareInfo* Arena::CreateMaybeMessage< ::logi::proto::LatestDeviceFirmwareInfo >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::LatestDeviceFirmwareInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::FirmwareUpdateProgress* Arena::CreateMaybeMessage< ::logi::proto::FirmwareUpdateProgress >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::FirmwareUpdateProgress >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
