// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firmware_events.proto

#include "firmware_events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Error;
}  // namespace protobuf_common_2eproto
namespace protobuf_firmware_5fevents_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareUpdateCompletedEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5fevents_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareUpdateStartedEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FirmwareUpdateErrorEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FirmwareUpdateProgressEvent;
}  // namespace protobuf_firmware_5fevents_2eproto
namespace protobuf_firmware_5fstructures_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5fstructures_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareUpdateProgress;
}  // namespace protobuf_firmware_5fstructures_2eproto
namespace logi {
namespace proto {
class FirmwareUpdateProgressEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareUpdateProgressEvent>
      _instance;
} _FirmwareUpdateProgressEvent_default_instance_;
class FirmwareUpdateStartedEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareUpdateStartedEvent>
      _instance;
} _FirmwareUpdateStartedEvent_default_instance_;
class FirmwareUpdateCompletedEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareUpdateCompletedEvent>
      _instance;
} _FirmwareUpdateCompletedEvent_default_instance_;
class FirmwareUpdateErrorEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareUpdateErrorEvent>
      _instance;
} _FirmwareUpdateErrorEvent_default_instance_;
class FirmwareEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareEvent>
      _instance;
  const ::logi::proto::FirmwareUpdateProgressEvent* firmware_update_progress_event_;
  const ::logi::proto::FirmwareUpdateStartedEvent* firmware_update_started_event_;
  const ::logi::proto::FirmwareUpdateErrorEvent* firmware_update_error_event_;
  const ::logi::proto::FirmwareUpdateCompletedEvent* firmware_update_completed_event_;
} _FirmwareEvent_default_instance_;
}  // namespace proto
}  // namespace logi
namespace protobuf_firmware_5fevents_2eproto {
static void InitDefaultsFirmwareUpdateProgressEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_FirmwareUpdateProgressEvent_default_instance_;
    new (ptr) ::logi::proto::FirmwareUpdateProgressEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::FirmwareUpdateProgressEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FirmwareUpdateProgressEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFirmwareUpdateProgressEvent}, {
      &protobuf_firmware_5fstructures_2eproto::scc_info_FirmwareUpdateProgress.base,}};

static void InitDefaultsFirmwareUpdateStartedEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_FirmwareUpdateStartedEvent_default_instance_;
    new (ptr) ::logi::proto::FirmwareUpdateStartedEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::FirmwareUpdateStartedEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareUpdateStartedEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFirmwareUpdateStartedEvent}, {}};

static void InitDefaultsFirmwareUpdateCompletedEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_FirmwareUpdateCompletedEvent_default_instance_;
    new (ptr) ::logi::proto::FirmwareUpdateCompletedEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::FirmwareUpdateCompletedEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareUpdateCompletedEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFirmwareUpdateCompletedEvent}, {}};

static void InitDefaultsFirmwareUpdateErrorEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_FirmwareUpdateErrorEvent_default_instance_;
    new (ptr) ::logi::proto::FirmwareUpdateErrorEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::FirmwareUpdateErrorEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FirmwareUpdateErrorEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFirmwareUpdateErrorEvent}, {
      &protobuf_common_2eproto::scc_info_Error.base,}};

static void InitDefaultsFirmwareEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::logi::proto::_FirmwareEvent_default_instance_;
    new (ptr) ::logi::proto::FirmwareEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::logi::proto::FirmwareEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_FirmwareEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFirmwareEvent}, {
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateProgressEvent.base,
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateStartedEvent.base,
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateErrorEvent.base,
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateCompletedEvent.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareUpdateProgressEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareUpdateStartedEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareUpdateCompletedEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareUpdateErrorEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareEvent.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgressEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateProgressEvent, progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateStartedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateStartedEvent, product_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateStartedEvent, current_firmware_package_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateStartedEvent, new_firmware_package_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateCompletedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateCompletedEvent, product_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateCompletedEvent, new_firmware_package_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateErrorEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateErrorEvent, product_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareUpdateErrorEvent, errors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::logi::proto::FirmwareEventDefaultTypeInternal, firmware_update_progress_event_),
  offsetof(::logi::proto::FirmwareEventDefaultTypeInternal, firmware_update_started_event_),
  offsetof(::logi::proto::FirmwareEventDefaultTypeInternal, firmware_update_error_event_),
  offsetof(::logi::proto::FirmwareEventDefaultTypeInternal, firmware_update_completed_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::logi::proto::FirmwareEvent, event_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::logi::proto::FirmwareUpdateProgressEvent)},
  { 6, -1, sizeof(::logi::proto::FirmwareUpdateStartedEvent)},
  { 14, -1, sizeof(::logi::proto::FirmwareUpdateCompletedEvent)},
  { 21, -1, sizeof(::logi::proto::FirmwareUpdateErrorEvent)},
  { 28, -1, sizeof(::logi::proto::FirmwareEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_FirmwareUpdateProgressEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_FirmwareUpdateStartedEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_FirmwareUpdateCompletedEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_FirmwareUpdateErrorEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::logi::proto::_FirmwareEvent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "firmware_events.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025firmware_events.proto\022\nlogi.proto\032\014com"
      "mon.proto\032\031firmware_structures.proto\"S\n\033"
      "FirmwareUpdateProgressEvent\0224\n\010progress\030"
      "\001 \001(\0132\".logi.proto.FirmwareUpdateProgres"
      "s\"\202\001\n\032FirmwareUpdateStartedEvent\022\024\n\014prod"
      "uct_uuid\030\001 \001(\t\022(\n current_firmware_packa"
      "ge_version\030\002 \001(\t\022$\n\034new_firmware_package"
      "_version\030\003 \001(\t\"Z\n\034FirmwareUpdateComplete"
      "dEvent\022\024\n\014product_uuid\030\001 \001(\t\022$\n\034new_firm"
      "ware_package_version\030\002 \001(\t\"S\n\030FirmwareUp"
      "dateErrorEvent\022\024\n\014product_uuid\030\001 \001(\t\022!\n\006"
      "errors\030\002 \003(\0132\021.logi.proto.Error\"\336\002\n\rFirm"
      "wareEvent\022Q\n\036firmware_update_progress_ev"
      "ent\030\001 \001(\0132\'.logi.proto.FirmwareUpdatePro"
      "gressEventH\000\022O\n\035firmware_update_started_"
      "event\030\002 \001(\0132&.logi.proto.FirmwareUpdateS"
      "tartedEventH\000\022K\n\033firmware_update_error_e"
      "vent\030\003 \001(\0132$.logi.proto.FirmwareUpdateEr"
      "rorEventH\000\022S\n\037firmware_update_completed_"
      "event\030\004 \001(\0132(.logi.proto.FirmwareUpdateC"
      "ompletedEventH\000B\007\n\005eventB%\n#com.logitech"
      ".vc.sync.proto.messagesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 871);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "firmware_events.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_firmware_5fstructures_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_firmware_5fevents_2eproto
namespace logi {
namespace proto {

// ===================================================================

void FirmwareUpdateProgressEvent::InitAsDefaultInstance() {
  ::logi::proto::_FirmwareUpdateProgressEvent_default_instance_._instance.get_mutable()->progress_ = const_cast< ::logi::proto::FirmwareUpdateProgress*>(
      ::logi::proto::FirmwareUpdateProgress::internal_default_instance());
}
void FirmwareUpdateProgressEvent::clear_progress() {
  if (GetArenaNoVirtual() == NULL && progress_ != NULL) {
    delete progress_;
  }
  progress_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareUpdateProgressEvent::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareUpdateProgressEvent::FirmwareUpdateProgressEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateProgressEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.FirmwareUpdateProgressEvent)
}
FirmwareUpdateProgressEvent::FirmwareUpdateProgressEvent(const FirmwareUpdateProgressEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_progress()) {
    progress_ = new ::logi::proto::FirmwareUpdateProgress(*from.progress_);
  } else {
    progress_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.FirmwareUpdateProgressEvent)
}

void FirmwareUpdateProgressEvent::SharedCtor() {
  progress_ = NULL;
}

FirmwareUpdateProgressEvent::~FirmwareUpdateProgressEvent() {
  // @@protoc_insertion_point(destructor:logi.proto.FirmwareUpdateProgressEvent)
  SharedDtor();
}

void FirmwareUpdateProgressEvent::SharedDtor() {
  if (this != internal_default_instance()) delete progress_;
}

void FirmwareUpdateProgressEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareUpdateProgressEvent::descriptor() {
  ::protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareUpdateProgressEvent& FirmwareUpdateProgressEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateProgressEvent.base);
  return *internal_default_instance();
}


void FirmwareUpdateProgressEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.FirmwareUpdateProgressEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && progress_ != NULL) {
    delete progress_;
  }
  progress_ = NULL;
  _internal_metadata_.Clear();
}

bool FirmwareUpdateProgressEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.FirmwareUpdateProgressEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.FirmwareUpdateProgress progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.FirmwareUpdateProgressEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.FirmwareUpdateProgressEvent)
  return false;
#undef DO_
}

void FirmwareUpdateProgressEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.FirmwareUpdateProgressEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.FirmwareUpdateProgress progress = 1;
  if (this->has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.FirmwareUpdateProgressEvent)
}

::google::protobuf::uint8* FirmwareUpdateProgressEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.FirmwareUpdateProgressEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.FirmwareUpdateProgress progress = 1;
  if (this->has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_progress(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.FirmwareUpdateProgressEvent)
  return target;
}

size_t FirmwareUpdateProgressEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.FirmwareUpdateProgressEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .logi.proto.FirmwareUpdateProgress progress = 1;
  if (this->has_progress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareUpdateProgressEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.FirmwareUpdateProgressEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareUpdateProgressEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareUpdateProgressEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.FirmwareUpdateProgressEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.FirmwareUpdateProgressEvent)
    MergeFrom(*source);
  }
}

void FirmwareUpdateProgressEvent::MergeFrom(const FirmwareUpdateProgressEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.FirmwareUpdateProgressEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_progress()) {
    mutable_progress()->::logi::proto::FirmwareUpdateProgress::MergeFrom(from.progress());
  }
}

void FirmwareUpdateProgressEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.FirmwareUpdateProgressEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareUpdateProgressEvent::CopyFrom(const FirmwareUpdateProgressEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.FirmwareUpdateProgressEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareUpdateProgressEvent::IsInitialized() const {
  return true;
}

void FirmwareUpdateProgressEvent::Swap(FirmwareUpdateProgressEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareUpdateProgressEvent::InternalSwap(FirmwareUpdateProgressEvent* other) {
  using std::swap;
  swap(progress_, other->progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareUpdateProgressEvent::GetMetadata() const {
  protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareUpdateStartedEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareUpdateStartedEvent::kProductUuidFieldNumber;
const int FirmwareUpdateStartedEvent::kCurrentFirmwarePackageVersionFieldNumber;
const int FirmwareUpdateStartedEvent::kNewFirmwarePackageVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareUpdateStartedEvent::FirmwareUpdateStartedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateStartedEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.FirmwareUpdateStartedEvent)
}
FirmwareUpdateStartedEvent::FirmwareUpdateStartedEvent(const FirmwareUpdateStartedEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_uuid().size() > 0) {
    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  current_firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.current_firmware_package_version().size() > 0) {
    current_firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_firmware_package_version_);
  }
  new_firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_firmware_package_version().size() > 0) {
    new_firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_firmware_package_version_);
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.FirmwareUpdateStartedEvent)
}

void FirmwareUpdateStartedEvent::SharedCtor() {
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FirmwareUpdateStartedEvent::~FirmwareUpdateStartedEvent() {
  // @@protoc_insertion_point(destructor:logi.proto.FirmwareUpdateStartedEvent)
  SharedDtor();
}

void FirmwareUpdateStartedEvent::SharedDtor() {
  product_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_firmware_package_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_firmware_package_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FirmwareUpdateStartedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareUpdateStartedEvent::descriptor() {
  ::protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareUpdateStartedEvent& FirmwareUpdateStartedEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateStartedEvent.base);
  return *internal_default_instance();
}


void FirmwareUpdateStartedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.FirmwareUpdateStartedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FirmwareUpdateStartedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.FirmwareUpdateStartedEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateStartedEvent.product_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string current_firmware_package_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_firmware_package_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_firmware_package_version().data(), static_cast<int>(this->current_firmware_package_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_firmware_package_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_firmware_package_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_firmware_package_version().data(), static_cast<int>(this->new_firmware_package_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.FirmwareUpdateStartedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.FirmwareUpdateStartedEvent)
  return false;
#undef DO_
}

void FirmwareUpdateStartedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.FirmwareUpdateStartedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateStartedEvent.product_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_uuid(), output);
  }

  // string current_firmware_package_version = 2;
  if (this->current_firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_firmware_package_version().data(), static_cast<int>(this->current_firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->current_firmware_package_version(), output);
  }

  // string new_firmware_package_version = 3;
  if (this->new_firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_firmware_package_version().data(), static_cast<int>(this->new_firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->new_firmware_package_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.FirmwareUpdateStartedEvent)
}

::google::protobuf::uint8* FirmwareUpdateStartedEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.FirmwareUpdateStartedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateStartedEvent.product_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_uuid(), target);
  }

  // string current_firmware_package_version = 2;
  if (this->current_firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_firmware_package_version().data(), static_cast<int>(this->current_firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->current_firmware_package_version(), target);
  }

  // string new_firmware_package_version = 3;
  if (this->new_firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_firmware_package_version().data(), static_cast<int>(this->new_firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_firmware_package_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.FirmwareUpdateStartedEvent)
  return target;
}

size_t FirmwareUpdateStartedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.FirmwareUpdateStartedEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_uuid());
  }

  // string current_firmware_package_version = 2;
  if (this->current_firmware_package_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_firmware_package_version());
  }

  // string new_firmware_package_version = 3;
  if (this->new_firmware_package_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_firmware_package_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareUpdateStartedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.FirmwareUpdateStartedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareUpdateStartedEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareUpdateStartedEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.FirmwareUpdateStartedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.FirmwareUpdateStartedEvent)
    MergeFrom(*source);
  }
}

void FirmwareUpdateStartedEvent::MergeFrom(const FirmwareUpdateStartedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.FirmwareUpdateStartedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_uuid().size() > 0) {

    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  if (from.current_firmware_package_version().size() > 0) {

    current_firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_firmware_package_version_);
  }
  if (from.new_firmware_package_version().size() > 0) {

    new_firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_firmware_package_version_);
  }
}

void FirmwareUpdateStartedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.FirmwareUpdateStartedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareUpdateStartedEvent::CopyFrom(const FirmwareUpdateStartedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.FirmwareUpdateStartedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareUpdateStartedEvent::IsInitialized() const {
  return true;
}

void FirmwareUpdateStartedEvent::Swap(FirmwareUpdateStartedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareUpdateStartedEvent::InternalSwap(FirmwareUpdateStartedEvent* other) {
  using std::swap;
  product_uuid_.Swap(&other->product_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_firmware_package_version_.Swap(&other->current_firmware_package_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_firmware_package_version_.Swap(&other->new_firmware_package_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareUpdateStartedEvent::GetMetadata() const {
  protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareUpdateCompletedEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareUpdateCompletedEvent::kProductUuidFieldNumber;
const int FirmwareUpdateCompletedEvent::kNewFirmwarePackageVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareUpdateCompletedEvent::FirmwareUpdateCompletedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateCompletedEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.FirmwareUpdateCompletedEvent)
}
FirmwareUpdateCompletedEvent::FirmwareUpdateCompletedEvent(const FirmwareUpdateCompletedEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_uuid().size() > 0) {
    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  new_firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_firmware_package_version().size() > 0) {
    new_firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_firmware_package_version_);
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.FirmwareUpdateCompletedEvent)
}

void FirmwareUpdateCompletedEvent::SharedCtor() {
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_firmware_package_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FirmwareUpdateCompletedEvent::~FirmwareUpdateCompletedEvent() {
  // @@protoc_insertion_point(destructor:logi.proto.FirmwareUpdateCompletedEvent)
  SharedDtor();
}

void FirmwareUpdateCompletedEvent::SharedDtor() {
  product_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_firmware_package_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FirmwareUpdateCompletedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareUpdateCompletedEvent::descriptor() {
  ::protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareUpdateCompletedEvent& FirmwareUpdateCompletedEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateCompletedEvent.base);
  return *internal_default_instance();
}


void FirmwareUpdateCompletedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.FirmwareUpdateCompletedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FirmwareUpdateCompletedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.FirmwareUpdateCompletedEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateCompletedEvent.product_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_firmware_package_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_firmware_package_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_firmware_package_version().data(), static_cast<int>(this->new_firmware_package_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.FirmwareUpdateCompletedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.FirmwareUpdateCompletedEvent)
  return false;
#undef DO_
}

void FirmwareUpdateCompletedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.FirmwareUpdateCompletedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateCompletedEvent.product_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_uuid(), output);
  }

  // string new_firmware_package_version = 2;
  if (this->new_firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_firmware_package_version().data(), static_cast<int>(this->new_firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_firmware_package_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.FirmwareUpdateCompletedEvent)
}

::google::protobuf::uint8* FirmwareUpdateCompletedEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.FirmwareUpdateCompletedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateCompletedEvent.product_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_uuid(), target);
  }

  // string new_firmware_package_version = 2;
  if (this->new_firmware_package_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_firmware_package_version().data(), static_cast<int>(this->new_firmware_package_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_firmware_package_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.FirmwareUpdateCompletedEvent)
  return target;
}

size_t FirmwareUpdateCompletedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.FirmwareUpdateCompletedEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_uuid());
  }

  // string new_firmware_package_version = 2;
  if (this->new_firmware_package_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_firmware_package_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareUpdateCompletedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.FirmwareUpdateCompletedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareUpdateCompletedEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareUpdateCompletedEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.FirmwareUpdateCompletedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.FirmwareUpdateCompletedEvent)
    MergeFrom(*source);
  }
}

void FirmwareUpdateCompletedEvent::MergeFrom(const FirmwareUpdateCompletedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.FirmwareUpdateCompletedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_uuid().size() > 0) {

    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  if (from.new_firmware_package_version().size() > 0) {

    new_firmware_package_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_firmware_package_version_);
  }
}

void FirmwareUpdateCompletedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.FirmwareUpdateCompletedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareUpdateCompletedEvent::CopyFrom(const FirmwareUpdateCompletedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.FirmwareUpdateCompletedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareUpdateCompletedEvent::IsInitialized() const {
  return true;
}

void FirmwareUpdateCompletedEvent::Swap(FirmwareUpdateCompletedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareUpdateCompletedEvent::InternalSwap(FirmwareUpdateCompletedEvent* other) {
  using std::swap;
  product_uuid_.Swap(&other->product_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_firmware_package_version_.Swap(&other->new_firmware_package_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareUpdateCompletedEvent::GetMetadata() const {
  protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareUpdateErrorEvent::InitAsDefaultInstance() {
}
void FirmwareUpdateErrorEvent::clear_errors() {
  errors_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareUpdateErrorEvent::kProductUuidFieldNumber;
const int FirmwareUpdateErrorEvent::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareUpdateErrorEvent::FirmwareUpdateErrorEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateErrorEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.FirmwareUpdateErrorEvent)
}
FirmwareUpdateErrorEvent::FirmwareUpdateErrorEvent(const FirmwareUpdateErrorEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_uuid().size() > 0) {
    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.FirmwareUpdateErrorEvent)
}

void FirmwareUpdateErrorEvent::SharedCtor() {
  product_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FirmwareUpdateErrorEvent::~FirmwareUpdateErrorEvent() {
  // @@protoc_insertion_point(destructor:logi.proto.FirmwareUpdateErrorEvent)
  SharedDtor();
}

void FirmwareUpdateErrorEvent::SharedDtor() {
  product_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FirmwareUpdateErrorEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareUpdateErrorEvent::descriptor() {
  ::protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareUpdateErrorEvent& FirmwareUpdateErrorEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5fevents_2eproto::scc_info_FirmwareUpdateErrorEvent.base);
  return *internal_default_instance();
}


void FirmwareUpdateErrorEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.FirmwareUpdateErrorEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FirmwareUpdateErrorEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.FirmwareUpdateErrorEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "logi.proto.FirmwareUpdateErrorEvent.product_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .logi.proto.Error errors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.FirmwareUpdateErrorEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.FirmwareUpdateErrorEvent)
  return false;
#undef DO_
}

void FirmwareUpdateErrorEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.FirmwareUpdateErrorEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateErrorEvent.product_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_uuid(), output);
  }

  // repeated .logi.proto.Error errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->errors(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.FirmwareUpdateErrorEvent)
}

::google::protobuf::uint8* FirmwareUpdateErrorEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.FirmwareUpdateErrorEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_uuid().data(), static_cast<int>(this->product_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "logi.proto.FirmwareUpdateErrorEvent.product_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_uuid(), target);
  }

  // repeated .logi.proto.Error errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->errors(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.FirmwareUpdateErrorEvent)
  return target;
}

size_t FirmwareUpdateErrorEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.FirmwareUpdateErrorEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .logi.proto.Error errors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // string product_uuid = 1;
  if (this->product_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareUpdateErrorEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.FirmwareUpdateErrorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareUpdateErrorEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareUpdateErrorEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.FirmwareUpdateErrorEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.FirmwareUpdateErrorEvent)
    MergeFrom(*source);
  }
}

void FirmwareUpdateErrorEvent::MergeFrom(const FirmwareUpdateErrorEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.FirmwareUpdateErrorEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.product_uuid().size() > 0) {

    product_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_uuid_);
  }
}

void FirmwareUpdateErrorEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.FirmwareUpdateErrorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareUpdateErrorEvent::CopyFrom(const FirmwareUpdateErrorEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.FirmwareUpdateErrorEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareUpdateErrorEvent::IsInitialized() const {
  return true;
}

void FirmwareUpdateErrorEvent::Swap(FirmwareUpdateErrorEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareUpdateErrorEvent::InternalSwap(FirmwareUpdateErrorEvent* other) {
  using std::swap;
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  product_uuid_.Swap(&other->product_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareUpdateErrorEvent::GetMetadata() const {
  protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FirmwareEvent::InitAsDefaultInstance() {
  ::logi::proto::_FirmwareEvent_default_instance_.firmware_update_progress_event_ = const_cast< ::logi::proto::FirmwareUpdateProgressEvent*>(
      ::logi::proto::FirmwareUpdateProgressEvent::internal_default_instance());
  ::logi::proto::_FirmwareEvent_default_instance_.firmware_update_started_event_ = const_cast< ::logi::proto::FirmwareUpdateStartedEvent*>(
      ::logi::proto::FirmwareUpdateStartedEvent::internal_default_instance());
  ::logi::proto::_FirmwareEvent_default_instance_.firmware_update_error_event_ = const_cast< ::logi::proto::FirmwareUpdateErrorEvent*>(
      ::logi::proto::FirmwareUpdateErrorEvent::internal_default_instance());
  ::logi::proto::_FirmwareEvent_default_instance_.firmware_update_completed_event_ = const_cast< ::logi::proto::FirmwareUpdateCompletedEvent*>(
      ::logi::proto::FirmwareUpdateCompletedEvent::internal_default_instance());
}
void FirmwareEvent::set_allocated_firmware_update_progress_event(::logi::proto::FirmwareUpdateProgressEvent* firmware_update_progress_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (firmware_update_progress_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      firmware_update_progress_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, firmware_update_progress_event, submessage_arena);
    }
    set_has_firmware_update_progress_event();
    event_.firmware_update_progress_event_ = firmware_update_progress_event;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareEvent.firmware_update_progress_event)
}
void FirmwareEvent::set_allocated_firmware_update_started_event(::logi::proto::FirmwareUpdateStartedEvent* firmware_update_started_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (firmware_update_started_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      firmware_update_started_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, firmware_update_started_event, submessage_arena);
    }
    set_has_firmware_update_started_event();
    event_.firmware_update_started_event_ = firmware_update_started_event;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareEvent.firmware_update_started_event)
}
void FirmwareEvent::set_allocated_firmware_update_error_event(::logi::proto::FirmwareUpdateErrorEvent* firmware_update_error_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (firmware_update_error_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      firmware_update_error_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, firmware_update_error_event, submessage_arena);
    }
    set_has_firmware_update_error_event();
    event_.firmware_update_error_event_ = firmware_update_error_event;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareEvent.firmware_update_error_event)
}
void FirmwareEvent::set_allocated_firmware_update_completed_event(::logi::proto::FirmwareUpdateCompletedEvent* firmware_update_completed_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (firmware_update_completed_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      firmware_update_completed_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, firmware_update_completed_event, submessage_arena);
    }
    set_has_firmware_update_completed_event();
    event_.firmware_update_completed_event_ = firmware_update_completed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareEvent.firmware_update_completed_event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareEvent::kFirmwareUpdateProgressEventFieldNumber;
const int FirmwareEvent::kFirmwareUpdateStartedEventFieldNumber;
const int FirmwareEvent::kFirmwareUpdateErrorEventFieldNumber;
const int FirmwareEvent::kFirmwareUpdateCompletedEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareEvent::FirmwareEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_firmware_5fevents_2eproto::scc_info_FirmwareEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:logi.proto.FirmwareEvent)
}
FirmwareEvent::FirmwareEvent(const FirmwareEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kFirmwareUpdateProgressEvent: {
      mutable_firmware_update_progress_event()->::logi::proto::FirmwareUpdateProgressEvent::MergeFrom(from.firmware_update_progress_event());
      break;
    }
    case kFirmwareUpdateStartedEvent: {
      mutable_firmware_update_started_event()->::logi::proto::FirmwareUpdateStartedEvent::MergeFrom(from.firmware_update_started_event());
      break;
    }
    case kFirmwareUpdateErrorEvent: {
      mutable_firmware_update_error_event()->::logi::proto::FirmwareUpdateErrorEvent::MergeFrom(from.firmware_update_error_event());
      break;
    }
    case kFirmwareUpdateCompletedEvent: {
      mutable_firmware_update_completed_event()->::logi::proto::FirmwareUpdateCompletedEvent::MergeFrom(from.firmware_update_completed_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:logi.proto.FirmwareEvent)
}

void FirmwareEvent::SharedCtor() {
  clear_has_event();
}

FirmwareEvent::~FirmwareEvent() {
  // @@protoc_insertion_point(destructor:logi.proto.FirmwareEvent)
  SharedDtor();
}

void FirmwareEvent::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void FirmwareEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FirmwareEvent::descriptor() {
  ::protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FirmwareEvent& FirmwareEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_firmware_5fevents_2eproto::scc_info_FirmwareEvent.base);
  return *internal_default_instance();
}


void FirmwareEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:logi.proto.FirmwareEvent)
  switch (event_case()) {
    case kFirmwareUpdateProgressEvent: {
      delete event_.firmware_update_progress_event_;
      break;
    }
    case kFirmwareUpdateStartedEvent: {
      delete event_.firmware_update_started_event_;
      break;
    }
    case kFirmwareUpdateErrorEvent: {
      delete event_.firmware_update_error_event_;
      break;
    }
    case kFirmwareUpdateCompletedEvent: {
      delete event_.firmware_update_completed_event_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void FirmwareEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:logi.proto.FirmwareEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear();
}

bool FirmwareEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logi.proto.FirmwareEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .logi.proto.FirmwareUpdateProgressEvent firmware_update_progress_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_firmware_update_progress_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.FirmwareUpdateStartedEvent firmware_update_started_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_firmware_update_started_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.FirmwareUpdateErrorEvent firmware_update_error_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_firmware_update_error_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .logi.proto.FirmwareUpdateCompletedEvent firmware_update_completed_event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_firmware_update_completed_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logi.proto.FirmwareEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logi.proto.FirmwareEvent)
  return false;
#undef DO_
}

void FirmwareEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logi.proto.FirmwareEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.FirmwareUpdateProgressEvent firmware_update_progress_event = 1;
  if (has_firmware_update_progress_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_firmware_update_progress_event(), output);
  }

  // .logi.proto.FirmwareUpdateStartedEvent firmware_update_started_event = 2;
  if (has_firmware_update_started_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_firmware_update_started_event(), output);
  }

  // .logi.proto.FirmwareUpdateErrorEvent firmware_update_error_event = 3;
  if (has_firmware_update_error_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_firmware_update_error_event(), output);
  }

  // .logi.proto.FirmwareUpdateCompletedEvent firmware_update_completed_event = 4;
  if (has_firmware_update_completed_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_firmware_update_completed_event(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:logi.proto.FirmwareEvent)
}

::google::protobuf::uint8* FirmwareEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:logi.proto.FirmwareEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .logi.proto.FirmwareUpdateProgressEvent firmware_update_progress_event = 1;
  if (has_firmware_update_progress_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_firmware_update_progress_event(), deterministic, target);
  }

  // .logi.proto.FirmwareUpdateStartedEvent firmware_update_started_event = 2;
  if (has_firmware_update_started_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_firmware_update_started_event(), deterministic, target);
  }

  // .logi.proto.FirmwareUpdateErrorEvent firmware_update_error_event = 3;
  if (has_firmware_update_error_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_firmware_update_error_event(), deterministic, target);
  }

  // .logi.proto.FirmwareUpdateCompletedEvent firmware_update_completed_event = 4;
  if (has_firmware_update_completed_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_firmware_update_completed_event(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logi.proto.FirmwareEvent)
  return target;
}

size_t FirmwareEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:logi.proto.FirmwareEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (event_case()) {
    // .logi.proto.FirmwareUpdateProgressEvent firmware_update_progress_event = 1;
    case kFirmwareUpdateProgressEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.firmware_update_progress_event_);
      break;
    }
    // .logi.proto.FirmwareUpdateStartedEvent firmware_update_started_event = 2;
    case kFirmwareUpdateStartedEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.firmware_update_started_event_);
      break;
    }
    // .logi.proto.FirmwareUpdateErrorEvent firmware_update_error_event = 3;
    case kFirmwareUpdateErrorEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.firmware_update_error_event_);
      break;
    }
    // .logi.proto.FirmwareUpdateCompletedEvent firmware_update_completed_event = 4;
    case kFirmwareUpdateCompletedEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_.firmware_update_completed_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:logi.proto.FirmwareEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FirmwareEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:logi.proto.FirmwareEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:logi.proto.FirmwareEvent)
    MergeFrom(*source);
  }
}

void FirmwareEvent::MergeFrom(const FirmwareEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:logi.proto.FirmwareEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kFirmwareUpdateProgressEvent: {
      mutable_firmware_update_progress_event()->::logi::proto::FirmwareUpdateProgressEvent::MergeFrom(from.firmware_update_progress_event());
      break;
    }
    case kFirmwareUpdateStartedEvent: {
      mutable_firmware_update_started_event()->::logi::proto::FirmwareUpdateStartedEvent::MergeFrom(from.firmware_update_started_event());
      break;
    }
    case kFirmwareUpdateErrorEvent: {
      mutable_firmware_update_error_event()->::logi::proto::FirmwareUpdateErrorEvent::MergeFrom(from.firmware_update_error_event());
      break;
    }
    case kFirmwareUpdateCompletedEvent: {
      mutable_firmware_update_completed_event()->::logi::proto::FirmwareUpdateCompletedEvent::MergeFrom(from.firmware_update_completed_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void FirmwareEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:logi.proto.FirmwareEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareEvent::CopyFrom(const FirmwareEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:logi.proto.FirmwareEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareEvent::IsInitialized() const {
  return true;
}

void FirmwareEvent::Swap(FirmwareEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareEvent::InternalSwap(FirmwareEvent* other) {
  using std::swap;
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FirmwareEvent::GetMetadata() const {
  protobuf_firmware_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_firmware_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::FirmwareUpdateProgressEvent* Arena::CreateMaybeMessage< ::logi::proto::FirmwareUpdateProgressEvent >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::FirmwareUpdateProgressEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::FirmwareUpdateStartedEvent* Arena::CreateMaybeMessage< ::logi::proto::FirmwareUpdateStartedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::FirmwareUpdateStartedEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::FirmwareUpdateCompletedEvent* Arena::CreateMaybeMessage< ::logi::proto::FirmwareUpdateCompletedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::FirmwareUpdateCompletedEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::FirmwareUpdateErrorEvent* Arena::CreateMaybeMessage< ::logi::proto::FirmwareUpdateErrorEvent >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::FirmwareUpdateErrorEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::logi::proto::FirmwareEvent* Arena::CreateMaybeMessage< ::logi::proto::FirmwareEvent >(Arena* arena) {
  return Arena::CreateInternal< ::logi::proto::FirmwareEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
