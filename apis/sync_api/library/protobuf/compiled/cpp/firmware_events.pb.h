// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firmware_events.proto

#ifndef PROTOBUF_INCLUDED_firmware_5fevents_2eproto
#define PROTOBUF_INCLUDED_firmware_5fevents_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "firmware_structures.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_firmware_5fevents_2eproto 

namespace protobuf_firmware_5fevents_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_firmware_5fevents_2eproto
namespace logi {
namespace proto {
class FirmwareEvent;
class FirmwareEventDefaultTypeInternal;
extern FirmwareEventDefaultTypeInternal _FirmwareEvent_default_instance_;
class FirmwareUpdateCompletedEvent;
class FirmwareUpdateCompletedEventDefaultTypeInternal;
extern FirmwareUpdateCompletedEventDefaultTypeInternal _FirmwareUpdateCompletedEvent_default_instance_;
class FirmwareUpdateErrorEvent;
class FirmwareUpdateErrorEventDefaultTypeInternal;
extern FirmwareUpdateErrorEventDefaultTypeInternal _FirmwareUpdateErrorEvent_default_instance_;
class FirmwareUpdateProgressEvent;
class FirmwareUpdateProgressEventDefaultTypeInternal;
extern FirmwareUpdateProgressEventDefaultTypeInternal _FirmwareUpdateProgressEvent_default_instance_;
class FirmwareUpdateStartedEvent;
class FirmwareUpdateStartedEventDefaultTypeInternal;
extern FirmwareUpdateStartedEventDefaultTypeInternal _FirmwareUpdateStartedEvent_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::FirmwareEvent* Arena::CreateMaybeMessage<::logi::proto::FirmwareEvent>(Arena*);
template<> ::logi::proto::FirmwareUpdateCompletedEvent* Arena::CreateMaybeMessage<::logi::proto::FirmwareUpdateCompletedEvent>(Arena*);
template<> ::logi::proto::FirmwareUpdateErrorEvent* Arena::CreateMaybeMessage<::logi::proto::FirmwareUpdateErrorEvent>(Arena*);
template<> ::logi::proto::FirmwareUpdateProgressEvent* Arena::CreateMaybeMessage<::logi::proto::FirmwareUpdateProgressEvent>(Arena*);
template<> ::logi::proto::FirmwareUpdateStartedEvent* Arena::CreateMaybeMessage<::logi::proto::FirmwareUpdateStartedEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

// ===================================================================

class FirmwareUpdateProgressEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.FirmwareUpdateProgressEvent) */ {
 public:
  FirmwareUpdateProgressEvent();
  virtual ~FirmwareUpdateProgressEvent();

  FirmwareUpdateProgressEvent(const FirmwareUpdateProgressEvent& from);

  inline FirmwareUpdateProgressEvent& operator=(const FirmwareUpdateProgressEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirmwareUpdateProgressEvent(FirmwareUpdateProgressEvent&& from) noexcept
    : FirmwareUpdateProgressEvent() {
    *this = ::std::move(from);
  }

  inline FirmwareUpdateProgressEvent& operator=(FirmwareUpdateProgressEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirmwareUpdateProgressEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareUpdateProgressEvent* internal_default_instance() {
    return reinterpret_cast<const FirmwareUpdateProgressEvent*>(
               &_FirmwareUpdateProgressEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FirmwareUpdateProgressEvent* other);
  friend void swap(FirmwareUpdateProgressEvent& a, FirmwareUpdateProgressEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirmwareUpdateProgressEvent* New() const final {
    return CreateMaybeMessage<FirmwareUpdateProgressEvent>(NULL);
  }

  FirmwareUpdateProgressEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareUpdateProgressEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirmwareUpdateProgressEvent& from);
  void MergeFrom(const FirmwareUpdateProgressEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareUpdateProgressEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.FirmwareUpdateProgress progress = 1;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 1;
  private:
  const ::logi::proto::FirmwareUpdateProgress& _internal_progress() const;
  public:
  const ::logi::proto::FirmwareUpdateProgress& progress() const;
  ::logi::proto::FirmwareUpdateProgress* release_progress();
  ::logi::proto::FirmwareUpdateProgress* mutable_progress();
  void set_allocated_progress(::logi::proto::FirmwareUpdateProgress* progress);

  // @@protoc_insertion_point(class_scope:logi.proto.FirmwareUpdateProgressEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::logi::proto::FirmwareUpdateProgress* progress_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FirmwareUpdateStartedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.FirmwareUpdateStartedEvent) */ {
 public:
  FirmwareUpdateStartedEvent();
  virtual ~FirmwareUpdateStartedEvent();

  FirmwareUpdateStartedEvent(const FirmwareUpdateStartedEvent& from);

  inline FirmwareUpdateStartedEvent& operator=(const FirmwareUpdateStartedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirmwareUpdateStartedEvent(FirmwareUpdateStartedEvent&& from) noexcept
    : FirmwareUpdateStartedEvent() {
    *this = ::std::move(from);
  }

  inline FirmwareUpdateStartedEvent& operator=(FirmwareUpdateStartedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirmwareUpdateStartedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareUpdateStartedEvent* internal_default_instance() {
    return reinterpret_cast<const FirmwareUpdateStartedEvent*>(
               &_FirmwareUpdateStartedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FirmwareUpdateStartedEvent* other);
  friend void swap(FirmwareUpdateStartedEvent& a, FirmwareUpdateStartedEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirmwareUpdateStartedEvent* New() const final {
    return CreateMaybeMessage<FirmwareUpdateStartedEvent>(NULL);
  }

  FirmwareUpdateStartedEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareUpdateStartedEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirmwareUpdateStartedEvent& from);
  void MergeFrom(const FirmwareUpdateStartedEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareUpdateStartedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // string current_firmware_package_version = 2;
  void clear_current_firmware_package_version();
  static const int kCurrentFirmwarePackageVersionFieldNumber = 2;
  const ::std::string& current_firmware_package_version() const;
  void set_current_firmware_package_version(const ::std::string& value);
  #if LANG_CXX11
  void set_current_firmware_package_version(::std::string&& value);
  #endif
  void set_current_firmware_package_version(const char* value);
  void set_current_firmware_package_version(const char* value, size_t size);
  ::std::string* mutable_current_firmware_package_version();
  ::std::string* release_current_firmware_package_version();
  void set_allocated_current_firmware_package_version(::std::string* current_firmware_package_version);

  // string new_firmware_package_version = 3;
  void clear_new_firmware_package_version();
  static const int kNewFirmwarePackageVersionFieldNumber = 3;
  const ::std::string& new_firmware_package_version() const;
  void set_new_firmware_package_version(const ::std::string& value);
  #if LANG_CXX11
  void set_new_firmware_package_version(::std::string&& value);
  #endif
  void set_new_firmware_package_version(const char* value);
  void set_new_firmware_package_version(const char* value, size_t size);
  ::std::string* mutable_new_firmware_package_version();
  ::std::string* release_new_firmware_package_version();
  void set_allocated_new_firmware_package_version(::std::string* new_firmware_package_version);

  // @@protoc_insertion_point(class_scope:logi.proto.FirmwareUpdateStartedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  ::google::protobuf::internal::ArenaStringPtr current_firmware_package_version_;
  ::google::protobuf::internal::ArenaStringPtr new_firmware_package_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FirmwareUpdateCompletedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.FirmwareUpdateCompletedEvent) */ {
 public:
  FirmwareUpdateCompletedEvent();
  virtual ~FirmwareUpdateCompletedEvent();

  FirmwareUpdateCompletedEvent(const FirmwareUpdateCompletedEvent& from);

  inline FirmwareUpdateCompletedEvent& operator=(const FirmwareUpdateCompletedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirmwareUpdateCompletedEvent(FirmwareUpdateCompletedEvent&& from) noexcept
    : FirmwareUpdateCompletedEvent() {
    *this = ::std::move(from);
  }

  inline FirmwareUpdateCompletedEvent& operator=(FirmwareUpdateCompletedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirmwareUpdateCompletedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareUpdateCompletedEvent* internal_default_instance() {
    return reinterpret_cast<const FirmwareUpdateCompletedEvent*>(
               &_FirmwareUpdateCompletedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FirmwareUpdateCompletedEvent* other);
  friend void swap(FirmwareUpdateCompletedEvent& a, FirmwareUpdateCompletedEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirmwareUpdateCompletedEvent* New() const final {
    return CreateMaybeMessage<FirmwareUpdateCompletedEvent>(NULL);
  }

  FirmwareUpdateCompletedEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareUpdateCompletedEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirmwareUpdateCompletedEvent& from);
  void MergeFrom(const FirmwareUpdateCompletedEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareUpdateCompletedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // string new_firmware_package_version = 2;
  void clear_new_firmware_package_version();
  static const int kNewFirmwarePackageVersionFieldNumber = 2;
  const ::std::string& new_firmware_package_version() const;
  void set_new_firmware_package_version(const ::std::string& value);
  #if LANG_CXX11
  void set_new_firmware_package_version(::std::string&& value);
  #endif
  void set_new_firmware_package_version(const char* value);
  void set_new_firmware_package_version(const char* value, size_t size);
  ::std::string* mutable_new_firmware_package_version();
  ::std::string* release_new_firmware_package_version();
  void set_allocated_new_firmware_package_version(::std::string* new_firmware_package_version);

  // @@protoc_insertion_point(class_scope:logi.proto.FirmwareUpdateCompletedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  ::google::protobuf::internal::ArenaStringPtr new_firmware_package_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FirmwareUpdateErrorEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.FirmwareUpdateErrorEvent) */ {
 public:
  FirmwareUpdateErrorEvent();
  virtual ~FirmwareUpdateErrorEvent();

  FirmwareUpdateErrorEvent(const FirmwareUpdateErrorEvent& from);

  inline FirmwareUpdateErrorEvent& operator=(const FirmwareUpdateErrorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirmwareUpdateErrorEvent(FirmwareUpdateErrorEvent&& from) noexcept
    : FirmwareUpdateErrorEvent() {
    *this = ::std::move(from);
  }

  inline FirmwareUpdateErrorEvent& operator=(FirmwareUpdateErrorEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirmwareUpdateErrorEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareUpdateErrorEvent* internal_default_instance() {
    return reinterpret_cast<const FirmwareUpdateErrorEvent*>(
               &_FirmwareUpdateErrorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FirmwareUpdateErrorEvent* other);
  friend void swap(FirmwareUpdateErrorEvent& a, FirmwareUpdateErrorEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirmwareUpdateErrorEvent* New() const final {
    return CreateMaybeMessage<FirmwareUpdateErrorEvent>(NULL);
  }

  FirmwareUpdateErrorEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareUpdateErrorEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirmwareUpdateErrorEvent& from);
  void MergeFrom(const FirmwareUpdateErrorEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareUpdateErrorEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Error errors = 2;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 2;
  ::logi::proto::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
      mutable_errors();
  const ::logi::proto::Error& errors(int index) const;
  ::logi::proto::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
      errors() const;

  // string product_uuid = 1;
  void clear_product_uuid();
  static const int kProductUuidFieldNumber = 1;
  const ::std::string& product_uuid() const;
  void set_product_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_product_uuid(::std::string&& value);
  #endif
  void set_product_uuid(const char* value);
  void set_product_uuid(const char* value, size_t size);
  ::std::string* mutable_product_uuid();
  ::std::string* release_product_uuid();
  void set_allocated_product_uuid(::std::string* product_uuid);

  // @@protoc_insertion_point(class_scope:logi.proto.FirmwareUpdateErrorEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error > errors_;
  ::google::protobuf::internal::ArenaStringPtr product_uuid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_firmware_5fevents_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FirmwareEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.FirmwareEvent) */ {
 public:
  FirmwareEvent();
  virtual ~FirmwareEvent();

  FirmwareEvent(const FirmwareEvent& from);

  inline FirmwareEvent& operator=(const FirmwareEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirmwareEvent(FirmwareEvent&& from) noexcept
    : FirmwareEvent() {
    *this = ::std::move(from);
  }

  inline FirmwareEvent& operator=(FirmwareEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirmwareEvent& default_instance();

  enum EventCase {
    kFirmwareUpdateProgressEvent = 1,
    kFirmwareUpdateStartedEvent = 2,
    kFirmwareUpdateErrorEvent = 3,
    kFirmwareUpdateCompletedEvent = 4,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirmwareEvent* internal_default_instance() {
    return reinterpret_cast<const FirmwareEvent*>(
               &_FirmwareEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FirmwareEvent* other);
  friend void swap(FirmwareEvent& a, FirmwareEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirmwareEvent* New() const final {
    return CreateMaybeMessage<FirmwareEvent>(NULL);
  }

  FirmwareEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirmwareEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirmwareEvent& from);
  void MergeFrom(const FirmwareEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirmwareEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.FirmwareUpdateProgressEvent firmware_update_progress_event = 1;
  bool has_firmware_update_progress_event() const;
  void clear_firmware_update_progress_event();
  static const int kFirmwareUpdateProgressEventFieldNumber = 1;
  private:
  const ::logi::proto::FirmwareUpdateProgressEvent& _internal_firmware_update_progress_event() const;
  public:
  const ::logi::proto::FirmwareUpdateProgressEvent& firmware_update_progress_event() const;
  ::logi::proto::FirmwareUpdateProgressEvent* release_firmware_update_progress_event();
  ::logi::proto::FirmwareUpdateProgressEvent* mutable_firmware_update_progress_event();
  void set_allocated_firmware_update_progress_event(::logi::proto::FirmwareUpdateProgressEvent* firmware_update_progress_event);

  // .logi.proto.FirmwareUpdateStartedEvent firmware_update_started_event = 2;
  bool has_firmware_update_started_event() const;
  void clear_firmware_update_started_event();
  static const int kFirmwareUpdateStartedEventFieldNumber = 2;
  private:
  const ::logi::proto::FirmwareUpdateStartedEvent& _internal_firmware_update_started_event() const;
  public:
  const ::logi::proto::FirmwareUpdateStartedEvent& firmware_update_started_event() const;
  ::logi::proto::FirmwareUpdateStartedEvent* release_firmware_update_started_event();
  ::logi::proto::FirmwareUpdateStartedEvent* mutable_firmware_update_started_event();
  void set_allocated_firmware_update_started_event(::logi::proto::FirmwareUpdateStartedEvent* firmware_update_started_event);

  // .logi.proto.FirmwareUpdateErrorEvent firmware_update_error_event = 3;
  bool has_firmware_update_error_event() const;
  void clear_firmware_update_error_event();
  static const int kFirmwareUpdateErrorEventFieldNumber = 3;
  private:
  const ::logi::proto::FirmwareUpdateErrorEvent& _internal_firmware_update_error_event() const;
  public:
  const ::logi::proto::FirmwareUpdateErrorEvent& firmware_update_error_event() const;
  ::logi::proto::FirmwareUpdateErrorEvent* release_firmware_update_error_event();
  ::logi::proto::FirmwareUpdateErrorEvent* mutable_firmware_update_error_event();
  void set_allocated_firmware_update_error_event(::logi::proto::FirmwareUpdateErrorEvent* firmware_update_error_event);

  // .logi.proto.FirmwareUpdateCompletedEvent firmware_update_completed_event = 4;
  bool has_firmware_update_completed_event() const;
  void clear_firmware_update_completed_event();
  static const int kFirmwareUpdateCompletedEventFieldNumber = 4;
  private:
  const ::logi::proto::FirmwareUpdateCompletedEvent& _internal_firmware_update_completed_event() const;
  public:
  const ::logi::proto::FirmwareUpdateCompletedEvent& firmware_update_completed_event() const;
  ::logi::proto::FirmwareUpdateCompletedEvent* release_firmware_update_completed_event();
  ::logi::proto::FirmwareUpdateCompletedEvent* mutable_firmware_update_completed_event();
  void set_allocated_firmware_update_completed_event(::logi::proto::FirmwareUpdateCompletedEvent* firmware_update_completed_event);

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.FirmwareEvent)
 private:
  void set_has_firmware_update_progress_event();
  void set_has_firmware_update_started_event();
  void set_has_firmware_update_error_event();
  void set_has_firmware_update_completed_event();

  inline bool has_event() const;
  inline void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union EventUnion {
    EventUnion() {}
    ::logi::proto::FirmwareUpdateProgressEvent* firmware_update_progress_event_;
    ::logi::proto::FirmwareUpdateStartedEvent* firmware_update_started_event_;
    ::logi::proto::FirmwareUpdateErrorEvent* firmware_update_error_event_;
    ::logi::proto::FirmwareUpdateCompletedEvent* firmware_update_completed_event_;
  } event_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_firmware_5fevents_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FirmwareUpdateProgressEvent

// .logi.proto.FirmwareUpdateProgress progress = 1;
inline bool FirmwareUpdateProgressEvent::has_progress() const {
  return this != internal_default_instance() && progress_ != NULL;
}
inline const ::logi::proto::FirmwareUpdateProgress& FirmwareUpdateProgressEvent::_internal_progress() const {
  return *progress_;
}
inline const ::logi::proto::FirmwareUpdateProgress& FirmwareUpdateProgressEvent::progress() const {
  const ::logi::proto::FirmwareUpdateProgress* p = progress_;
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareUpdateProgressEvent.progress)
  return p != NULL ? *p : *reinterpret_cast<const ::logi::proto::FirmwareUpdateProgress*>(
      &::logi::proto::_FirmwareUpdateProgress_default_instance_);
}
inline ::logi::proto::FirmwareUpdateProgress* FirmwareUpdateProgressEvent::release_progress() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareUpdateProgressEvent.progress)
  
  ::logi::proto::FirmwareUpdateProgress* temp = progress_;
  progress_ = NULL;
  return temp;
}
inline ::logi::proto::FirmwareUpdateProgress* FirmwareUpdateProgressEvent::mutable_progress() {
  
  if (progress_ == NULL) {
    auto* p = CreateMaybeMessage<::logi::proto::FirmwareUpdateProgress>(GetArenaNoVirtual());
    progress_ = p;
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareUpdateProgressEvent.progress)
  return progress_;
}
inline void FirmwareUpdateProgressEvent::set_allocated_progress(::logi::proto::FirmwareUpdateProgress* progress) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(progress_);
  }
  if (progress) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      progress = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareUpdateProgressEvent.progress)
}

// -------------------------------------------------------------------

// FirmwareUpdateStartedEvent

// string product_uuid = 1;
inline void FirmwareUpdateStartedEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FirmwareUpdateStartedEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareUpdateStartedEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void FirmwareUpdateStartedEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.FirmwareUpdateStartedEvent.product_uuid)
}
#if LANG_CXX11
inline void FirmwareUpdateStartedEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.FirmwareUpdateStartedEvent.product_uuid)
}
#endif
inline void FirmwareUpdateStartedEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.FirmwareUpdateStartedEvent.product_uuid)
}
inline void FirmwareUpdateStartedEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.FirmwareUpdateStartedEvent.product_uuid)
}
inline ::std::string* FirmwareUpdateStartedEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareUpdateStartedEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirmwareUpdateStartedEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareUpdateStartedEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirmwareUpdateStartedEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareUpdateStartedEvent.product_uuid)
}

// string current_firmware_package_version = 2;
inline void FirmwareUpdateStartedEvent::clear_current_firmware_package_version() {
  current_firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FirmwareUpdateStartedEvent::current_firmware_package_version() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version)
  return current_firmware_package_version_.GetNoArena();
}
inline void FirmwareUpdateStartedEvent::set_current_firmware_package_version(const ::std::string& value) {
  
  current_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version)
}
#if LANG_CXX11
inline void FirmwareUpdateStartedEvent::set_current_firmware_package_version(::std::string&& value) {
  
  current_firmware_package_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version)
}
#endif
inline void FirmwareUpdateStartedEvent::set_current_firmware_package_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  current_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version)
}
inline void FirmwareUpdateStartedEvent::set_current_firmware_package_version(const char* value, size_t size) {
  
  current_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version)
}
inline ::std::string* FirmwareUpdateStartedEvent::mutable_current_firmware_package_version() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version)
  return current_firmware_package_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirmwareUpdateStartedEvent::release_current_firmware_package_version() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version)
  
  return current_firmware_package_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirmwareUpdateStartedEvent::set_allocated_current_firmware_package_version(::std::string* current_firmware_package_version) {
  if (current_firmware_package_version != NULL) {
    
  } else {
    
  }
  current_firmware_package_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_firmware_package_version);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareUpdateStartedEvent.current_firmware_package_version)
}

// string new_firmware_package_version = 3;
inline void FirmwareUpdateStartedEvent::clear_new_firmware_package_version() {
  new_firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FirmwareUpdateStartedEvent::new_firmware_package_version() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version)
  return new_firmware_package_version_.GetNoArena();
}
inline void FirmwareUpdateStartedEvent::set_new_firmware_package_version(const ::std::string& value) {
  
  new_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version)
}
#if LANG_CXX11
inline void FirmwareUpdateStartedEvent::set_new_firmware_package_version(::std::string&& value) {
  
  new_firmware_package_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version)
}
#endif
inline void FirmwareUpdateStartedEvent::set_new_firmware_package_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version)
}
inline void FirmwareUpdateStartedEvent::set_new_firmware_package_version(const char* value, size_t size) {
  
  new_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version)
}
inline ::std::string* FirmwareUpdateStartedEvent::mutable_new_firmware_package_version() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version)
  return new_firmware_package_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirmwareUpdateStartedEvent::release_new_firmware_package_version() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version)
  
  return new_firmware_package_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirmwareUpdateStartedEvent::set_allocated_new_firmware_package_version(::std::string* new_firmware_package_version) {
  if (new_firmware_package_version != NULL) {
    
  } else {
    
  }
  new_firmware_package_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_firmware_package_version);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareUpdateStartedEvent.new_firmware_package_version)
}

// -------------------------------------------------------------------

// FirmwareUpdateCompletedEvent

// string product_uuid = 1;
inline void FirmwareUpdateCompletedEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FirmwareUpdateCompletedEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareUpdateCompletedEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void FirmwareUpdateCompletedEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.FirmwareUpdateCompletedEvent.product_uuid)
}
#if LANG_CXX11
inline void FirmwareUpdateCompletedEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.FirmwareUpdateCompletedEvent.product_uuid)
}
#endif
inline void FirmwareUpdateCompletedEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.FirmwareUpdateCompletedEvent.product_uuid)
}
inline void FirmwareUpdateCompletedEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.FirmwareUpdateCompletedEvent.product_uuid)
}
inline ::std::string* FirmwareUpdateCompletedEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareUpdateCompletedEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirmwareUpdateCompletedEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareUpdateCompletedEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirmwareUpdateCompletedEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareUpdateCompletedEvent.product_uuid)
}

// string new_firmware_package_version = 2;
inline void FirmwareUpdateCompletedEvent::clear_new_firmware_package_version() {
  new_firmware_package_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FirmwareUpdateCompletedEvent::new_firmware_package_version() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version)
  return new_firmware_package_version_.GetNoArena();
}
inline void FirmwareUpdateCompletedEvent::set_new_firmware_package_version(const ::std::string& value) {
  
  new_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version)
}
#if LANG_CXX11
inline void FirmwareUpdateCompletedEvent::set_new_firmware_package_version(::std::string&& value) {
  
  new_firmware_package_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version)
}
#endif
inline void FirmwareUpdateCompletedEvent::set_new_firmware_package_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version)
}
inline void FirmwareUpdateCompletedEvent::set_new_firmware_package_version(const char* value, size_t size) {
  
  new_firmware_package_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version)
}
inline ::std::string* FirmwareUpdateCompletedEvent::mutable_new_firmware_package_version() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version)
  return new_firmware_package_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirmwareUpdateCompletedEvent::release_new_firmware_package_version() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version)
  
  return new_firmware_package_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirmwareUpdateCompletedEvent::set_allocated_new_firmware_package_version(::std::string* new_firmware_package_version) {
  if (new_firmware_package_version != NULL) {
    
  } else {
    
  }
  new_firmware_package_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_firmware_package_version);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareUpdateCompletedEvent.new_firmware_package_version)
}

// -------------------------------------------------------------------

// FirmwareUpdateErrorEvent

// string product_uuid = 1;
inline void FirmwareUpdateErrorEvent::clear_product_uuid() {
  product_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FirmwareUpdateErrorEvent::product_uuid() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareUpdateErrorEvent.product_uuid)
  return product_uuid_.GetNoArena();
}
inline void FirmwareUpdateErrorEvent::set_product_uuid(const ::std::string& value) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.FirmwareUpdateErrorEvent.product_uuid)
}
#if LANG_CXX11
inline void FirmwareUpdateErrorEvent::set_product_uuid(::std::string&& value) {
  
  product_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.FirmwareUpdateErrorEvent.product_uuid)
}
#endif
inline void FirmwareUpdateErrorEvent::set_product_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.FirmwareUpdateErrorEvent.product_uuid)
}
inline void FirmwareUpdateErrorEvent::set_product_uuid(const char* value, size_t size) {
  
  product_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.FirmwareUpdateErrorEvent.product_uuid)
}
inline ::std::string* FirmwareUpdateErrorEvent::mutable_product_uuid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareUpdateErrorEvent.product_uuid)
  return product_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirmwareUpdateErrorEvent::release_product_uuid() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareUpdateErrorEvent.product_uuid)
  
  return product_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirmwareUpdateErrorEvent::set_allocated_product_uuid(::std::string* product_uuid) {
  if (product_uuid != NULL) {
    
  } else {
    
  }
  product_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_uuid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.FirmwareUpdateErrorEvent.product_uuid)
}

// repeated .logi.proto.Error errors = 2;
inline int FirmwareUpdateErrorEvent::errors_size() const {
  return errors_.size();
}
inline ::logi::proto::Error* FirmwareUpdateErrorEvent::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareUpdateErrorEvent.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
FirmwareUpdateErrorEvent::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.FirmwareUpdateErrorEvent.errors)
  return &errors_;
}
inline const ::logi::proto::Error& FirmwareUpdateErrorEvent::errors(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareUpdateErrorEvent.errors)
  return errors_.Get(index);
}
inline ::logi::proto::Error* FirmwareUpdateErrorEvent::add_errors() {
  // @@protoc_insertion_point(field_add:logi.proto.FirmwareUpdateErrorEvent.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
FirmwareUpdateErrorEvent::errors() const {
  // @@protoc_insertion_point(field_list:logi.proto.FirmwareUpdateErrorEvent.errors)
  return errors_;
}

// -------------------------------------------------------------------

// FirmwareEvent

// .logi.proto.FirmwareUpdateProgressEvent firmware_update_progress_event = 1;
inline bool FirmwareEvent::has_firmware_update_progress_event() const {
  return event_case() == kFirmwareUpdateProgressEvent;
}
inline void FirmwareEvent::set_has_firmware_update_progress_event() {
  _oneof_case_[0] = kFirmwareUpdateProgressEvent;
}
inline void FirmwareEvent::clear_firmware_update_progress_event() {
  if (has_firmware_update_progress_event()) {
    delete event_.firmware_update_progress_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::FirmwareUpdateProgressEvent& FirmwareEvent::_internal_firmware_update_progress_event() const {
  return *event_.firmware_update_progress_event_;
}
inline ::logi::proto::FirmwareUpdateProgressEvent* FirmwareEvent::release_firmware_update_progress_event() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareEvent.firmware_update_progress_event)
  if (has_firmware_update_progress_event()) {
    clear_has_event();
      ::logi::proto::FirmwareUpdateProgressEvent* temp = event_.firmware_update_progress_event_;
    event_.firmware_update_progress_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::FirmwareUpdateProgressEvent& FirmwareEvent::firmware_update_progress_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareEvent.firmware_update_progress_event)
  return has_firmware_update_progress_event()
      ? *event_.firmware_update_progress_event_
      : *reinterpret_cast< ::logi::proto::FirmwareUpdateProgressEvent*>(&::logi::proto::_FirmwareUpdateProgressEvent_default_instance_);
}
inline ::logi::proto::FirmwareUpdateProgressEvent* FirmwareEvent::mutable_firmware_update_progress_event() {
  if (!has_firmware_update_progress_event()) {
    clear_event();
    set_has_firmware_update_progress_event();
    event_.firmware_update_progress_event_ = CreateMaybeMessage< ::logi::proto::FirmwareUpdateProgressEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareEvent.firmware_update_progress_event)
  return event_.firmware_update_progress_event_;
}

// .logi.proto.FirmwareUpdateStartedEvent firmware_update_started_event = 2;
inline bool FirmwareEvent::has_firmware_update_started_event() const {
  return event_case() == kFirmwareUpdateStartedEvent;
}
inline void FirmwareEvent::set_has_firmware_update_started_event() {
  _oneof_case_[0] = kFirmwareUpdateStartedEvent;
}
inline void FirmwareEvent::clear_firmware_update_started_event() {
  if (has_firmware_update_started_event()) {
    delete event_.firmware_update_started_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::FirmwareUpdateStartedEvent& FirmwareEvent::_internal_firmware_update_started_event() const {
  return *event_.firmware_update_started_event_;
}
inline ::logi::proto::FirmwareUpdateStartedEvent* FirmwareEvent::release_firmware_update_started_event() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareEvent.firmware_update_started_event)
  if (has_firmware_update_started_event()) {
    clear_has_event();
      ::logi::proto::FirmwareUpdateStartedEvent* temp = event_.firmware_update_started_event_;
    event_.firmware_update_started_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::FirmwareUpdateStartedEvent& FirmwareEvent::firmware_update_started_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareEvent.firmware_update_started_event)
  return has_firmware_update_started_event()
      ? *event_.firmware_update_started_event_
      : *reinterpret_cast< ::logi::proto::FirmwareUpdateStartedEvent*>(&::logi::proto::_FirmwareUpdateStartedEvent_default_instance_);
}
inline ::logi::proto::FirmwareUpdateStartedEvent* FirmwareEvent::mutable_firmware_update_started_event() {
  if (!has_firmware_update_started_event()) {
    clear_event();
    set_has_firmware_update_started_event();
    event_.firmware_update_started_event_ = CreateMaybeMessage< ::logi::proto::FirmwareUpdateStartedEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareEvent.firmware_update_started_event)
  return event_.firmware_update_started_event_;
}

// .logi.proto.FirmwareUpdateErrorEvent firmware_update_error_event = 3;
inline bool FirmwareEvent::has_firmware_update_error_event() const {
  return event_case() == kFirmwareUpdateErrorEvent;
}
inline void FirmwareEvent::set_has_firmware_update_error_event() {
  _oneof_case_[0] = kFirmwareUpdateErrorEvent;
}
inline void FirmwareEvent::clear_firmware_update_error_event() {
  if (has_firmware_update_error_event()) {
    delete event_.firmware_update_error_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::FirmwareUpdateErrorEvent& FirmwareEvent::_internal_firmware_update_error_event() const {
  return *event_.firmware_update_error_event_;
}
inline ::logi::proto::FirmwareUpdateErrorEvent* FirmwareEvent::release_firmware_update_error_event() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareEvent.firmware_update_error_event)
  if (has_firmware_update_error_event()) {
    clear_has_event();
      ::logi::proto::FirmwareUpdateErrorEvent* temp = event_.firmware_update_error_event_;
    event_.firmware_update_error_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::FirmwareUpdateErrorEvent& FirmwareEvent::firmware_update_error_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareEvent.firmware_update_error_event)
  return has_firmware_update_error_event()
      ? *event_.firmware_update_error_event_
      : *reinterpret_cast< ::logi::proto::FirmwareUpdateErrorEvent*>(&::logi::proto::_FirmwareUpdateErrorEvent_default_instance_);
}
inline ::logi::proto::FirmwareUpdateErrorEvent* FirmwareEvent::mutable_firmware_update_error_event() {
  if (!has_firmware_update_error_event()) {
    clear_event();
    set_has_firmware_update_error_event();
    event_.firmware_update_error_event_ = CreateMaybeMessage< ::logi::proto::FirmwareUpdateErrorEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareEvent.firmware_update_error_event)
  return event_.firmware_update_error_event_;
}

// .logi.proto.FirmwareUpdateCompletedEvent firmware_update_completed_event = 4;
inline bool FirmwareEvent::has_firmware_update_completed_event() const {
  return event_case() == kFirmwareUpdateCompletedEvent;
}
inline void FirmwareEvent::set_has_firmware_update_completed_event() {
  _oneof_case_[0] = kFirmwareUpdateCompletedEvent;
}
inline void FirmwareEvent::clear_firmware_update_completed_event() {
  if (has_firmware_update_completed_event()) {
    delete event_.firmware_update_completed_event_;
    clear_has_event();
  }
}
inline const ::logi::proto::FirmwareUpdateCompletedEvent& FirmwareEvent::_internal_firmware_update_completed_event() const {
  return *event_.firmware_update_completed_event_;
}
inline ::logi::proto::FirmwareUpdateCompletedEvent* FirmwareEvent::release_firmware_update_completed_event() {
  // @@protoc_insertion_point(field_release:logi.proto.FirmwareEvent.firmware_update_completed_event)
  if (has_firmware_update_completed_event()) {
    clear_has_event();
      ::logi::proto::FirmwareUpdateCompletedEvent* temp = event_.firmware_update_completed_event_;
    event_.firmware_update_completed_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::FirmwareUpdateCompletedEvent& FirmwareEvent::firmware_update_completed_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.FirmwareEvent.firmware_update_completed_event)
  return has_firmware_update_completed_event()
      ? *event_.firmware_update_completed_event_
      : *reinterpret_cast< ::logi::proto::FirmwareUpdateCompletedEvent*>(&::logi::proto::_FirmwareUpdateCompletedEvent_default_instance_);
}
inline ::logi::proto::FirmwareUpdateCompletedEvent* FirmwareEvent::mutable_firmware_update_completed_event() {
  if (!has_firmware_update_completed_event()) {
    clear_event();
    set_has_firmware_update_completed_event();
    event_.firmware_update_completed_event_ = CreateMaybeMessage< ::logi::proto::FirmwareUpdateCompletedEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.FirmwareEvent.firmware_update_completed_event)
  return event_.firmware_update_completed_event_;
}

inline bool FirmwareEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void FirmwareEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline FirmwareEvent::EventCase FirmwareEvent::event_case() const {
  return FirmwareEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_firmware_5fevents_2eproto
