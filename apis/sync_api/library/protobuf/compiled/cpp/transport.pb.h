// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef PROTOBUF_INCLUDED_transport_2eproto
#define PROTOBUF_INCLUDED_transport_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "product_state_events.pb.h"
#include "product_state_requests.pb.h"
#include "firmware_events.pb.h"
#include "firmware_requests.pb.h"
#include "connection_events.pb.h"
#include "configuration_requests.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto 

namespace protobuf_transport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_transport_2eproto
namespace logi {
namespace proto {
class Ack;
class AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Kill;
class KillDefaultTypeInternal;
extern KillDefaultTypeInternal _Kill_default_instance_;
class LogiSyncMessage;
class LogiSyncMessageDefaultTypeInternal;
extern LogiSyncMessageDefaultTypeInternal _LogiSyncMessage_default_instance_;
class Pong;
class PongDefaultTypeInternal;
extern PongDefaultTypeInternal _Pong_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace proto
}  // namespace logi
namespace google {
namespace protobuf {
template<> ::logi::proto::Ack* Arena::CreateMaybeMessage<::logi::proto::Ack>(Arena*);
template<> ::logi::proto::Event* Arena::CreateMaybeMessage<::logi::proto::Event>(Arena*);
template<> ::logi::proto::Header* Arena::CreateMaybeMessage<::logi::proto::Header>(Arena*);
template<> ::logi::proto::Kill* Arena::CreateMaybeMessage<::logi::proto::Kill>(Arena*);
template<> ::logi::proto::LogiSyncMessage* Arena::CreateMaybeMessage<::logi::proto::LogiSyncMessage>(Arena*);
template<> ::logi::proto::Pong* Arena::CreateMaybeMessage<::logi::proto::Pong>(Arena*);
template<> ::logi::proto::Request* Arena::CreateMaybeMessage<::logi::proto::Request>(Arena*);
template<> ::logi::proto::Response* Arena::CreateMaybeMessage<::logi::proto::Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace logi {
namespace proto {

// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_context = 2;
  void clear_user_context();
  static const int kUserContextFieldNumber = 2;
  const ::std::string& user_context() const;
  void set_user_context(const ::std::string& value);
  #if LANG_CXX11
  void set_user_context(::std::string&& value);
  #endif
  void set_user_context(const char* value);
  void set_user_context(const char* value, size_t size);
  ::std::string* mutable_user_context();
  ::std::string* release_user_context();
  void set_allocated_user_context(::std::string* user_context);

  // string guid = 3;
  void clear_guid();
  static const int kGuidFieldNumber = 3;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // uint32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:logi.proto.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_context_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  double timestamp_;
  ::google::protobuf::uint32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogiSyncMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.LogiSyncMessage) */ {
 public:
  LogiSyncMessage();
  virtual ~LogiSyncMessage();

  LogiSyncMessage(const LogiSyncMessage& from);

  inline LogiSyncMessage& operator=(const LogiSyncMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogiSyncMessage(LogiSyncMessage&& from) noexcept
    : LogiSyncMessage() {
    *this = ::std::move(from);
  }

  inline LogiSyncMessage& operator=(LogiSyncMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogiSyncMessage& default_instance();

  enum MessageCase {
    kAck = 2,
    kRequest = 3,
    kResponse = 4,
    kEvent = 5,
    kPong = 6,
    kKill = 7,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogiSyncMessage* internal_default_instance() {
    return reinterpret_cast<const LogiSyncMessage*>(
               &_LogiSyncMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LogiSyncMessage* other);
  friend void swap(LogiSyncMessage& a, LogiSyncMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogiSyncMessage* New() const final {
    return CreateMaybeMessage<LogiSyncMessage>(NULL);
  }

  LogiSyncMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogiSyncMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogiSyncMessage& from);
  void MergeFrom(const LogiSyncMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogiSyncMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::logi::proto::Header& _internal_header() const;
  public:
  const ::logi::proto::Header& header() const;
  ::logi::proto::Header* release_header();
  ::logi::proto::Header* mutable_header();
  void set_allocated_header(::logi::proto::Header* header);

  // .logi.proto.Ack ack = 2;
  bool has_ack() const;
  void clear_ack();
  static const int kAckFieldNumber = 2;
  private:
  const ::logi::proto::Ack& _internal_ack() const;
  public:
  const ::logi::proto::Ack& ack() const;
  ::logi::proto::Ack* release_ack();
  ::logi::proto::Ack* mutable_ack();
  void set_allocated_ack(::logi::proto::Ack* ack);

  // .logi.proto.Request request = 3;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 3;
  private:
  const ::logi::proto::Request& _internal_request() const;
  public:
  const ::logi::proto::Request& request() const;
  ::logi::proto::Request* release_request();
  ::logi::proto::Request* mutable_request();
  void set_allocated_request(::logi::proto::Request* request);

  // .logi.proto.Response response = 4;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 4;
  private:
  const ::logi::proto::Response& _internal_response() const;
  public:
  const ::logi::proto::Response& response() const;
  ::logi::proto::Response* release_response();
  ::logi::proto::Response* mutable_response();
  void set_allocated_response(::logi::proto::Response* response);

  // .logi.proto.Event event = 5;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 5;
  private:
  const ::logi::proto::Event& _internal_event() const;
  public:
  const ::logi::proto::Event& event() const;
  ::logi::proto::Event* release_event();
  ::logi::proto::Event* mutable_event();
  void set_allocated_event(::logi::proto::Event* event);

  // .logi.proto.Pong pong = 6;
  bool has_pong() const;
  void clear_pong();
  static const int kPongFieldNumber = 6;
  private:
  const ::logi::proto::Pong& _internal_pong() const;
  public:
  const ::logi::proto::Pong& pong() const;
  ::logi::proto::Pong* release_pong();
  ::logi::proto::Pong* mutable_pong();
  void set_allocated_pong(::logi::proto::Pong* pong);

  // .logi.proto.Kill kill = 7;
  bool has_kill() const;
  void clear_kill();
  static const int kKillFieldNumber = 7;
  private:
  const ::logi::proto::Kill& _internal_kill() const;
  public:
  const ::logi::proto::Kill& kill() const;
  ::logi::proto::Kill* release_kill();
  ::logi::proto::Kill* mutable_kill();
  void set_allocated_kill(::logi::proto::Kill* kill);

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.LogiSyncMessage)
 private:
  void set_has_ack();
  void set_has_request();
  void set_has_response();
  void set_has_event();
  void set_has_pong();
  void set_has_kill();

  inline bool has_message() const;
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::logi::proto::Header* header_;
  union MessageUnion {
    MessageUnion() {}
    ::logi::proto::Ack* ack_;
    ::logi::proto::Request* request_;
    ::logi::proto::Response* response_;
    ::logi::proto::Event* event_;
    ::logi::proto::Pong* pong_;
    ::logi::proto::Kill* kill_;
  } message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum PayloadCase {
    kFirmwareRequest = 2,
    kProductRequest = 3,
    kConfigurationRequest = 4,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.FirmwareRequest firmware_request = 2;
  bool has_firmware_request() const;
  void clear_firmware_request();
  static const int kFirmwareRequestFieldNumber = 2;
  private:
  const ::logi::proto::FirmwareRequest& _internal_firmware_request() const;
  public:
  const ::logi::proto::FirmwareRequest& firmware_request() const;
  ::logi::proto::FirmwareRequest* release_firmware_request();
  ::logi::proto::FirmwareRequest* mutable_firmware_request();
  void set_allocated_firmware_request(::logi::proto::FirmwareRequest* firmware_request);

  // .logi.proto.ProductRequest product_request = 3;
  bool has_product_request() const;
  void clear_product_request();
  static const int kProductRequestFieldNumber = 3;
  private:
  const ::logi::proto::ProductRequest& _internal_product_request() const;
  public:
  const ::logi::proto::ProductRequest& product_request() const;
  ::logi::proto::ProductRequest* release_product_request();
  ::logi::proto::ProductRequest* mutable_product_request();
  void set_allocated_product_request(::logi::proto::ProductRequest* product_request);

  // .logi.proto.LogiSyncConfigurationRequest configuration_request = 4;
  bool has_configuration_request() const;
  void clear_configuration_request();
  static const int kConfigurationRequestFieldNumber = 4;
  private:
  const ::logi::proto::LogiSyncConfigurationRequest& _internal_configuration_request() const;
  public:
  const ::logi::proto::LogiSyncConfigurationRequest& configuration_request() const;
  ::logi::proto::LogiSyncConfigurationRequest* release_configuration_request();
  ::logi::proto::LogiSyncConfigurationRequest* mutable_configuration_request();
  void set_allocated_configuration_request(::logi::proto::LogiSyncConfigurationRequest* configuration_request);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.Request)
 private:
  void set_has_firmware_request();
  void set_has_product_request();
  void set_has_configuration_request();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::logi::proto::FirmwareRequest* firmware_request_;
    ::logi::proto::ProductRequest* product_request_;
    ::logi::proto::LogiSyncConfigurationRequest* configuration_request_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum PayloadCase {
    kFirmwareResponse = 2,
    kProductResponse = 3,
    kConfigurationResponse = 4,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.FirmwareResponse firmware_response = 2;
  bool has_firmware_response() const;
  void clear_firmware_response();
  static const int kFirmwareResponseFieldNumber = 2;
  private:
  const ::logi::proto::FirmwareResponse& _internal_firmware_response() const;
  public:
  const ::logi::proto::FirmwareResponse& firmware_response() const;
  ::logi::proto::FirmwareResponse* release_firmware_response();
  ::logi::proto::FirmwareResponse* mutable_firmware_response();
  void set_allocated_firmware_response(::logi::proto::FirmwareResponse* firmware_response);

  // .logi.proto.ProductResponse product_response = 3;
  bool has_product_response() const;
  void clear_product_response();
  static const int kProductResponseFieldNumber = 3;
  private:
  const ::logi::proto::ProductResponse& _internal_product_response() const;
  public:
  const ::logi::proto::ProductResponse& product_response() const;
  ::logi::proto::ProductResponse* release_product_response();
  ::logi::proto::ProductResponse* mutable_product_response();
  void set_allocated_product_response(::logi::proto::ProductResponse* product_response);

  // .logi.proto.LogiSyncConfigurationResponse configuration_response = 4;
  bool has_configuration_response() const;
  void clear_configuration_response();
  static const int kConfigurationResponseFieldNumber = 4;
  private:
  const ::logi::proto::LogiSyncConfigurationResponse& _internal_configuration_response() const;
  public:
  const ::logi::proto::LogiSyncConfigurationResponse& configuration_response() const;
  ::logi::proto::LogiSyncConfigurationResponse* release_configuration_response();
  ::logi::proto::LogiSyncConfigurationResponse* mutable_configuration_response();
  void set_allocated_configuration_response(::logi::proto::LogiSyncConfigurationResponse* configuration_response);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.Response)
 private:
  void set_has_firmware_response();
  void set_has_product_response();
  void set_has_configuration_response();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::logi::proto::FirmwareResponse* firmware_response_;
    ::logi::proto::ProductResponse* product_response_;
    ::logi::proto::LogiSyncConfigurationResponse* configuration_response_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  enum PayloadCase {
    kFirmwareEvent = 2,
    kProductEvent = 3,
    kConnectionEvent = 4,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .logi.proto.FirmwareEvent firmware_event = 2;
  bool has_firmware_event() const;
  void clear_firmware_event();
  static const int kFirmwareEventFieldNumber = 2;
  private:
  const ::logi::proto::FirmwareEvent& _internal_firmware_event() const;
  public:
  const ::logi::proto::FirmwareEvent& firmware_event() const;
  ::logi::proto::FirmwareEvent* release_firmware_event();
  ::logi::proto::FirmwareEvent* mutable_firmware_event();
  void set_allocated_firmware_event(::logi::proto::FirmwareEvent* firmware_event);

  // .logi.proto.ProductEvent product_event = 3;
  bool has_product_event() const;
  void clear_product_event();
  static const int kProductEventFieldNumber = 3;
  private:
  const ::logi::proto::ProductEvent& _internal_product_event() const;
  public:
  const ::logi::proto::ProductEvent& product_event() const;
  ::logi::proto::ProductEvent* release_product_event();
  ::logi::proto::ProductEvent* mutable_product_event();
  void set_allocated_product_event(::logi::proto::ProductEvent* product_event);

  // .logi.proto.ConnectionEvent connection_event = 4;
  bool has_connection_event() const;
  void clear_connection_event();
  static const int kConnectionEventFieldNumber = 4;
  private:
  const ::logi::proto::ConnectionEvent& _internal_connection_event() const;
  public:
  const ::logi::proto::ConnectionEvent& connection_event() const;
  ::logi::proto::ConnectionEvent* release_connection_event();
  ::logi::proto::ConnectionEvent* mutable_connection_event();
  void set_allocated_connection_event(::logi::proto::ConnectionEvent* connection_event);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:logi.proto.Event)
 private:
  void set_has_firmware_event();
  void set_has_product_event();
  void set_has_connection_event();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::logi::proto::FirmwareEvent* firmware_event_;
    ::logi::proto::ProductEvent* product_event_;
    ::logi::proto::ConnectionEvent* connection_event_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Ack) */ {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(Ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Ack* other);
  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ack* New() const final {
    return CreateMaybeMessage<Ack>(NULL);
  }

  Ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .logi.proto.Error errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::logi::proto::Error* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
      mutable_errors();
  const ::logi::proto::Error& errors(int index) const;
  ::logi::proto::Error* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
      errors() const;

  // string response_guid = 2;
  void clear_response_guid();
  static const int kResponseGuidFieldNumber = 2;
  const ::std::string& response_guid() const;
  void set_response_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_response_guid(::std::string&& value);
  #endif
  void set_response_guid(const char* value);
  void set_response_guid(const char* value, size_t size);
  ::std::string* mutable_response_guid();
  ::std::string* release_response_guid();
  void set_allocated_response_guid(::std::string* response_guid);

  // @@protoc_insertion_point(class_scope:logi.proto.Ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::logi::proto::Error > errors_;
  ::google::protobuf::internal::ArenaStringPtr response_guid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Pong) */ {
 public:
  Pong();
  virtual ~Pong();

  Pong(const Pong& from);

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pong(Pong&& from) noexcept
    : Pong() {
    *this = ::std::move(from);
  }

  inline Pong& operator=(Pong&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pong& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pong* internal_default_instance() {
    return reinterpret_cast<const Pong*>(
               &_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Pong* other);
  friend void swap(Pong& a, Pong& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pong* New() const final {
    return CreateMaybeMessage<Pong>(NULL);
  }

  Pong* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pong>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pong* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool reserved = 1;
  void clear_reserved();
  static const int kReservedFieldNumber = 1;
  bool reserved() const;
  void set_reserved(bool value);

  // @@protoc_insertion_point(class_scope:logi.proto.Pong)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool reserved_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Kill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:logi.proto.Kill) */ {
 public:
  Kill();
  virtual ~Kill();

  Kill(const Kill& from);

  inline Kill& operator=(const Kill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Kill(Kill&& from) noexcept
    : Kill() {
    *this = ::std::move(from);
  }

  inline Kill& operator=(Kill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Kill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kill* internal_default_instance() {
    return reinterpret_cast<const Kill*>(
               &_Kill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Kill* other);
  friend void swap(Kill& a, Kill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Kill* New() const final {
    return CreateMaybeMessage<Kill>(NULL);
  }

  Kill* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Kill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Kill& from);
  void MergeFrom(const Kill& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool reserved = 1;
  void clear_reserved();
  static const int kReservedFieldNumber = 1;
  bool reserved() const;
  void set_reserved(bool value);

  // @@protoc_insertion_point(class_scope:logi.proto.Kill)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool reserved_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// double timestamp = 1;
inline void Header::clear_timestamp() {
  timestamp_ = 0;
}
inline double Header::timestamp() const {
  // @@protoc_insertion_point(field_get:logi.proto.Header.timestamp)
  return timestamp_;
}
inline void Header::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Header.timestamp)
}

// string user_context = 2;
inline void Header::clear_user_context() {
  user_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::user_context() const {
  // @@protoc_insertion_point(field_get:logi.proto.Header.user_context)
  return user_context_.GetNoArena();
}
inline void Header::set_user_context(const ::std::string& value) {
  
  user_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Header.user_context)
}
#if LANG_CXX11
inline void Header::set_user_context(::std::string&& value) {
  
  user_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Header.user_context)
}
#endif
inline void Header::set_user_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Header.user_context)
}
inline void Header::set_user_context(const char* value, size_t size) {
  
  user_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Header.user_context)
}
inline ::std::string* Header::mutable_user_context() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Header.user_context)
  return user_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_user_context() {
  // @@protoc_insertion_point(field_release:logi.proto.Header.user_context)
  
  return user_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_user_context(::std::string* user_context) {
  if (user_context != NULL) {
    
  } else {
    
  }
  user_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_context);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Header.user_context)
}

// string guid = 3;
inline void Header::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::guid() const {
  // @@protoc_insertion_point(field_get:logi.proto.Header.guid)
  return guid_.GetNoArena();
}
inline void Header::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Header.guid)
}
#if LANG_CXX11
inline void Header::set_guid(::std::string&& value) {
  
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Header.guid)
}
#endif
inline void Header::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Header.guid)
}
inline void Header::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Header.guid)
}
inline ::std::string* Header::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Header.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_guid() {
  // @@protoc_insertion_point(field_release:logi.proto.Header.guid)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Header.guid)
}

// uint32 status = 4;
inline void Header::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Header::status() const {
  // @@protoc_insertion_point(field_get:logi.proto.Header.status)
  return status_;
}
inline void Header::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Header.status)
}

// -------------------------------------------------------------------

// LogiSyncMessage

// .logi.proto.Header header = 1;
inline bool LogiSyncMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void LogiSyncMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::logi::proto::Header& LogiSyncMessage::_internal_header() const {
  return *header_;
}
inline const ::logi::proto::Header& LogiSyncMessage::header() const {
  const ::logi::proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::logi::proto::Header*>(
      &::logi::proto::_Header_default_instance_);
}
inline ::logi::proto::Header* LogiSyncMessage::release_header() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncMessage.header)
  
  ::logi::proto::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::logi::proto::Header* LogiSyncMessage::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::logi::proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncMessage.header)
  return header_;
}
inline void LogiSyncMessage::set_allocated_header(::logi::proto::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:logi.proto.LogiSyncMessage.header)
}

// .logi.proto.Ack ack = 2;
inline bool LogiSyncMessage::has_ack() const {
  return message_case() == kAck;
}
inline void LogiSyncMessage::set_has_ack() {
  _oneof_case_[0] = kAck;
}
inline void LogiSyncMessage::clear_ack() {
  if (has_ack()) {
    delete message_.ack_;
    clear_has_message();
  }
}
inline const ::logi::proto::Ack& LogiSyncMessage::_internal_ack() const {
  return *message_.ack_;
}
inline ::logi::proto::Ack* LogiSyncMessage::release_ack() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncMessage.ack)
  if (has_ack()) {
    clear_has_message();
      ::logi::proto::Ack* temp = message_.ack_;
    message_.ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::Ack& LogiSyncMessage::ack() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncMessage.ack)
  return has_ack()
      ? *message_.ack_
      : *reinterpret_cast< ::logi::proto::Ack*>(&::logi::proto::_Ack_default_instance_);
}
inline ::logi::proto::Ack* LogiSyncMessage::mutable_ack() {
  if (!has_ack()) {
    clear_message();
    set_has_ack();
    message_.ack_ = CreateMaybeMessage< ::logi::proto::Ack >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncMessage.ack)
  return message_.ack_;
}

// .logi.proto.Request request = 3;
inline bool LogiSyncMessage::has_request() const {
  return message_case() == kRequest;
}
inline void LogiSyncMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void LogiSyncMessage::clear_request() {
  if (has_request()) {
    delete message_.request_;
    clear_has_message();
  }
}
inline const ::logi::proto::Request& LogiSyncMessage::_internal_request() const {
  return *message_.request_;
}
inline ::logi::proto::Request* LogiSyncMessage::release_request() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncMessage.request)
  if (has_request()) {
    clear_has_message();
      ::logi::proto::Request* temp = message_.request_;
    message_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::Request& LogiSyncMessage::request() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncMessage.request)
  return has_request()
      ? *message_.request_
      : *reinterpret_cast< ::logi::proto::Request*>(&::logi::proto::_Request_default_instance_);
}
inline ::logi::proto::Request* LogiSyncMessage::mutable_request() {
  if (!has_request()) {
    clear_message();
    set_has_request();
    message_.request_ = CreateMaybeMessage< ::logi::proto::Request >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncMessage.request)
  return message_.request_;
}

// .logi.proto.Response response = 4;
inline bool LogiSyncMessage::has_response() const {
  return message_case() == kResponse;
}
inline void LogiSyncMessage::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void LogiSyncMessage::clear_response() {
  if (has_response()) {
    delete message_.response_;
    clear_has_message();
  }
}
inline const ::logi::proto::Response& LogiSyncMessage::_internal_response() const {
  return *message_.response_;
}
inline ::logi::proto::Response* LogiSyncMessage::release_response() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncMessage.response)
  if (has_response()) {
    clear_has_message();
      ::logi::proto::Response* temp = message_.response_;
    message_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::Response& LogiSyncMessage::response() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncMessage.response)
  return has_response()
      ? *message_.response_
      : *reinterpret_cast< ::logi::proto::Response*>(&::logi::proto::_Response_default_instance_);
}
inline ::logi::proto::Response* LogiSyncMessage::mutable_response() {
  if (!has_response()) {
    clear_message();
    set_has_response();
    message_.response_ = CreateMaybeMessage< ::logi::proto::Response >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncMessage.response)
  return message_.response_;
}

// .logi.proto.Event event = 5;
inline bool LogiSyncMessage::has_event() const {
  return message_case() == kEvent;
}
inline void LogiSyncMessage::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void LogiSyncMessage::clear_event() {
  if (has_event()) {
    delete message_.event_;
    clear_has_message();
  }
}
inline const ::logi::proto::Event& LogiSyncMessage::_internal_event() const {
  return *message_.event_;
}
inline ::logi::proto::Event* LogiSyncMessage::release_event() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncMessage.event)
  if (has_event()) {
    clear_has_message();
      ::logi::proto::Event* temp = message_.event_;
    message_.event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::Event& LogiSyncMessage::event() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncMessage.event)
  return has_event()
      ? *message_.event_
      : *reinterpret_cast< ::logi::proto::Event*>(&::logi::proto::_Event_default_instance_);
}
inline ::logi::proto::Event* LogiSyncMessage::mutable_event() {
  if (!has_event()) {
    clear_message();
    set_has_event();
    message_.event_ = CreateMaybeMessage< ::logi::proto::Event >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncMessage.event)
  return message_.event_;
}

// .logi.proto.Pong pong = 6;
inline bool LogiSyncMessage::has_pong() const {
  return message_case() == kPong;
}
inline void LogiSyncMessage::set_has_pong() {
  _oneof_case_[0] = kPong;
}
inline void LogiSyncMessage::clear_pong() {
  if (has_pong()) {
    delete message_.pong_;
    clear_has_message();
  }
}
inline const ::logi::proto::Pong& LogiSyncMessage::_internal_pong() const {
  return *message_.pong_;
}
inline ::logi::proto::Pong* LogiSyncMessage::release_pong() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncMessage.pong)
  if (has_pong()) {
    clear_has_message();
      ::logi::proto::Pong* temp = message_.pong_;
    message_.pong_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::Pong& LogiSyncMessage::pong() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncMessage.pong)
  return has_pong()
      ? *message_.pong_
      : *reinterpret_cast< ::logi::proto::Pong*>(&::logi::proto::_Pong_default_instance_);
}
inline ::logi::proto::Pong* LogiSyncMessage::mutable_pong() {
  if (!has_pong()) {
    clear_message();
    set_has_pong();
    message_.pong_ = CreateMaybeMessage< ::logi::proto::Pong >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncMessage.pong)
  return message_.pong_;
}

// .logi.proto.Kill kill = 7;
inline bool LogiSyncMessage::has_kill() const {
  return message_case() == kKill;
}
inline void LogiSyncMessage::set_has_kill() {
  _oneof_case_[0] = kKill;
}
inline void LogiSyncMessage::clear_kill() {
  if (has_kill()) {
    delete message_.kill_;
    clear_has_message();
  }
}
inline const ::logi::proto::Kill& LogiSyncMessage::_internal_kill() const {
  return *message_.kill_;
}
inline ::logi::proto::Kill* LogiSyncMessage::release_kill() {
  // @@protoc_insertion_point(field_release:logi.proto.LogiSyncMessage.kill)
  if (has_kill()) {
    clear_has_message();
      ::logi::proto::Kill* temp = message_.kill_;
    message_.kill_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::Kill& LogiSyncMessage::kill() const {
  // @@protoc_insertion_point(field_get:logi.proto.LogiSyncMessage.kill)
  return has_kill()
      ? *message_.kill_
      : *reinterpret_cast< ::logi::proto::Kill*>(&::logi::proto::_Kill_default_instance_);
}
inline ::logi::proto::Kill* LogiSyncMessage::mutable_kill() {
  if (!has_kill()) {
    clear_message();
    set_has_kill();
    message_.kill_ = CreateMaybeMessage< ::logi::proto::Kill >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.LogiSyncMessage.kill)
  return message_.kill_;
}

inline bool LogiSyncMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void LogiSyncMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline LogiSyncMessage::MessageCase LogiSyncMessage::message_case() const {
  return LogiSyncMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Request

// .logi.proto.FirmwareRequest firmware_request = 2;
inline bool Request::has_firmware_request() const {
  return payload_case() == kFirmwareRequest;
}
inline void Request::set_has_firmware_request() {
  _oneof_case_[0] = kFirmwareRequest;
}
inline const ::logi::proto::FirmwareRequest& Request::_internal_firmware_request() const {
  return *payload_.firmware_request_;
}
inline ::logi::proto::FirmwareRequest* Request::release_firmware_request() {
  // @@protoc_insertion_point(field_release:logi.proto.Request.firmware_request)
  if (has_firmware_request()) {
    clear_has_payload();
      ::logi::proto::FirmwareRequest* temp = payload_.firmware_request_;
    payload_.firmware_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::FirmwareRequest& Request::firmware_request() const {
  // @@protoc_insertion_point(field_get:logi.proto.Request.firmware_request)
  return has_firmware_request()
      ? *payload_.firmware_request_
      : *reinterpret_cast< ::logi::proto::FirmwareRequest*>(&::logi::proto::_FirmwareRequest_default_instance_);
}
inline ::logi::proto::FirmwareRequest* Request::mutable_firmware_request() {
  if (!has_firmware_request()) {
    clear_payload();
    set_has_firmware_request();
    payload_.firmware_request_ = CreateMaybeMessage< ::logi::proto::FirmwareRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Request.firmware_request)
  return payload_.firmware_request_;
}

// .logi.proto.ProductRequest product_request = 3;
inline bool Request::has_product_request() const {
  return payload_case() == kProductRequest;
}
inline void Request::set_has_product_request() {
  _oneof_case_[0] = kProductRequest;
}
inline const ::logi::proto::ProductRequest& Request::_internal_product_request() const {
  return *payload_.product_request_;
}
inline ::logi::proto::ProductRequest* Request::release_product_request() {
  // @@protoc_insertion_point(field_release:logi.proto.Request.product_request)
  if (has_product_request()) {
    clear_has_payload();
      ::logi::proto::ProductRequest* temp = payload_.product_request_;
    payload_.product_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ProductRequest& Request::product_request() const {
  // @@protoc_insertion_point(field_get:logi.proto.Request.product_request)
  return has_product_request()
      ? *payload_.product_request_
      : *reinterpret_cast< ::logi::proto::ProductRequest*>(&::logi::proto::_ProductRequest_default_instance_);
}
inline ::logi::proto::ProductRequest* Request::mutable_product_request() {
  if (!has_product_request()) {
    clear_payload();
    set_has_product_request();
    payload_.product_request_ = CreateMaybeMessage< ::logi::proto::ProductRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Request.product_request)
  return payload_.product_request_;
}

// .logi.proto.LogiSyncConfigurationRequest configuration_request = 4;
inline bool Request::has_configuration_request() const {
  return payload_case() == kConfigurationRequest;
}
inline void Request::set_has_configuration_request() {
  _oneof_case_[0] = kConfigurationRequest;
}
inline const ::logi::proto::LogiSyncConfigurationRequest& Request::_internal_configuration_request() const {
  return *payload_.configuration_request_;
}
inline ::logi::proto::LogiSyncConfigurationRequest* Request::release_configuration_request() {
  // @@protoc_insertion_point(field_release:logi.proto.Request.configuration_request)
  if (has_configuration_request()) {
    clear_has_payload();
      ::logi::proto::LogiSyncConfigurationRequest* temp = payload_.configuration_request_;
    payload_.configuration_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::LogiSyncConfigurationRequest& Request::configuration_request() const {
  // @@protoc_insertion_point(field_get:logi.proto.Request.configuration_request)
  return has_configuration_request()
      ? *payload_.configuration_request_
      : *reinterpret_cast< ::logi::proto::LogiSyncConfigurationRequest*>(&::logi::proto::_LogiSyncConfigurationRequest_default_instance_);
}
inline ::logi::proto::LogiSyncConfigurationRequest* Request::mutable_configuration_request() {
  if (!has_configuration_request()) {
    clear_payload();
    set_has_configuration_request();
    payload_.configuration_request_ = CreateMaybeMessage< ::logi::proto::LogiSyncConfigurationRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Request.configuration_request)
  return payload_.configuration_request_;
}

inline bool Request::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Request::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Request::PayloadCase Request::payload_case() const {
  return Request::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .logi.proto.FirmwareResponse firmware_response = 2;
inline bool Response::has_firmware_response() const {
  return payload_case() == kFirmwareResponse;
}
inline void Response::set_has_firmware_response() {
  _oneof_case_[0] = kFirmwareResponse;
}
inline const ::logi::proto::FirmwareResponse& Response::_internal_firmware_response() const {
  return *payload_.firmware_response_;
}
inline ::logi::proto::FirmwareResponse* Response::release_firmware_response() {
  // @@protoc_insertion_point(field_release:logi.proto.Response.firmware_response)
  if (has_firmware_response()) {
    clear_has_payload();
      ::logi::proto::FirmwareResponse* temp = payload_.firmware_response_;
    payload_.firmware_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::FirmwareResponse& Response::firmware_response() const {
  // @@protoc_insertion_point(field_get:logi.proto.Response.firmware_response)
  return has_firmware_response()
      ? *payload_.firmware_response_
      : *reinterpret_cast< ::logi::proto::FirmwareResponse*>(&::logi::proto::_FirmwareResponse_default_instance_);
}
inline ::logi::proto::FirmwareResponse* Response::mutable_firmware_response() {
  if (!has_firmware_response()) {
    clear_payload();
    set_has_firmware_response();
    payload_.firmware_response_ = CreateMaybeMessage< ::logi::proto::FirmwareResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Response.firmware_response)
  return payload_.firmware_response_;
}

// .logi.proto.ProductResponse product_response = 3;
inline bool Response::has_product_response() const {
  return payload_case() == kProductResponse;
}
inline void Response::set_has_product_response() {
  _oneof_case_[0] = kProductResponse;
}
inline const ::logi::proto::ProductResponse& Response::_internal_product_response() const {
  return *payload_.product_response_;
}
inline ::logi::proto::ProductResponse* Response::release_product_response() {
  // @@protoc_insertion_point(field_release:logi.proto.Response.product_response)
  if (has_product_response()) {
    clear_has_payload();
      ::logi::proto::ProductResponse* temp = payload_.product_response_;
    payload_.product_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ProductResponse& Response::product_response() const {
  // @@protoc_insertion_point(field_get:logi.proto.Response.product_response)
  return has_product_response()
      ? *payload_.product_response_
      : *reinterpret_cast< ::logi::proto::ProductResponse*>(&::logi::proto::_ProductResponse_default_instance_);
}
inline ::logi::proto::ProductResponse* Response::mutable_product_response() {
  if (!has_product_response()) {
    clear_payload();
    set_has_product_response();
    payload_.product_response_ = CreateMaybeMessage< ::logi::proto::ProductResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Response.product_response)
  return payload_.product_response_;
}

// .logi.proto.LogiSyncConfigurationResponse configuration_response = 4;
inline bool Response::has_configuration_response() const {
  return payload_case() == kConfigurationResponse;
}
inline void Response::set_has_configuration_response() {
  _oneof_case_[0] = kConfigurationResponse;
}
inline const ::logi::proto::LogiSyncConfigurationResponse& Response::_internal_configuration_response() const {
  return *payload_.configuration_response_;
}
inline ::logi::proto::LogiSyncConfigurationResponse* Response::release_configuration_response() {
  // @@protoc_insertion_point(field_release:logi.proto.Response.configuration_response)
  if (has_configuration_response()) {
    clear_has_payload();
      ::logi::proto::LogiSyncConfigurationResponse* temp = payload_.configuration_response_;
    payload_.configuration_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::LogiSyncConfigurationResponse& Response::configuration_response() const {
  // @@protoc_insertion_point(field_get:logi.proto.Response.configuration_response)
  return has_configuration_response()
      ? *payload_.configuration_response_
      : *reinterpret_cast< ::logi::proto::LogiSyncConfigurationResponse*>(&::logi::proto::_LogiSyncConfigurationResponse_default_instance_);
}
inline ::logi::proto::LogiSyncConfigurationResponse* Response::mutable_configuration_response() {
  if (!has_configuration_response()) {
    clear_payload();
    set_has_configuration_response();
    payload_.configuration_response_ = CreateMaybeMessage< ::logi::proto::LogiSyncConfigurationResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Response.configuration_response)
  return payload_.configuration_response_;
}

inline bool Response::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Response::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Response::PayloadCase Response::payload_case() const {
  return Response::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// .logi.proto.FirmwareEvent firmware_event = 2;
inline bool Event::has_firmware_event() const {
  return payload_case() == kFirmwareEvent;
}
inline void Event::set_has_firmware_event() {
  _oneof_case_[0] = kFirmwareEvent;
}
inline const ::logi::proto::FirmwareEvent& Event::_internal_firmware_event() const {
  return *payload_.firmware_event_;
}
inline ::logi::proto::FirmwareEvent* Event::release_firmware_event() {
  // @@protoc_insertion_point(field_release:logi.proto.Event.firmware_event)
  if (has_firmware_event()) {
    clear_has_payload();
      ::logi::proto::FirmwareEvent* temp = payload_.firmware_event_;
    payload_.firmware_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::FirmwareEvent& Event::firmware_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.Event.firmware_event)
  return has_firmware_event()
      ? *payload_.firmware_event_
      : *reinterpret_cast< ::logi::proto::FirmwareEvent*>(&::logi::proto::_FirmwareEvent_default_instance_);
}
inline ::logi::proto::FirmwareEvent* Event::mutable_firmware_event() {
  if (!has_firmware_event()) {
    clear_payload();
    set_has_firmware_event();
    payload_.firmware_event_ = CreateMaybeMessage< ::logi::proto::FirmwareEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Event.firmware_event)
  return payload_.firmware_event_;
}

// .logi.proto.ProductEvent product_event = 3;
inline bool Event::has_product_event() const {
  return payload_case() == kProductEvent;
}
inline void Event::set_has_product_event() {
  _oneof_case_[0] = kProductEvent;
}
inline const ::logi::proto::ProductEvent& Event::_internal_product_event() const {
  return *payload_.product_event_;
}
inline ::logi::proto::ProductEvent* Event::release_product_event() {
  // @@protoc_insertion_point(field_release:logi.proto.Event.product_event)
  if (has_product_event()) {
    clear_has_payload();
      ::logi::proto::ProductEvent* temp = payload_.product_event_;
    payload_.product_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ProductEvent& Event::product_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.Event.product_event)
  return has_product_event()
      ? *payload_.product_event_
      : *reinterpret_cast< ::logi::proto::ProductEvent*>(&::logi::proto::_ProductEvent_default_instance_);
}
inline ::logi::proto::ProductEvent* Event::mutable_product_event() {
  if (!has_product_event()) {
    clear_payload();
    set_has_product_event();
    payload_.product_event_ = CreateMaybeMessage< ::logi::proto::ProductEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Event.product_event)
  return payload_.product_event_;
}

// .logi.proto.ConnectionEvent connection_event = 4;
inline bool Event::has_connection_event() const {
  return payload_case() == kConnectionEvent;
}
inline void Event::set_has_connection_event() {
  _oneof_case_[0] = kConnectionEvent;
}
inline const ::logi::proto::ConnectionEvent& Event::_internal_connection_event() const {
  return *payload_.connection_event_;
}
inline ::logi::proto::ConnectionEvent* Event::release_connection_event() {
  // @@protoc_insertion_point(field_release:logi.proto.Event.connection_event)
  if (has_connection_event()) {
    clear_has_payload();
      ::logi::proto::ConnectionEvent* temp = payload_.connection_event_;
    payload_.connection_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::logi::proto::ConnectionEvent& Event::connection_event() const {
  // @@protoc_insertion_point(field_get:logi.proto.Event.connection_event)
  return has_connection_event()
      ? *payload_.connection_event_
      : *reinterpret_cast< ::logi::proto::ConnectionEvent*>(&::logi::proto::_ConnectionEvent_default_instance_);
}
inline ::logi::proto::ConnectionEvent* Event::mutable_connection_event() {
  if (!has_connection_event()) {
    clear_payload();
    set_has_connection_event();
    payload_.connection_event_ = CreateMaybeMessage< ::logi::proto::ConnectionEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:logi.proto.Event.connection_event)
  return payload_.connection_event_;
}

inline bool Event::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Event::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Event::PayloadCase Event::payload_case() const {
  return Event::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Ack

// repeated .logi.proto.Error errors = 1;
inline int Ack::errors_size() const {
  return errors_.size();
}
inline ::logi::proto::Error* Ack::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:logi.proto.Ack.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >*
Ack::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:logi.proto.Ack.errors)
  return &errors_;
}
inline const ::logi::proto::Error& Ack::errors(int index) const {
  // @@protoc_insertion_point(field_get:logi.proto.Ack.errors)
  return errors_.Get(index);
}
inline ::logi::proto::Error* Ack::add_errors() {
  // @@protoc_insertion_point(field_add:logi.proto.Ack.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::logi::proto::Error >&
Ack::errors() const {
  // @@protoc_insertion_point(field_list:logi.proto.Ack.errors)
  return errors_;
}

// string response_guid = 2;
inline void Ack::clear_response_guid() {
  response_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ack::response_guid() const {
  // @@protoc_insertion_point(field_get:logi.proto.Ack.response_guid)
  return response_guid_.GetNoArena();
}
inline void Ack::set_response_guid(const ::std::string& value) {
  
  response_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:logi.proto.Ack.response_guid)
}
#if LANG_CXX11
inline void Ack::set_response_guid(::std::string&& value) {
  
  response_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:logi.proto.Ack.response_guid)
}
#endif
inline void Ack::set_response_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:logi.proto.Ack.response_guid)
}
inline void Ack::set_response_guid(const char* value, size_t size) {
  
  response_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:logi.proto.Ack.response_guid)
}
inline ::std::string* Ack::mutable_response_guid() {
  
  // @@protoc_insertion_point(field_mutable:logi.proto.Ack.response_guid)
  return response_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ack::release_response_guid() {
  // @@protoc_insertion_point(field_release:logi.proto.Ack.response_guid)
  
  return response_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ack::set_allocated_response_guid(::std::string* response_guid) {
  if (response_guid != NULL) {
    
  } else {
    
  }
  response_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_guid);
  // @@protoc_insertion_point(field_set_allocated:logi.proto.Ack.response_guid)
}

// -------------------------------------------------------------------

// Pong

// bool reserved = 1;
inline void Pong::clear_reserved() {
  reserved_ = false;
}
inline bool Pong::reserved() const {
  // @@protoc_insertion_point(field_get:logi.proto.Pong.reserved)
  return reserved_;
}
inline void Pong::set_reserved(bool value) {
  
  reserved_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Pong.reserved)
}

// -------------------------------------------------------------------

// Kill

// bool reserved = 1;
inline void Kill::clear_reserved() {
  reserved_ = false;
}
inline bool Kill::reserved() const {
  // @@protoc_insertion_point(field_get:logi.proto.Kill.reserved)
  return reserved_;
}
inline void Kill::set_reserved(bool value) {
  
  reserved_ = value;
  // @@protoc_insertion_point(field_set:logi.proto.Kill.reserved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace logi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_transport_2eproto
