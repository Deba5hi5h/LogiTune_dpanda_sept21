/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.logi.proto.LSALastSoftwareUpdateStatus', null, global);
goog.exportSymbol('proto.logi.proto.LSASoftwareUpdateReport', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LSASoftwareUpdateReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.LSASoftwareUpdateReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LSASoftwareUpdateReport.displayName = 'proto.logi.proto.LSASoftwareUpdateReport';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LSASoftwareUpdateReport.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LSASoftwareUpdateReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LSASoftwareUpdateReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LSASoftwareUpdateReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateState: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentSoftwarePackageVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetSoftwarePackageVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastUpdateStatus: (f = msg.getLastUpdateStatus()) && proto.logi.proto.LSALastSoftwareUpdateStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LSASoftwareUpdateReport}
 */
proto.logi.proto.LSASoftwareUpdateReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LSASoftwareUpdateReport;
  return proto.logi.proto.LSASoftwareUpdateReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LSASoftwareUpdateReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LSASoftwareUpdateReport}
 */
proto.logi.proto.LSASoftwareUpdateReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.logi.proto.SyncUpdateState} */ (reader.readEnum());
      msg.setUpdateState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentSoftwarePackageVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetSoftwarePackageVersion(value);
      break;
    case 4:
      var value = new proto.logi.proto.LSALastSoftwareUpdateStatus;
      reader.readMessage(value,proto.logi.proto.LSALastSoftwareUpdateStatus.deserializeBinaryFromReader);
      msg.setLastUpdateStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LSASoftwareUpdateReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LSASoftwareUpdateReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LSASoftwareUpdateReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LSASoftwareUpdateReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCurrentSoftwarePackageVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetSoftwarePackageVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastUpdateStatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.logi.proto.LSALastSoftwareUpdateStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional SyncUpdateState update_state = 1;
 * @return {!proto.logi.proto.SyncUpdateState}
 */
proto.logi.proto.LSASoftwareUpdateReport.prototype.getUpdateState = function() {
  return /** @type {!proto.logi.proto.SyncUpdateState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.logi.proto.SyncUpdateState} value */
proto.logi.proto.LSASoftwareUpdateReport.prototype.setUpdateState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string current_software_package_version = 2;
 * @return {string}
 */
proto.logi.proto.LSASoftwareUpdateReport.prototype.getCurrentSoftwarePackageVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.LSASoftwareUpdateReport.prototype.setCurrentSoftwarePackageVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string target_software_package_version = 3;
 * @return {string}
 */
proto.logi.proto.LSASoftwareUpdateReport.prototype.getTargetSoftwarePackageVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.logi.proto.LSASoftwareUpdateReport.prototype.setTargetSoftwarePackageVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional LSALastSoftwareUpdateStatus last_update_status = 4;
 * @return {?proto.logi.proto.LSALastSoftwareUpdateStatus}
 */
proto.logi.proto.LSASoftwareUpdateReport.prototype.getLastUpdateStatus = function() {
  return /** @type{?proto.logi.proto.LSALastSoftwareUpdateStatus} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.LSALastSoftwareUpdateStatus, 4));
};


/** @param {?proto.logi.proto.LSALastSoftwareUpdateStatus|undefined} value */
proto.logi.proto.LSASoftwareUpdateReport.prototype.setLastUpdateStatus = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.logi.proto.LSASoftwareUpdateReport.prototype.clearLastUpdateStatus = function() {
  this.setLastUpdateStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LSASoftwareUpdateReport.prototype.hasLastUpdateStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LSALastSoftwareUpdateStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.LSALastSoftwareUpdateStatus.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.LSALastSoftwareUpdateStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LSALastSoftwareUpdateStatus.displayName = 'proto.logi.proto.LSALastSoftwareUpdateStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LSALastSoftwareUpdateStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LSALastSoftwareUpdateStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateFailed: jspb.Message.getFieldWithDefault(msg, 1, false),
    updateErrorsList: jspb.Message.toObjectList(msg.getUpdateErrorsList(),
    common_pb.Error.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LSALastSoftwareUpdateStatus}
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LSALastSoftwareUpdateStatus;
  return proto.logi.proto.LSALastSoftwareUpdateStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LSALastSoftwareUpdateStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LSALastSoftwareUpdateStatus}
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateFailed(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.addUpdateErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LSALastSoftwareUpdateStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LSALastSoftwareUpdateStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateFailed();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUpdateErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool update_failed = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.prototype.getUpdateFailed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.logi.proto.LSALastSoftwareUpdateStatus.prototype.setUpdateFailed = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated Error update_errors = 2;
 * @return {!Array<!proto.logi.proto.Error>}
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.prototype.getUpdateErrorsList = function() {
  return /** @type{!Array<!proto.logi.proto.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Error, 2));
};


/** @param {!Array<!proto.logi.proto.Error>} value */
proto.logi.proto.LSALastSoftwareUpdateStatus.prototype.setUpdateErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.logi.proto.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Error}
 */
proto.logi.proto.LSALastSoftwareUpdateStatus.prototype.addUpdateErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.logi.proto.Error, opt_index);
};


proto.logi.proto.LSALastSoftwareUpdateStatus.prototype.clearUpdateErrorsList = function() {
  this.setUpdateErrorsList([]);
};


goog.object.extend(exports, proto.logi.proto);
