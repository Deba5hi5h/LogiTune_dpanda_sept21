/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var product_state_events_pb = require('./product_state_events_pb.js');
var product_state_requests_pb = require('./product_state_requests_pb.js');
var firmware_events_pb = require('./firmware_events_pb.js');
var firmware_requests_pb = require('./firmware_requests_pb.js');
var connection_events_pb = require('./connection_events_pb.js');
var configuration_requests_pb = require('./configuration_requests_pb.js');
goog.exportSymbol('proto.logi.proto.Ack', null, global);
goog.exportSymbol('proto.logi.proto.Event', null, global);
goog.exportSymbol('proto.logi.proto.Header', null, global);
goog.exportSymbol('proto.logi.proto.Kill', null, global);
goog.exportSymbol('proto.logi.proto.LogiSyncMessage', null, global);
goog.exportSymbol('proto.logi.proto.Pong', null, global);
goog.exportSymbol('proto.logi.proto.Request', null, global);
goog.exportSymbol('proto.logi.proto.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Header.displayName = 'proto.logi.proto.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    userContext: jspb.Message.getFieldWithDefault(msg, 2, ""),
    guid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Header}
 */
proto.logi.proto.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Header;
  return proto.logi.proto.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Header}
 */
proto.logi.proto.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserContext(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getUserContext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional double timestamp = 1;
 * @return {number}
 */
proto.logi.proto.Header.prototype.getTimestamp = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.logi.proto.Header.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string user_context = 2;
 * @return {string}
 */
proto.logi.proto.Header.prototype.getUserContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.Header.prototype.setUserContext = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string guid = 3;
 * @return {string}
 */
proto.logi.proto.Header.prototype.getGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.logi.proto.Header.prototype.setGuid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 status = 4;
 * @return {number}
 */
proto.logi.proto.Header.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.logi.proto.Header.prototype.setStatus = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LogiSyncMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.logi.proto.LogiSyncMessage.oneofGroups_);
};
goog.inherits(proto.logi.proto.LogiSyncMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LogiSyncMessage.displayName = 'proto.logi.proto.LogiSyncMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.logi.proto.LogiSyncMessage.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.logi.proto.LogiSyncMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ACK: 2,
  REQUEST: 3,
  RESPONSE: 4,
  EVENT: 5,
  PONG: 6,
  KILL: 7
};

/**
 * @return {proto.logi.proto.LogiSyncMessage.MessageCase}
 */
proto.logi.proto.LogiSyncMessage.prototype.getMessageCase = function() {
  return /** @type {proto.logi.proto.LogiSyncMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.logi.proto.LogiSyncMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LogiSyncMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LogiSyncMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LogiSyncMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LogiSyncMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.logi.proto.Header.toObject(includeInstance, f),
    ack: (f = msg.getAck()) && proto.logi.proto.Ack.toObject(includeInstance, f),
    request: (f = msg.getRequest()) && proto.logi.proto.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.logi.proto.Response.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.logi.proto.Event.toObject(includeInstance, f),
    pong: (f = msg.getPong()) && proto.logi.proto.Pong.toObject(includeInstance, f),
    kill: (f = msg.getKill()) && proto.logi.proto.Kill.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LogiSyncMessage}
 */
proto.logi.proto.LogiSyncMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LogiSyncMessage;
  return proto.logi.proto.LogiSyncMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LogiSyncMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LogiSyncMessage}
 */
proto.logi.proto.LogiSyncMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.logi.proto.Header;
      reader.readMessage(value,proto.logi.proto.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.logi.proto.Ack;
      reader.readMessage(value,proto.logi.proto.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 3:
      var value = new proto.logi.proto.Request;
      reader.readMessage(value,proto.logi.proto.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 4:
      var value = new proto.logi.proto.Response;
      reader.readMessage(value,proto.logi.proto.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 5:
      var value = new proto.logi.proto.Event;
      reader.readMessage(value,proto.logi.proto.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 6:
      var value = new proto.logi.proto.Pong;
      reader.readMessage(value,proto.logi.proto.Pong.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    case 7:
      var value = new proto.logi.proto.Kill;
      reader.readMessage(value,proto.logi.proto.Kill.deserializeBinaryFromReader);
      msg.setKill(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LogiSyncMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LogiSyncMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LogiSyncMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LogiSyncMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.logi.proto.Header.serializeBinaryToWriter
    );
  }
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.logi.proto.Ack.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.logi.proto.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.logi.proto.Response.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.logi.proto.Event.serializeBinaryToWriter
    );
  }
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.logi.proto.Pong.serializeBinaryToWriter
    );
  }
  f = message.getKill();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.logi.proto.Kill.serializeBinaryToWriter
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.logi.proto.Header}
 */
proto.logi.proto.LogiSyncMessage.prototype.getHeader = function() {
  return /** @type{?proto.logi.proto.Header} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.Header, 1));
};


/** @param {?proto.logi.proto.Header|undefined} value */
proto.logi.proto.LogiSyncMessage.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.logi.proto.LogiSyncMessage.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LogiSyncMessage.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ack ack = 2;
 * @return {?proto.logi.proto.Ack}
 */
proto.logi.proto.LogiSyncMessage.prototype.getAck = function() {
  return /** @type{?proto.logi.proto.Ack} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.Ack, 2));
};


/** @param {?proto.logi.proto.Ack|undefined} value */
proto.logi.proto.LogiSyncMessage.prototype.setAck = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.logi.proto.LogiSyncMessage.oneofGroups_[0], value);
};


proto.logi.proto.LogiSyncMessage.prototype.clearAck = function() {
  this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LogiSyncMessage.prototype.hasAck = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Request request = 3;
 * @return {?proto.logi.proto.Request}
 */
proto.logi.proto.LogiSyncMessage.prototype.getRequest = function() {
  return /** @type{?proto.logi.proto.Request} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.Request, 3));
};


/** @param {?proto.logi.proto.Request|undefined} value */
proto.logi.proto.LogiSyncMessage.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.logi.proto.LogiSyncMessage.oneofGroups_[0], value);
};


proto.logi.proto.LogiSyncMessage.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LogiSyncMessage.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Response response = 4;
 * @return {?proto.logi.proto.Response}
 */
proto.logi.proto.LogiSyncMessage.prototype.getResponse = function() {
  return /** @type{?proto.logi.proto.Response} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.Response, 4));
};


/** @param {?proto.logi.proto.Response|undefined} value */
proto.logi.proto.LogiSyncMessage.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.logi.proto.LogiSyncMessage.oneofGroups_[0], value);
};


proto.logi.proto.LogiSyncMessage.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LogiSyncMessage.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Event event = 5;
 * @return {?proto.logi.proto.Event}
 */
proto.logi.proto.LogiSyncMessage.prototype.getEvent = function() {
  return /** @type{?proto.logi.proto.Event} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.Event, 5));
};


/** @param {?proto.logi.proto.Event|undefined} value */
proto.logi.proto.LogiSyncMessage.prototype.setEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.logi.proto.LogiSyncMessage.oneofGroups_[0], value);
};


proto.logi.proto.LogiSyncMessage.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LogiSyncMessage.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Pong pong = 6;
 * @return {?proto.logi.proto.Pong}
 */
proto.logi.proto.LogiSyncMessage.prototype.getPong = function() {
  return /** @type{?proto.logi.proto.Pong} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.Pong, 6));
};


/** @param {?proto.logi.proto.Pong|undefined} value */
proto.logi.proto.LogiSyncMessage.prototype.setPong = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.logi.proto.LogiSyncMessage.oneofGroups_[0], value);
};


proto.logi.proto.LogiSyncMessage.prototype.clearPong = function() {
  this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LogiSyncMessage.prototype.hasPong = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Kill kill = 7;
 * @return {?proto.logi.proto.Kill}
 */
proto.logi.proto.LogiSyncMessage.prototype.getKill = function() {
  return /** @type{?proto.logi.proto.Kill} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.Kill, 7));
};


/** @param {?proto.logi.proto.Kill|undefined} value */
proto.logi.proto.LogiSyncMessage.prototype.setKill = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.logi.proto.LogiSyncMessage.oneofGroups_[0], value);
};


proto.logi.proto.LogiSyncMessage.prototype.clearKill = function() {
  this.setKill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LogiSyncMessage.prototype.hasKill = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.logi.proto.Request.oneofGroups_);
};
goog.inherits(proto.logi.proto.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Request.displayName = 'proto.logi.proto.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.logi.proto.Request.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.logi.proto.Request.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  FIRMWARE_REQUEST: 2,
  PRODUCT_REQUEST: 3,
  CONFIGURATION_REQUEST: 4
};

/**
 * @return {proto.logi.proto.Request.PayloadCase}
 */
proto.logi.proto.Request.prototype.getPayloadCase = function() {
  return /** @type {proto.logi.proto.Request.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.logi.proto.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    firmwareRequest: (f = msg.getFirmwareRequest()) && firmware_requests_pb.FirmwareRequest.toObject(includeInstance, f),
    productRequest: (f = msg.getProductRequest()) && product_state_requests_pb.ProductRequest.toObject(includeInstance, f),
    configurationRequest: (f = msg.getConfigurationRequest()) && configuration_requests_pb.LogiSyncConfigurationRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Request}
 */
proto.logi.proto.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Request;
  return proto.logi.proto.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Request}
 */
proto.logi.proto.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new firmware_requests_pb.FirmwareRequest;
      reader.readMessage(value,firmware_requests_pb.FirmwareRequest.deserializeBinaryFromReader);
      msg.setFirmwareRequest(value);
      break;
    case 3:
      var value = new product_state_requests_pb.ProductRequest;
      reader.readMessage(value,product_state_requests_pb.ProductRequest.deserializeBinaryFromReader);
      msg.setProductRequest(value);
      break;
    case 4:
      var value = new configuration_requests_pb.LogiSyncConfigurationRequest;
      reader.readMessage(value,configuration_requests_pb.LogiSyncConfigurationRequest.deserializeBinaryFromReader);
      msg.setConfigurationRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirmwareRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      firmware_requests_pb.FirmwareRequest.serializeBinaryToWriter
    );
  }
  f = message.getProductRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      product_state_requests_pb.ProductRequest.serializeBinaryToWriter
    );
  }
  f = message.getConfigurationRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      configuration_requests_pb.LogiSyncConfigurationRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional FirmwareRequest firmware_request = 2;
 * @return {?proto.logi.proto.FirmwareRequest}
 */
proto.logi.proto.Request.prototype.getFirmwareRequest = function() {
  return /** @type{?proto.logi.proto.FirmwareRequest} */ (
    jspb.Message.getWrapperField(this, firmware_requests_pb.FirmwareRequest, 2));
};


/** @param {?proto.logi.proto.FirmwareRequest|undefined} value */
proto.logi.proto.Request.prototype.setFirmwareRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.logi.proto.Request.oneofGroups_[0], value);
};


proto.logi.proto.Request.prototype.clearFirmwareRequest = function() {
  this.setFirmwareRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Request.prototype.hasFirmwareRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProductRequest product_request = 3;
 * @return {?proto.logi.proto.ProductRequest}
 */
proto.logi.proto.Request.prototype.getProductRequest = function() {
  return /** @type{?proto.logi.proto.ProductRequest} */ (
    jspb.Message.getWrapperField(this, product_state_requests_pb.ProductRequest, 3));
};


/** @param {?proto.logi.proto.ProductRequest|undefined} value */
proto.logi.proto.Request.prototype.setProductRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.logi.proto.Request.oneofGroups_[0], value);
};


proto.logi.proto.Request.prototype.clearProductRequest = function() {
  this.setProductRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Request.prototype.hasProductRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LogiSyncConfigurationRequest configuration_request = 4;
 * @return {?proto.logi.proto.LogiSyncConfigurationRequest}
 */
proto.logi.proto.Request.prototype.getConfigurationRequest = function() {
  return /** @type{?proto.logi.proto.LogiSyncConfigurationRequest} */ (
    jspb.Message.getWrapperField(this, configuration_requests_pb.LogiSyncConfigurationRequest, 4));
};


/** @param {?proto.logi.proto.LogiSyncConfigurationRequest|undefined} value */
proto.logi.proto.Request.prototype.setConfigurationRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.logi.proto.Request.oneofGroups_[0], value);
};


proto.logi.proto.Request.prototype.clearConfigurationRequest = function() {
  this.setConfigurationRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Request.prototype.hasConfigurationRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.logi.proto.Response.oneofGroups_);
};
goog.inherits(proto.logi.proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Response.displayName = 'proto.logi.proto.Response';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.logi.proto.Response.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.logi.proto.Response.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  FIRMWARE_RESPONSE: 2,
  PRODUCT_RESPONSE: 3,
  CONFIGURATION_RESPONSE: 4
};

/**
 * @return {proto.logi.proto.Response.PayloadCase}
 */
proto.logi.proto.Response.prototype.getPayloadCase = function() {
  return /** @type {proto.logi.proto.Response.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.logi.proto.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    firmwareResponse: (f = msg.getFirmwareResponse()) && firmware_requests_pb.FirmwareResponse.toObject(includeInstance, f),
    productResponse: (f = msg.getProductResponse()) && product_state_requests_pb.ProductResponse.toObject(includeInstance, f),
    configurationResponse: (f = msg.getConfigurationResponse()) && configuration_requests_pb.LogiSyncConfigurationResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Response}
 */
proto.logi.proto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Response;
  return proto.logi.proto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Response}
 */
proto.logi.proto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new firmware_requests_pb.FirmwareResponse;
      reader.readMessage(value,firmware_requests_pb.FirmwareResponse.deserializeBinaryFromReader);
      msg.setFirmwareResponse(value);
      break;
    case 3:
      var value = new product_state_requests_pb.ProductResponse;
      reader.readMessage(value,product_state_requests_pb.ProductResponse.deserializeBinaryFromReader);
      msg.setProductResponse(value);
      break;
    case 4:
      var value = new configuration_requests_pb.LogiSyncConfigurationResponse;
      reader.readMessage(value,configuration_requests_pb.LogiSyncConfigurationResponse.deserializeBinaryFromReader);
      msg.setConfigurationResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirmwareResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      firmware_requests_pb.FirmwareResponse.serializeBinaryToWriter
    );
  }
  f = message.getProductResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      product_state_requests_pb.ProductResponse.serializeBinaryToWriter
    );
  }
  f = message.getConfigurationResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      configuration_requests_pb.LogiSyncConfigurationResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional FirmwareResponse firmware_response = 2;
 * @return {?proto.logi.proto.FirmwareResponse}
 */
proto.logi.proto.Response.prototype.getFirmwareResponse = function() {
  return /** @type{?proto.logi.proto.FirmwareResponse} */ (
    jspb.Message.getWrapperField(this, firmware_requests_pb.FirmwareResponse, 2));
};


/** @param {?proto.logi.proto.FirmwareResponse|undefined} value */
proto.logi.proto.Response.prototype.setFirmwareResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.logi.proto.Response.oneofGroups_[0], value);
};


proto.logi.proto.Response.prototype.clearFirmwareResponse = function() {
  this.setFirmwareResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Response.prototype.hasFirmwareResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProductResponse product_response = 3;
 * @return {?proto.logi.proto.ProductResponse}
 */
proto.logi.proto.Response.prototype.getProductResponse = function() {
  return /** @type{?proto.logi.proto.ProductResponse} */ (
    jspb.Message.getWrapperField(this, product_state_requests_pb.ProductResponse, 3));
};


/** @param {?proto.logi.proto.ProductResponse|undefined} value */
proto.logi.proto.Response.prototype.setProductResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.logi.proto.Response.oneofGroups_[0], value);
};


proto.logi.proto.Response.prototype.clearProductResponse = function() {
  this.setProductResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Response.prototype.hasProductResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LogiSyncConfigurationResponse configuration_response = 4;
 * @return {?proto.logi.proto.LogiSyncConfigurationResponse}
 */
proto.logi.proto.Response.prototype.getConfigurationResponse = function() {
  return /** @type{?proto.logi.proto.LogiSyncConfigurationResponse} */ (
    jspb.Message.getWrapperField(this, configuration_requests_pb.LogiSyncConfigurationResponse, 4));
};


/** @param {?proto.logi.proto.LogiSyncConfigurationResponse|undefined} value */
proto.logi.proto.Response.prototype.setConfigurationResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.logi.proto.Response.oneofGroups_[0], value);
};


proto.logi.proto.Response.prototype.clearConfigurationResponse = function() {
  this.setConfigurationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Response.prototype.hasConfigurationResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.logi.proto.Event.oneofGroups_);
};
goog.inherits(proto.logi.proto.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Event.displayName = 'proto.logi.proto.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.logi.proto.Event.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.logi.proto.Event.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  FIRMWARE_EVENT: 2,
  PRODUCT_EVENT: 3,
  CONNECTION_EVENT: 4
};

/**
 * @return {proto.logi.proto.Event.PayloadCase}
 */
proto.logi.proto.Event.prototype.getPayloadCase = function() {
  return /** @type {proto.logi.proto.Event.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.logi.proto.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    firmwareEvent: (f = msg.getFirmwareEvent()) && firmware_events_pb.FirmwareEvent.toObject(includeInstance, f),
    productEvent: (f = msg.getProductEvent()) && product_state_events_pb.ProductEvent.toObject(includeInstance, f),
    connectionEvent: (f = msg.getConnectionEvent()) && connection_events_pb.ConnectionEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Event}
 */
proto.logi.proto.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Event;
  return proto.logi.proto.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Event}
 */
proto.logi.proto.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new firmware_events_pb.FirmwareEvent;
      reader.readMessage(value,firmware_events_pb.FirmwareEvent.deserializeBinaryFromReader);
      msg.setFirmwareEvent(value);
      break;
    case 3:
      var value = new product_state_events_pb.ProductEvent;
      reader.readMessage(value,product_state_events_pb.ProductEvent.deserializeBinaryFromReader);
      msg.setProductEvent(value);
      break;
    case 4:
      var value = new connection_events_pb.ConnectionEvent;
      reader.readMessage(value,connection_events_pb.ConnectionEvent.deserializeBinaryFromReader);
      msg.setConnectionEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirmwareEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      firmware_events_pb.FirmwareEvent.serializeBinaryToWriter
    );
  }
  f = message.getProductEvent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      product_state_events_pb.ProductEvent.serializeBinaryToWriter
    );
  }
  f = message.getConnectionEvent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      connection_events_pb.ConnectionEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional FirmwareEvent firmware_event = 2;
 * @return {?proto.logi.proto.FirmwareEvent}
 */
proto.logi.proto.Event.prototype.getFirmwareEvent = function() {
  return /** @type{?proto.logi.proto.FirmwareEvent} */ (
    jspb.Message.getWrapperField(this, firmware_events_pb.FirmwareEvent, 2));
};


/** @param {?proto.logi.proto.FirmwareEvent|undefined} value */
proto.logi.proto.Event.prototype.setFirmwareEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.logi.proto.Event.oneofGroups_[0], value);
};


proto.logi.proto.Event.prototype.clearFirmwareEvent = function() {
  this.setFirmwareEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Event.prototype.hasFirmwareEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProductEvent product_event = 3;
 * @return {?proto.logi.proto.ProductEvent}
 */
proto.logi.proto.Event.prototype.getProductEvent = function() {
  return /** @type{?proto.logi.proto.ProductEvent} */ (
    jspb.Message.getWrapperField(this, product_state_events_pb.ProductEvent, 3));
};


/** @param {?proto.logi.proto.ProductEvent|undefined} value */
proto.logi.proto.Event.prototype.setProductEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.logi.proto.Event.oneofGroups_[0], value);
};


proto.logi.proto.Event.prototype.clearProductEvent = function() {
  this.setProductEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Event.prototype.hasProductEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ConnectionEvent connection_event = 4;
 * @return {?proto.logi.proto.ConnectionEvent}
 */
proto.logi.proto.Event.prototype.getConnectionEvent = function() {
  return /** @type{?proto.logi.proto.ConnectionEvent} */ (
    jspb.Message.getWrapperField(this, connection_events_pb.ConnectionEvent, 4));
};


/** @param {?proto.logi.proto.ConnectionEvent|undefined} value */
proto.logi.proto.Event.prototype.setConnectionEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.logi.proto.Event.oneofGroups_[0], value);
};


proto.logi.proto.Event.prototype.clearConnectionEvent = function() {
  this.setConnectionEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.Event.prototype.hasConnectionEvent = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.Ack.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Ack.displayName = 'proto.logi.proto.Ack';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.Ack.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    common_pb.Error.toObject, includeInstance),
    responseGuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Ack}
 */
proto.logi.proto.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Ack;
  return proto.logi.proto.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Ack}
 */
proto.logi.proto.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseGuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getResponseGuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Error errors = 1;
 * @return {!Array<!proto.logi.proto.Error>}
 */
proto.logi.proto.Ack.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.logi.proto.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Error, 1));
};


/** @param {!Array<!proto.logi.proto.Error>} value */
proto.logi.proto.Ack.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.logi.proto.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Error}
 */
proto.logi.proto.Ack.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.logi.proto.Error, opt_index);
};


proto.logi.proto.Ack.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * optional string response_guid = 2;
 * @return {string}
 */
proto.logi.proto.Ack.prototype.getResponseGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.Ack.prototype.setResponseGuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Pong.displayName = 'proto.logi.proto.Pong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Pong}
 */
proto.logi.proto.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Pong;
  return proto.logi.proto.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Pong}
 */
proto.logi.proto.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReserved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool reserved = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.Pong.prototype.getReserved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.logi.proto.Pong.prototype.setReserved = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Kill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.Kill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Kill.displayName = 'proto.logi.proto.Kill';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Kill.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Kill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Kill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Kill.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Kill}
 */
proto.logi.proto.Kill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Kill;
  return proto.logi.proto.Kill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Kill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Kill}
 */
proto.logi.proto.Kill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReserved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Kill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Kill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Kill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Kill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool reserved = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.Kill.prototype.getReserved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.logi.proto.Kill.prototype.setReserved = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.logi.proto);
