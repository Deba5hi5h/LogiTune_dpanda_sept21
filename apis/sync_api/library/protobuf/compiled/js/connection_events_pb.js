/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var product_state_structures_pb = require('./product_state_structures_pb.js');
var firmware_structures_pb = require('./firmware_structures_pb.js');
goog.exportSymbol('proto.logi.proto.ClientConnectionEvent', null, global);
goog.exportSymbol('proto.logi.proto.ConnectionEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.ClientConnectionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.ClientConnectionEvent.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.ClientConnectionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.ClientConnectionEvent.displayName = 'proto.logi.proto.ClientConnectionEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.ClientConnectionEvent.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.ClientConnectionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.ClientConnectionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.ClientConnectionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.ClientConnectionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    product_state_structures_pb.Product.toObject, includeInstance),
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    firmware_structures_pb.FirmwareUpdateProgress.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.ClientConnectionEvent}
 */
proto.logi.proto.ClientConnectionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.ClientConnectionEvent;
  return proto.logi.proto.ClientConnectionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.ClientConnectionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.ClientConnectionEvent}
 */
proto.logi.proto.ClientConnectionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new product_state_structures_pb.Product;
      reader.readMessage(value,product_state_structures_pb.Product.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 2:
      var value = new firmware_structures_pb.FirmwareUpdateProgress;
      reader.readMessage(value,firmware_structures_pb.FirmwareUpdateProgress.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.ClientConnectionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.ClientConnectionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.ClientConnectionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.ClientConnectionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      product_state_structures_pb.Product.serializeBinaryToWriter
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      firmware_structures_pb.FirmwareUpdateProgress.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Product products = 1;
 * @return {!Array<!proto.logi.proto.Product>}
 */
proto.logi.proto.ClientConnectionEvent.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.logi.proto.Product>} */ (
    jspb.Message.getRepeatedWrapperField(this, product_state_structures_pb.Product, 1));
};


/** @param {!Array<!proto.logi.proto.Product>} value */
proto.logi.proto.ClientConnectionEvent.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.logi.proto.Product=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Product}
 */
proto.logi.proto.ClientConnectionEvent.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.logi.proto.Product, opt_index);
};


proto.logi.proto.ClientConnectionEvent.prototype.clearProductsList = function() {
  this.setProductsList([]);
};


/**
 * repeated FirmwareUpdateProgress updates = 2;
 * @return {!Array<!proto.logi.proto.FirmwareUpdateProgress>}
 */
proto.logi.proto.ClientConnectionEvent.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.logi.proto.FirmwareUpdateProgress>} */ (
    jspb.Message.getRepeatedWrapperField(this, firmware_structures_pb.FirmwareUpdateProgress, 2));
};


/** @param {!Array<!proto.logi.proto.FirmwareUpdateProgress>} value */
proto.logi.proto.ClientConnectionEvent.prototype.setUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.logi.proto.FirmwareUpdateProgress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.FirmwareUpdateProgress}
 */
proto.logi.proto.ClientConnectionEvent.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.logi.proto.FirmwareUpdateProgress, opt_index);
};


proto.logi.proto.ClientConnectionEvent.prototype.clearUpdatesList = function() {
  this.setUpdatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.ConnectionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.logi.proto.ConnectionEvent.oneofGroups_);
};
goog.inherits(proto.logi.proto.ConnectionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.ConnectionEvent.displayName = 'proto.logi.proto.ConnectionEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.logi.proto.ConnectionEvent.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.logi.proto.ConnectionEvent.EventCase = {
  EVENT_NOT_SET: 0,
  CLIENT_CONNECTION_EVENT: 1
};

/**
 * @return {proto.logi.proto.ConnectionEvent.EventCase}
 */
proto.logi.proto.ConnectionEvent.prototype.getEventCase = function() {
  return /** @type {proto.logi.proto.ConnectionEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.logi.proto.ConnectionEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.ConnectionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.ConnectionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.ConnectionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.ConnectionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientConnectionEvent: (f = msg.getClientConnectionEvent()) && proto.logi.proto.ClientConnectionEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.ConnectionEvent}
 */
proto.logi.proto.ConnectionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.ConnectionEvent;
  return proto.logi.proto.ConnectionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.ConnectionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.ConnectionEvent}
 */
proto.logi.proto.ConnectionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.logi.proto.ClientConnectionEvent;
      reader.readMessage(value,proto.logi.proto.ClientConnectionEvent.deserializeBinaryFromReader);
      msg.setClientConnectionEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.ConnectionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.ConnectionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.ConnectionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.ConnectionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientConnectionEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.logi.proto.ClientConnectionEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientConnectionEvent client_connection_event = 1;
 * @return {?proto.logi.proto.ClientConnectionEvent}
 */
proto.logi.proto.ConnectionEvent.prototype.getClientConnectionEvent = function() {
  return /** @type{?proto.logi.proto.ClientConnectionEvent} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.ClientConnectionEvent, 1));
};


/** @param {?proto.logi.proto.ClientConnectionEvent|undefined} value */
proto.logi.proto.ConnectionEvent.prototype.setClientConnectionEvent = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.logi.proto.ConnectionEvent.oneofGroups_[0], value);
};


proto.logi.proto.ConnectionEvent.prototype.clearClientConnectionEvent = function() {
  this.setClientConnectionEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.ConnectionEvent.prototype.hasClientConnectionEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.logi.proto);
