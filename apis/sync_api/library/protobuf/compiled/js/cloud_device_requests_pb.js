/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var product_state_structures_pb = require('./product_state_structures_pb.js');
goog.exportSymbol('proto.logi.proto.LRCheckForProductUpdateRequest', null, global);
goog.exportSymbol('proto.logi.proto.LRCheckForProductUpdateResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LRCheckForProductUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.LRCheckForProductUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LRCheckForProductUpdateRequest.displayName = 'proto.logi.proto.LRCheckForProductUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LRCheckForProductUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LRCheckForProductUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRCheckForProductUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateNow: jspb.Message.getFieldWithDefault(msg, 1, false),
    productUuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    productModel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    expirationMillis: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reportingIntervalSeconds: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LRCheckForProductUpdateRequest}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LRCheckForProductUpdateRequest;
  return proto.logi.proto.LRCheckForProductUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LRCheckForProductUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LRCheckForProductUpdateRequest}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdateNow(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductUuid(value);
      break;
    case 3:
      var value = /** @type {!proto.logi.proto.Product.Model} */ (reader.readEnum());
      msg.setProductModel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpirationMillis(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReportingIntervalSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LRCheckForProductUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LRCheckForProductUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRCheckForProductUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateNow();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getProductUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProductModel();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getExpirationMillis();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getReportingIntervalSeconds();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional bool update_now = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.getUpdateNow = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.setUpdateNow = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string product_uuid = 2;
 * @return {string}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.getProductUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.setProductUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Product.Model product_model = 3;
 * @return {!proto.logi.proto.Product.Model}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.getProductModel = function() {
  return /** @type {!proto.logi.proto.Product.Model} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.logi.proto.Product.Model} value */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.setProductModel = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 expiration_millis = 4;
 * @return {number}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.getExpirationMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.setExpirationMillis = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 reporting_interval_seconds = 5;
 * @return {number}
 */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.getReportingIntervalSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.logi.proto.LRCheckForProductUpdateRequest.prototype.setReportingIntervalSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LRCheckForProductUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.LRCheckForProductUpdateResponse.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.LRCheckForProductUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LRCheckForProductUpdateResponse.displayName = 'proto.logi.proto.LRCheckForProductUpdateResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.LRCheckForProductUpdateResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LRCheckForProductUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LRCheckForProductUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LRCheckForProductUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRCheckForProductUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    common_pb.Error.toObject, includeInstance),
    success: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LRCheckForProductUpdateResponse}
 */
proto.logi.proto.LRCheckForProductUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LRCheckForProductUpdateResponse;
  return proto.logi.proto.LRCheckForProductUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LRCheckForProductUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LRCheckForProductUpdateResponse}
 */
proto.logi.proto.LRCheckForProductUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LRCheckForProductUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LRCheckForProductUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LRCheckForProductUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRCheckForProductUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated Error errors = 1;
 * @return {!Array<!proto.logi.proto.Error>}
 */
proto.logi.proto.LRCheckForProductUpdateResponse.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.logi.proto.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Error, 1));
};


/** @param {!Array<!proto.logi.proto.Error>} value */
proto.logi.proto.LRCheckForProductUpdateResponse.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.logi.proto.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Error}
 */
proto.logi.proto.LRCheckForProductUpdateResponse.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.logi.proto.Error, opt_index);
};


proto.logi.proto.LRCheckForProductUpdateResponse.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.LRCheckForProductUpdateResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.logi.proto.LRCheckForProductUpdateResponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.logi.proto);
