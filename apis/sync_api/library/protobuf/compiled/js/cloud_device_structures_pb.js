/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cloud_provisioning_structures_pb = require('./cloud_provisioning_structures_pb.js');
var product_state_structures_pb = require('./product_state_structures_pb.js');
goog.exportSymbol('proto.logi.proto.LRProductSnapshot', null, global);
goog.exportSymbol('proto.logi.proto.LRProductUpdateSnapshot', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LRProductSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.LRProductSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LRProductSnapshot.displayName = 'proto.logi.proto.LRProductSnapshot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LRProductSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LRProductSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LRProductSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRProductSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && product_state_structures_pb.Product.toObject(includeInstance, f),
    expectedDeviceCountMap: (f = msg.getExpectedDeviceCountMap()) ? f.toObject(includeInstance, undefined) : [],
    actualDeviceCountMap: (f = msg.getActualDeviceCountMap()) ? f.toObject(includeInstance, undefined) : [],
    latestFirmware: jspb.Message.getFieldWithDefault(msg, 4, ""),
    latestFirmwarePublishedTimestamp: jspb.Message.getFieldWithDefault(msg, 5, ""),
    updateStatus: (f = msg.getUpdateStatus()) && proto.logi.proto.LRProductUpdateSnapshot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LRProductSnapshot}
 */
proto.logi.proto.LRProductSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LRProductSnapshot;
  return proto.logi.proto.LRProductSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LRProductSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LRProductSnapshot}
 */
proto.logi.proto.LRProductSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new product_state_structures_pb.Product;
      reader.readMessage(value,product_state_structures_pb.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 2:
      var value = msg.getExpectedDeviceCountMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0);
         });
      break;
    case 3:
      var value = msg.getActualDeviceCountMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0);
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestFirmware(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestFirmwarePublishedTimestamp(value);
      break;
    case 6:
      var value = new proto.logi.proto.LRProductUpdateSnapshot;
      reader.readMessage(value,proto.logi.proto.LRProductUpdateSnapshot.deserializeBinaryFromReader);
      msg.setUpdateStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LRProductSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LRProductSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LRProductSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRProductSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      product_state_structures_pb.Product.serializeBinaryToWriter
    );
  }
  f = message.getExpectedDeviceCountMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getActualDeviceCountMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getLatestFirmware();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLatestFirmwarePublishedTimestamp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUpdateStatus();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.logi.proto.LRProductUpdateSnapshot.serializeBinaryToWriter
    );
  }
};


/**
 * optional Product product = 1;
 * @return {?proto.logi.proto.Product}
 */
proto.logi.proto.LRProductSnapshot.prototype.getProduct = function() {
  return /** @type{?proto.logi.proto.Product} */ (
    jspb.Message.getWrapperField(this, product_state_structures_pb.Product, 1));
};


/** @param {?proto.logi.proto.Product|undefined} value */
proto.logi.proto.LRProductSnapshot.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.logi.proto.LRProductSnapshot.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LRProductSnapshot.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<uint32, uint32> expected_device_count = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.logi.proto.LRProductSnapshot.prototype.getExpectedDeviceCountMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.logi.proto.LRProductSnapshot.prototype.clearExpectedDeviceCountMap = function() {
  this.getExpectedDeviceCountMap().clear();
};


/**
 * map<uint32, uint32> actual_device_count = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.logi.proto.LRProductSnapshot.prototype.getActualDeviceCountMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.logi.proto.LRProductSnapshot.prototype.clearActualDeviceCountMap = function() {
  this.getActualDeviceCountMap().clear();
};


/**
 * optional string latest_firmware = 4;
 * @return {string}
 */
proto.logi.proto.LRProductSnapshot.prototype.getLatestFirmware = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.logi.proto.LRProductSnapshot.prototype.setLatestFirmware = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string latest_firmware_published_timestamp = 5;
 * @return {string}
 */
proto.logi.proto.LRProductSnapshot.prototype.getLatestFirmwarePublishedTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.logi.proto.LRProductSnapshot.prototype.setLatestFirmwarePublishedTimestamp = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional LRProductUpdateSnapshot update_status = 6;
 * @return {?proto.logi.proto.LRProductUpdateSnapshot}
 */
proto.logi.proto.LRProductSnapshot.prototype.getUpdateStatus = function() {
  return /** @type{?proto.logi.proto.LRProductUpdateSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.LRProductUpdateSnapshot, 6));
};


/** @param {?proto.logi.proto.LRProductUpdateSnapshot|undefined} value */
proto.logi.proto.LRProductSnapshot.prototype.setUpdateStatus = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.logi.proto.LRProductSnapshot.prototype.clearUpdateStatus = function() {
  this.setUpdateStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.LRProductSnapshot.prototype.hasUpdateStatus = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LRProductUpdateSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.LRProductUpdateSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LRProductUpdateSnapshot.displayName = 'proto.logi.proto.LRProductUpdateSnapshot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LRProductUpdateSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LRProductUpdateSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LRProductUpdateSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRProductUpdateSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    percentageProgress: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    timeRemainingSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LRProductUpdateSnapshot}
 */
proto.logi.proto.LRProductUpdateSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LRProductUpdateSnapshot;
  return proto.logi.proto.LRProductUpdateSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LRProductUpdateSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LRProductUpdateSnapshot}
 */
proto.logi.proto.LRProductUpdateSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentageProgress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeRemainingSeconds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setErrorCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LRProductUpdateSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LRProductUpdateSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LRProductUpdateSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRProductUpdateSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPercentageProgress();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getTimeRemainingSeconds();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional float percentage_progress = 1;
 * @return {number}
 */
proto.logi.proto.LRProductUpdateSnapshot.prototype.getPercentageProgress = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.logi.proto.LRProductUpdateSnapshot.prototype.setPercentageProgress = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional uint32 time_remaining_seconds = 2;
 * @return {number}
 */
proto.logi.proto.LRProductUpdateSnapshot.prototype.getTimeRemainingSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.logi.proto.LRProductUpdateSnapshot.prototype.setTimeRemainingSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 error_code = 3;
 * @return {number}
 */
proto.logi.proto.LRProductUpdateSnapshot.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.logi.proto.LRProductUpdateSnapshot.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.logi.proto);
