/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.logi.proto.HostInformation', null, global);
goog.exportSymbol('proto.logi.proto.HostInformation.Display', null, global);
goog.exportSymbol('proto.logi.proto.LogiSyncConfiguration', null, global);
goog.exportSymbol('proto.logi.proto.LogiSyncConfiguration.Option', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.HostInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.HostInformation.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.HostInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.HostInformation.displayName = 'proto.logi.proto.HostInformation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.HostInformation.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.HostInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.HostInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.HostInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.HostInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    hardwareModel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operatingSystemName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operatingSystemVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    processor: jspb.Message.getFieldWithDefault(msg, 4, ""),
    memory: jspb.Message.getFieldWithDefault(msg, 5, ""),
    displaysList: jspb.Message.toObjectList(msg.getDisplaysList(),
    proto.logi.proto.HostInformation.Display.toObject, includeInstance),
    hostName: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.HostInformation}
 */
proto.logi.proto.HostInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.HostInformation;
  return proto.logi.proto.HostInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.HostInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.HostInformation}
 */
proto.logi.proto.HostInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHardwareModel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatingSystemName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatingSystemVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemory(value);
      break;
    case 6:
      var value = new proto.logi.proto.HostInformation.Display;
      reader.readMessage(value,proto.logi.proto.HostInformation.Display.deserializeBinaryFromReader);
      msg.addDisplays(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.HostInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.HostInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.HostInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.HostInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHardwareModel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperatingSystemName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperatingSystemVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProcessor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMemory();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDisplaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.logi.proto.HostInformation.Display.serializeBinaryToWriter
    );
  }
  f = message.getHostName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.HostInformation.Display = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.HostInformation.Display, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.HostInformation.Display.displayName = 'proto.logi.proto.HostInformation.Display';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.HostInformation.Display.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.HostInformation.Display.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.HostInformation.Display} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.HostInformation.Display.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolution: jspb.Message.getFieldWithDefault(msg, 1, ""),
    refreshRate: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.HostInformation.Display}
 */
proto.logi.proto.HostInformation.Display.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.HostInformation.Display;
  return proto.logi.proto.HostInformation.Display.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.HostInformation.Display} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.HostInformation.Display}
 */
proto.logi.proto.HostInformation.Display.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResolution(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.HostInformation.Display.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.HostInformation.Display.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.HostInformation.Display} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.HostInformation.Display.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolution();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRefreshRate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string resolution = 1;
 * @return {string}
 */
proto.logi.proto.HostInformation.Display.prototype.getResolution = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.logi.proto.HostInformation.Display.prototype.setResolution = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string refresh_rate = 2;
 * @return {string}
 */
proto.logi.proto.HostInformation.Display.prototype.getRefreshRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.HostInformation.Display.prototype.setRefreshRate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hardware_model = 1;
 * @return {string}
 */
proto.logi.proto.HostInformation.prototype.getHardwareModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.logi.proto.HostInformation.prototype.setHardwareModel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string operating_system_name = 2;
 * @return {string}
 */
proto.logi.proto.HostInformation.prototype.getOperatingSystemName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.HostInformation.prototype.setOperatingSystemName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string operating_system_version = 3;
 * @return {string}
 */
proto.logi.proto.HostInformation.prototype.getOperatingSystemVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.logi.proto.HostInformation.prototype.setOperatingSystemVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string processor = 4;
 * @return {string}
 */
proto.logi.proto.HostInformation.prototype.getProcessor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.logi.proto.HostInformation.prototype.setProcessor = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string memory = 5;
 * @return {string}
 */
proto.logi.proto.HostInformation.prototype.getMemory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.logi.proto.HostInformation.prototype.setMemory = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Display displays = 6;
 * @return {!Array<!proto.logi.proto.HostInformation.Display>}
 */
proto.logi.proto.HostInformation.prototype.getDisplaysList = function() {
  return /** @type{!Array<!proto.logi.proto.HostInformation.Display>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.logi.proto.HostInformation.Display, 6));
};


/** @param {!Array<!proto.logi.proto.HostInformation.Display>} value */
proto.logi.proto.HostInformation.prototype.setDisplaysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.logi.proto.HostInformation.Display=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.HostInformation.Display}
 */
proto.logi.proto.HostInformation.prototype.addDisplays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.logi.proto.HostInformation.Display, opt_index);
};


proto.logi.proto.HostInformation.prototype.clearDisplaysList = function() {
  this.setDisplaysList([]);
};


/**
 * optional string host_name = 7;
 * @return {string}
 */
proto.logi.proto.HostInformation.prototype.getHostName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.logi.proto.HostInformation.prototype.setHostName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LogiSyncConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.LogiSyncConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LogiSyncConfiguration.displayName = 'proto.logi.proto.LogiSyncConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LogiSyncConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LogiSyncConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LogiSyncConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LogiSyncConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    configurationMap: (f = msg.getConfigurationMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LogiSyncConfiguration}
 */
proto.logi.proto.LogiSyncConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LogiSyncConfiguration;
  return proto.logi.proto.LogiSyncConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LogiSyncConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LogiSyncConfiguration}
 */
proto.logi.proto.LogiSyncConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getConfigurationMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readString, null, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LogiSyncConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LogiSyncConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LogiSyncConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LogiSyncConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurationMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.logi.proto.LogiSyncConfiguration.Option = {
  RESERVED: 0,
  COLLECTING_ANALYTICS: 1,
  ROOM_NAME: 2,
  EULA_ACCEPTED: 3,
  ORGANIZATION_NAME: 4
};

/**
 * map<uint32, string> configuration = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.logi.proto.LogiSyncConfiguration.prototype.getConfigurationMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.logi.proto.LogiSyncConfiguration.prototype.clearConfigurationMap = function() {
  this.getConfigurationMap().clear();
};


goog.object.extend(exports, proto.logi.proto);
