/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.logi.proto.LRProvisioningData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.LRProvisioningData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.LRProvisioningData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.LRProvisioningData.displayName = 'proto.logi.proto.LRProvisioningData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.LRProvisioningData.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.LRProvisioningData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.LRProvisioningData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRProvisioningData.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootCert: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientCert: jspb.Message.getFieldWithDefault(msg, 3, ""),
    privateKey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mqttEndpoint: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mqttPort: jspb.Message.getFieldWithDefault(msg, 6, 0),
    httpsPort: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tlsHandshakeTimeoutMs: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tlsReadTimeoutMs: jspb.Message.getFieldWithDefault(msg, 9, 0),
    tlsWriteTimeoutMs: jspb.Message.getFieldWithDefault(msg, 10, 0),
    isCleanSession: jspb.Message.getFieldWithDefault(msg, 11, false),
    mqttCommandTimeoutMs: jspb.Message.getFieldWithDefault(msg, 12, 0),
    keepAliveInterval: jspb.Message.getFieldWithDefault(msg, 13, 0),
    minReconnectInterval: jspb.Message.getFieldWithDefault(msg, 14, 0),
    maxReconnectInterval: jspb.Message.getFieldWithDefault(msg, 15, 0),
    maxAcksToWaitFor: jspb.Message.getFieldWithDefault(msg, 16, 0),
    actionProcessingRate: jspb.Message.getFieldWithDefault(msg, 17, 0),
    maxOutgoingActionQueueLength: jspb.Message.getFieldWithDefault(msg, 18, 0),
    discoverActionTimeoutMs: jspb.Message.getFieldWithDefault(msg, 19, 0),
    hostTopicOutgoing: jspb.Message.getFieldWithDefault(msg, 20, ""),
    hostTopicIncoming: jspb.Message.getFieldWithDefault(msg, 21, ""),
    deviceTopicOutgoing: jspb.Message.getFieldWithDefault(msg, 22, ""),
    deviceTopicIncoming: jspb.Message.getFieldWithDefault(msg, 23, ""),
    roomName: jspb.Message.getFieldWithDefault(msg, 100, ""),
    roomId: jspb.Message.getFieldWithDefault(msg, 101, ""),
    organizationName: jspb.Message.getFieldWithDefault(msg, 110, ""),
    organizationId: jspb.Message.getFieldWithDefault(msg, 111, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.LRProvisioningData}
 */
proto.logi.proto.LRProvisioningData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.LRProvisioningData;
  return proto.logi.proto.LRProvisioningData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.LRProvisioningData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.LRProvisioningData}
 */
proto.logi.proto.LRProvisioningData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootCert(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientCert(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttEndpoint(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMqttPort(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHttpsPort(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTlsHandshakeTimeoutMs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTlsReadTimeoutMs(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTlsWriteTimeoutMs(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCleanSession(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMqttCommandTimeoutMs(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKeepAliveInterval(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinReconnectInterval(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxReconnectInterval(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxAcksToWaitFor(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionProcessingRate(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxOutgoingActionQueueLength(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDiscoverActionTimeoutMs(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostTopicOutgoing(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostTopicIncoming(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceTopicOutgoing(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceTopicIncoming(value);
      break;
    case 100:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomName(value);
      break;
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 110:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationName(value);
      break;
    case 111:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.LRProvisioningData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.LRProvisioningData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.LRProvisioningData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.LRProvisioningData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootCert();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientCert();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMqttEndpoint();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMqttPort();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getHttpsPort();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTlsHandshakeTimeoutMs();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getTlsReadTimeoutMs();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getTlsWriteTimeoutMs();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getIsCleanSession();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getMqttCommandTimeoutMs();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getKeepAliveInterval();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getMinReconnectInterval();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getMaxReconnectInterval();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getMaxAcksToWaitFor();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getActionProcessingRate();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getMaxOutgoingActionQueueLength();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getDiscoverActionTimeoutMs();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getHostTopicOutgoing();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getHostTopicIncoming();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getDeviceTopicOutgoing();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getDeviceTopicIncoming();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getRoomName();
  if (f.length > 0) {
    writer.writeString(
      100,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      101,
      f
    );
  }
  f = message.getOrganizationName();
  if (f.length > 0) {
    writer.writeString(
      110,
      f
    );
  }
  f = message.getOrganizationId();
  if (f.length > 0) {
    writer.writeString(
      111,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setClientId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string root_cert = 2;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getRootCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setRootCert = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string client_cert = 3;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getClientCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setClientCert = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string private_key = 4;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setPrivateKey = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string mqtt_endpoint = 5;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getMqttEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setMqttEndpoint = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 mqtt_port = 6;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getMqttPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setMqttPort = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 https_port = 7;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getHttpsPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setHttpsPort = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 tls_handshake_timeout_ms = 8;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getTlsHandshakeTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setTlsHandshakeTimeoutMs = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 tls_read_timeout_ms = 9;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getTlsReadTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setTlsReadTimeoutMs = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 tls_write_timeout_ms = 10;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getTlsWriteTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setTlsWriteTimeoutMs = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool is_clean_session = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.LRProvisioningData.prototype.getIsCleanSession = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.logi.proto.LRProvisioningData.prototype.setIsCleanSession = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional uint64 mqtt_command_timeout_ms = 12;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getMqttCommandTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setMqttCommandTimeoutMs = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 keep_alive_interval = 13;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getKeepAliveInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setKeepAliveInterval = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 min_reconnect_interval = 14;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getMinReconnectInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setMinReconnectInterval = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 max_reconnect_interval = 15;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getMaxReconnectInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setMaxReconnectInterval = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint32 max_acks_to_wait_for = 16;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getMaxAcksToWaitFor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setMaxAcksToWaitFor = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint32 action_processing_rate = 17;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getActionProcessingRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setActionProcessingRate = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint32 max_outgoing_action_queue_length = 18;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getMaxOutgoingActionQueueLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setMaxOutgoingActionQueueLength = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint64 discover_action_timeout_ms = 19;
 * @return {number}
 */
proto.logi.proto.LRProvisioningData.prototype.getDiscoverActionTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.logi.proto.LRProvisioningData.prototype.setDiscoverActionTimeoutMs = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string host_topic_outgoing = 20;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getHostTopicOutgoing = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setHostTopicOutgoing = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string host_topic_incoming = 21;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getHostTopicIncoming = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setHostTopicIncoming = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string device_topic_outgoing = 22;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getDeviceTopicOutgoing = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setDeviceTopicOutgoing = function(value) {
  jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string device_topic_incoming = 23;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getDeviceTopicIncoming = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setDeviceTopicIncoming = function(value) {
  jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string room_name = 100;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setRoomName = function(value) {
  jspb.Message.setProto3StringField(this, 100, value);
};


/**
 * optional string room_id = 101;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setRoomId = function(value) {
  jspb.Message.setProto3StringField(this, 101, value);
};


/**
 * optional string organization_name = 110;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getOrganizationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 110, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setOrganizationName = function(value) {
  jspb.Message.setProto3StringField(this, 110, value);
};


/**
 * optional string organization_id = 111;
 * @return {string}
 */
proto.logi.proto.LRProvisioningData.prototype.getOrganizationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 111, ""));
};


/** @param {string} value */
proto.logi.proto.LRProvisioningData.prototype.setOrganizationId = function(value) {
  jspb.Message.setProto3StringField(this, 111, value);
};


goog.object.extend(exports, proto.logi.proto);
