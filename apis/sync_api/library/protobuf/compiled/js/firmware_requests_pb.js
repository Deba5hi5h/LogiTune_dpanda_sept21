/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var firmware_structures_pb = require('./firmware_structures_pb.js');
goog.exportSymbol('proto.logi.proto.FirmwareRequest', null, global);
goog.exportSymbol('proto.logi.proto.FirmwareResponse', null, global);
goog.exportSymbol('proto.logi.proto.GetFirmwareUpdateProgressRequest', null, global);
goog.exportSymbol('proto.logi.proto.GetFirmwareUpdateProgressResponse', null, global);
goog.exportSymbol('proto.logi.proto.GetLatestFirmwareByProductIdRequest', null, global);
goog.exportSymbol('proto.logi.proto.GetLatestFirmwareByProductIdResponse', null, global);
goog.exportSymbol('proto.logi.proto.UpdateAllFirmwareRequest', null, global);
goog.exportSymbol('proto.logi.proto.UpdateAllFirmwareResponse', null, global);
goog.exportSymbol('proto.logi.proto.UpdateFirmwareByProductIdRequest', null, global);
goog.exportSymbol('proto.logi.proto.UpdateFirmwareByProductIdResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.GetFirmwareUpdateProgressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.GetFirmwareUpdateProgressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.GetFirmwareUpdateProgressRequest.displayName = 'proto.logi.proto.GetFirmwareUpdateProgressRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.GetFirmwareUpdateProgressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.GetFirmwareUpdateProgressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.GetFirmwareUpdateProgressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.GetFirmwareUpdateProgressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.GetFirmwareUpdateProgressRequest}
 */
proto.logi.proto.GetFirmwareUpdateProgressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.GetFirmwareUpdateProgressRequest;
  return proto.logi.proto.GetFirmwareUpdateProgressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.GetFirmwareUpdateProgressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.GetFirmwareUpdateProgressRequest}
 */
proto.logi.proto.GetFirmwareUpdateProgressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReserved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.GetFirmwareUpdateProgressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.GetFirmwareUpdateProgressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.GetFirmwareUpdateProgressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.GetFirmwareUpdateProgressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool reserved = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.GetFirmwareUpdateProgressRequest.prototype.getReserved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.logi.proto.GetFirmwareUpdateProgressRequest.prototype.setReserved = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.GetFirmwareUpdateProgressResponse.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.GetFirmwareUpdateProgressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.GetFirmwareUpdateProgressResponse.displayName = 'proto.logi.proto.GetFirmwareUpdateProgressResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.GetFirmwareUpdateProgressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.GetFirmwareUpdateProgressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    common_pb.Error.toObject, includeInstance),
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    firmware_structures_pb.FirmwareUpdateProgress.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.GetFirmwareUpdateProgressResponse}
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.GetFirmwareUpdateProgressResponse;
  return proto.logi.proto.GetFirmwareUpdateProgressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.GetFirmwareUpdateProgressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.GetFirmwareUpdateProgressResponse}
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 2:
      var value = new firmware_structures_pb.FirmwareUpdateProgress;
      reader.readMessage(value,firmware_structures_pb.FirmwareUpdateProgress.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.GetFirmwareUpdateProgressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.GetFirmwareUpdateProgressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      firmware_structures_pb.FirmwareUpdateProgress.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Error errors = 1;
 * @return {!Array<!proto.logi.proto.Error>}
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.logi.proto.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Error, 1));
};


/** @param {!Array<!proto.logi.proto.Error>} value */
proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.logi.proto.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Error}
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.logi.proto.Error, opt_index);
};


proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * repeated FirmwareUpdateProgress updates = 2;
 * @return {!Array<!proto.logi.proto.FirmwareUpdateProgress>}
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.logi.proto.FirmwareUpdateProgress>} */ (
    jspb.Message.getRepeatedWrapperField(this, firmware_structures_pb.FirmwareUpdateProgress, 2));
};


/** @param {!Array<!proto.logi.proto.FirmwareUpdateProgress>} value */
proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.setUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.logi.proto.FirmwareUpdateProgress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.FirmwareUpdateProgress}
 */
proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.logi.proto.FirmwareUpdateProgress, opt_index);
};


proto.logi.proto.GetFirmwareUpdateProgressResponse.prototype.clearUpdatesList = function() {
  this.setUpdatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.GetLatestFirmwareByProductIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.GetLatestFirmwareByProductIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.GetLatestFirmwareByProductIdRequest.displayName = 'proto.logi.proto.GetLatestFirmwareByProductIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.GetLatestFirmwareByProductIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.GetLatestFirmwareByProductIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.GetLatestFirmwareByProductIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.GetLatestFirmwareByProductIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productUuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.GetLatestFirmwareByProductIdRequest}
 */
proto.logi.proto.GetLatestFirmwareByProductIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.GetLatestFirmwareByProductIdRequest;
  return proto.logi.proto.GetLatestFirmwareByProductIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.GetLatestFirmwareByProductIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.GetLatestFirmwareByProductIdRequest}
 */
proto.logi.proto.GetLatestFirmwareByProductIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.GetLatestFirmwareByProductIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.GetLatestFirmwareByProductIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.GetLatestFirmwareByProductIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.GetLatestFirmwareByProductIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string product_uuid = 1;
 * @return {string}
 */
proto.logi.proto.GetLatestFirmwareByProductIdRequest.prototype.getProductUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.logi.proto.GetLatestFirmwareByProductIdRequest.prototype.setProductUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.GetLatestFirmwareByProductIdResponse.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.GetLatestFirmwareByProductIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.GetLatestFirmwareByProductIdResponse.displayName = 'proto.logi.proto.GetLatestFirmwareByProductIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.repeatedFields_ = [1,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.GetLatestFirmwareByProductIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.GetLatestFirmwareByProductIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    common_pb.Error.toObject, includeInstance),
    productUuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    latestFirmwarePackageVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    latestFirmwarePublishedDate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    latestFirmwareReleaseNotesUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    latestDeviceFirmwareVersionsList: jspb.Message.toObjectList(msg.getLatestDeviceFirmwareVersionsList(),
    firmware_structures_pb.LatestDeviceFirmwareInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.GetLatestFirmwareByProductIdResponse}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.GetLatestFirmwareByProductIdResponse;
  return proto.logi.proto.GetLatestFirmwareByProductIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.GetLatestFirmwareByProductIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.GetLatestFirmwareByProductIdResponse}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestFirmwarePackageVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatestFirmwarePublishedDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestFirmwareReleaseNotesUri(value);
      break;
    case 6:
      var value = new firmware_structures_pb.LatestDeviceFirmwareInfo;
      reader.readMessage(value,firmware_structures_pb.LatestDeviceFirmwareInfo.deserializeBinaryFromReader);
      msg.addLatestDeviceFirmwareVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.GetLatestFirmwareByProductIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.GetLatestFirmwareByProductIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getProductUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLatestFirmwarePackageVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLatestFirmwarePublishedDate();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLatestFirmwareReleaseNotesUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLatestDeviceFirmwareVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      firmware_structures_pb.LatestDeviceFirmwareInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Error errors = 1;
 * @return {!Array<!proto.logi.proto.Error>}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.logi.proto.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Error, 1));
};


/** @param {!Array<!proto.logi.proto.Error>} value */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.logi.proto.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Error}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.logi.proto.Error, opt_index);
};


proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * optional string product_uuid = 2;
 * @return {string}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.getProductUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.setProductUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string latest_firmware_package_version = 3;
 * @return {string}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.getLatestFirmwarePackageVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.setLatestFirmwarePackageVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 latest_firmware_published_date = 4;
 * @return {number}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.getLatestFirmwarePublishedDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.setLatestFirmwarePublishedDate = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string latest_firmware_release_notes_uri = 5;
 * @return {string}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.getLatestFirmwareReleaseNotesUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.setLatestFirmwareReleaseNotesUri = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated LatestDeviceFirmwareInfo latest_device_firmware_versions = 6;
 * @return {!Array<!proto.logi.proto.LatestDeviceFirmwareInfo>}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.getLatestDeviceFirmwareVersionsList = function() {
  return /** @type{!Array<!proto.logi.proto.LatestDeviceFirmwareInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, firmware_structures_pb.LatestDeviceFirmwareInfo, 6));
};


/** @param {!Array<!proto.logi.proto.LatestDeviceFirmwareInfo>} value */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.setLatestDeviceFirmwareVersionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.logi.proto.LatestDeviceFirmwareInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.LatestDeviceFirmwareInfo}
 */
proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.addLatestDeviceFirmwareVersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.logi.proto.LatestDeviceFirmwareInfo, opt_index);
};


proto.logi.proto.GetLatestFirmwareByProductIdResponse.prototype.clearLatestDeviceFirmwareVersionsList = function() {
  this.setLatestDeviceFirmwareVersionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.UpdateAllFirmwareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.UpdateAllFirmwareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.UpdateAllFirmwareRequest.displayName = 'proto.logi.proto.UpdateAllFirmwareRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.UpdateAllFirmwareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.UpdateAllFirmwareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.UpdateAllFirmwareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.UpdateAllFirmwareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reserved: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.UpdateAllFirmwareRequest}
 */
proto.logi.proto.UpdateAllFirmwareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.UpdateAllFirmwareRequest;
  return proto.logi.proto.UpdateAllFirmwareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.UpdateAllFirmwareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.UpdateAllFirmwareRequest}
 */
proto.logi.proto.UpdateAllFirmwareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReserved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.UpdateAllFirmwareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.UpdateAllFirmwareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.UpdateAllFirmwareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.UpdateAllFirmwareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReserved();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool reserved = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.UpdateAllFirmwareRequest.prototype.getReserved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.logi.proto.UpdateAllFirmwareRequest.prototype.setReserved = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.UpdateAllFirmwareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.UpdateAllFirmwareResponse.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.UpdateAllFirmwareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.UpdateAllFirmwareResponse.displayName = 'proto.logi.proto.UpdateAllFirmwareResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.UpdateAllFirmwareResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.UpdateAllFirmwareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.UpdateAllFirmwareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.UpdateAllFirmwareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.UpdateAllFirmwareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    common_pb.Error.toObject, includeInstance),
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    firmware_structures_pb.FirmwareUpdateProgress.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.UpdateAllFirmwareResponse}
 */
proto.logi.proto.UpdateAllFirmwareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.UpdateAllFirmwareResponse;
  return proto.logi.proto.UpdateAllFirmwareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.UpdateAllFirmwareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.UpdateAllFirmwareResponse}
 */
proto.logi.proto.UpdateAllFirmwareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 2:
      var value = new firmware_structures_pb.FirmwareUpdateProgress;
      reader.readMessage(value,firmware_structures_pb.FirmwareUpdateProgress.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.UpdateAllFirmwareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.UpdateAllFirmwareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.UpdateAllFirmwareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.UpdateAllFirmwareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      firmware_structures_pb.FirmwareUpdateProgress.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Error errors = 1;
 * @return {!Array<!proto.logi.proto.Error>}
 */
proto.logi.proto.UpdateAllFirmwareResponse.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.logi.proto.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Error, 1));
};


/** @param {!Array<!proto.logi.proto.Error>} value */
proto.logi.proto.UpdateAllFirmwareResponse.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.logi.proto.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Error}
 */
proto.logi.proto.UpdateAllFirmwareResponse.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.logi.proto.Error, opt_index);
};


proto.logi.proto.UpdateAllFirmwareResponse.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * repeated FirmwareUpdateProgress updates = 2;
 * @return {!Array<!proto.logi.proto.FirmwareUpdateProgress>}
 */
proto.logi.proto.UpdateAllFirmwareResponse.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.logi.proto.FirmwareUpdateProgress>} */ (
    jspb.Message.getRepeatedWrapperField(this, firmware_structures_pb.FirmwareUpdateProgress, 2));
};


/** @param {!Array<!proto.logi.proto.FirmwareUpdateProgress>} value */
proto.logi.proto.UpdateAllFirmwareResponse.prototype.setUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.logi.proto.FirmwareUpdateProgress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.FirmwareUpdateProgress}
 */
proto.logi.proto.UpdateAllFirmwareResponse.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.logi.proto.FirmwareUpdateProgress, opt_index);
};


proto.logi.proto.UpdateAllFirmwareResponse.prototype.clearUpdatesList = function() {
  this.setUpdatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.UpdateFirmwareByProductIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.UpdateFirmwareByProductIdRequest.displayName = 'proto.logi.proto.UpdateFirmwareByProductIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.UpdateFirmwareByProductIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.UpdateFirmwareByProductIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firmwarePackageVersion: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.UpdateFirmwareByProductIdRequest}
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.UpdateFirmwareByProductIdRequest;
  return proto.logi.proto.UpdateFirmwareByProductIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.UpdateFirmwareByProductIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.UpdateFirmwareByProductIdRequest}
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmwarePackageVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.UpdateFirmwareByProductIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.UpdateFirmwareByProductIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirmwarePackageVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string product_uuid = 1;
 * @return {string}
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest.prototype.getProductUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.logi.proto.UpdateFirmwareByProductIdRequest.prototype.setProductUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string firmware_package_version = 2;
 * @return {string}
 */
proto.logi.proto.UpdateFirmwareByProductIdRequest.prototype.getFirmwarePackageVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.UpdateFirmwareByProductIdRequest.prototype.setFirmwarePackageVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.UpdateFirmwareByProductIdResponse.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.UpdateFirmwareByProductIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.UpdateFirmwareByProductIdResponse.displayName = 'proto.logi.proto.UpdateFirmwareByProductIdResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.UpdateFirmwareByProductIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.UpdateFirmwareByProductIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    common_pb.Error.toObject, includeInstance),
    update: (f = msg.getUpdate()) && firmware_structures_pb.FirmwareUpdateProgress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.UpdateFirmwareByProductIdResponse}
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.UpdateFirmwareByProductIdResponse;
  return proto.logi.proto.UpdateFirmwareByProductIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.UpdateFirmwareByProductIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.UpdateFirmwareByProductIdResponse}
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 2:
      var value = new firmware_structures_pb.FirmwareUpdateProgress;
      reader.readMessage(value,firmware_structures_pb.FirmwareUpdateProgress.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.UpdateFirmwareByProductIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.UpdateFirmwareByProductIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      firmware_structures_pb.FirmwareUpdateProgress.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Error errors = 1;
 * @return {!Array<!proto.logi.proto.Error>}
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.logi.proto.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Error, 1));
};


/** @param {!Array<!proto.logi.proto.Error>} value */
proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.setErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.logi.proto.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Error}
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.logi.proto.Error, opt_index);
};


proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * optional FirmwareUpdateProgress update = 2;
 * @return {?proto.logi.proto.FirmwareUpdateProgress}
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.getUpdate = function() {
  return /** @type{?proto.logi.proto.FirmwareUpdateProgress} */ (
    jspb.Message.getWrapperField(this, firmware_structures_pb.FirmwareUpdateProgress, 2));
};


/** @param {?proto.logi.proto.FirmwareUpdateProgress|undefined} value */
proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.setUpdate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.UpdateFirmwareByProductIdResponse.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.FirmwareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.logi.proto.FirmwareRequest.oneofGroups_);
};
goog.inherits(proto.logi.proto.FirmwareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.FirmwareRequest.displayName = 'proto.logi.proto.FirmwareRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.logi.proto.FirmwareRequest.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.logi.proto.FirmwareRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  GET_FIRMWARE_UPDATE_PROGRESS_REQUEST: 1,
  GET_LATEST_FIRMWARE_BY_PRODUCT_ID_REQUEST: 2,
  UPDATE_FIRMWARE_BY_ID_REQUEST: 3,
  UPDATE_ALL_FIRMWARE_REQUEST: 4
};

/**
 * @return {proto.logi.proto.FirmwareRequest.RequestCase}
 */
proto.logi.proto.FirmwareRequest.prototype.getRequestCase = function() {
  return /** @type {proto.logi.proto.FirmwareRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.logi.proto.FirmwareRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.FirmwareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.FirmwareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.FirmwareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.FirmwareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    getFirmwareUpdateProgressRequest: (f = msg.getGetFirmwareUpdateProgressRequest()) && proto.logi.proto.GetFirmwareUpdateProgressRequest.toObject(includeInstance, f),
    getLatestFirmwareByProductIdRequest: (f = msg.getGetLatestFirmwareByProductIdRequest()) && proto.logi.proto.GetLatestFirmwareByProductIdRequest.toObject(includeInstance, f),
    updateFirmwareByIdRequest: (f = msg.getUpdateFirmwareByIdRequest()) && proto.logi.proto.UpdateFirmwareByProductIdRequest.toObject(includeInstance, f),
    updateAllFirmwareRequest: (f = msg.getUpdateAllFirmwareRequest()) && proto.logi.proto.UpdateAllFirmwareRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.FirmwareRequest}
 */
proto.logi.proto.FirmwareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.FirmwareRequest;
  return proto.logi.proto.FirmwareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.FirmwareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.FirmwareRequest}
 */
proto.logi.proto.FirmwareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.logi.proto.GetFirmwareUpdateProgressRequest;
      reader.readMessage(value,proto.logi.proto.GetFirmwareUpdateProgressRequest.deserializeBinaryFromReader);
      msg.setGetFirmwareUpdateProgressRequest(value);
      break;
    case 2:
      var value = new proto.logi.proto.GetLatestFirmwareByProductIdRequest;
      reader.readMessage(value,proto.logi.proto.GetLatestFirmwareByProductIdRequest.deserializeBinaryFromReader);
      msg.setGetLatestFirmwareByProductIdRequest(value);
      break;
    case 3:
      var value = new proto.logi.proto.UpdateFirmwareByProductIdRequest;
      reader.readMessage(value,proto.logi.proto.UpdateFirmwareByProductIdRequest.deserializeBinaryFromReader);
      msg.setUpdateFirmwareByIdRequest(value);
      break;
    case 4:
      var value = new proto.logi.proto.UpdateAllFirmwareRequest;
      reader.readMessage(value,proto.logi.proto.UpdateAllFirmwareRequest.deserializeBinaryFromReader);
      msg.setUpdateAllFirmwareRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.FirmwareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.FirmwareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.FirmwareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.FirmwareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetFirmwareUpdateProgressRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.logi.proto.GetFirmwareUpdateProgressRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetLatestFirmwareByProductIdRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.logi.proto.GetLatestFirmwareByProductIdRequest.serializeBinaryToWriter
    );
  }
  f = message.getUpdateFirmwareByIdRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.logi.proto.UpdateFirmwareByProductIdRequest.serializeBinaryToWriter
    );
  }
  f = message.getUpdateAllFirmwareRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.logi.proto.UpdateAllFirmwareRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetFirmwareUpdateProgressRequest get_firmware_update_progress_request = 1;
 * @return {?proto.logi.proto.GetFirmwareUpdateProgressRequest}
 */
proto.logi.proto.FirmwareRequest.prototype.getGetFirmwareUpdateProgressRequest = function() {
  return /** @type{?proto.logi.proto.GetFirmwareUpdateProgressRequest} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.GetFirmwareUpdateProgressRequest, 1));
};


/** @param {?proto.logi.proto.GetFirmwareUpdateProgressRequest|undefined} value */
proto.logi.proto.FirmwareRequest.prototype.setGetFirmwareUpdateProgressRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.logi.proto.FirmwareRequest.oneofGroups_[0], value);
};


proto.logi.proto.FirmwareRequest.prototype.clearGetFirmwareUpdateProgressRequest = function() {
  this.setGetFirmwareUpdateProgressRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.FirmwareRequest.prototype.hasGetFirmwareUpdateProgressRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetLatestFirmwareByProductIdRequest get_latest_firmware_by_product_id_request = 2;
 * @return {?proto.logi.proto.GetLatestFirmwareByProductIdRequest}
 */
proto.logi.proto.FirmwareRequest.prototype.getGetLatestFirmwareByProductIdRequest = function() {
  return /** @type{?proto.logi.proto.GetLatestFirmwareByProductIdRequest} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.GetLatestFirmwareByProductIdRequest, 2));
};


/** @param {?proto.logi.proto.GetLatestFirmwareByProductIdRequest|undefined} value */
proto.logi.proto.FirmwareRequest.prototype.setGetLatestFirmwareByProductIdRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.logi.proto.FirmwareRequest.oneofGroups_[0], value);
};


proto.logi.proto.FirmwareRequest.prototype.clearGetLatestFirmwareByProductIdRequest = function() {
  this.setGetLatestFirmwareByProductIdRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.FirmwareRequest.prototype.hasGetLatestFirmwareByProductIdRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateFirmwareByProductIdRequest update_firmware_by_id_request = 3;
 * @return {?proto.logi.proto.UpdateFirmwareByProductIdRequest}
 */
proto.logi.proto.FirmwareRequest.prototype.getUpdateFirmwareByIdRequest = function() {
  return /** @type{?proto.logi.proto.UpdateFirmwareByProductIdRequest} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.UpdateFirmwareByProductIdRequest, 3));
};


/** @param {?proto.logi.proto.UpdateFirmwareByProductIdRequest|undefined} value */
proto.logi.proto.FirmwareRequest.prototype.setUpdateFirmwareByIdRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.logi.proto.FirmwareRequest.oneofGroups_[0], value);
};


proto.logi.proto.FirmwareRequest.prototype.clearUpdateFirmwareByIdRequest = function() {
  this.setUpdateFirmwareByIdRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.FirmwareRequest.prototype.hasUpdateFirmwareByIdRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UpdateAllFirmwareRequest update_all_firmware_request = 4;
 * @return {?proto.logi.proto.UpdateAllFirmwareRequest}
 */
proto.logi.proto.FirmwareRequest.prototype.getUpdateAllFirmwareRequest = function() {
  return /** @type{?proto.logi.proto.UpdateAllFirmwareRequest} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.UpdateAllFirmwareRequest, 4));
};


/** @param {?proto.logi.proto.UpdateAllFirmwareRequest|undefined} value */
proto.logi.proto.FirmwareRequest.prototype.setUpdateAllFirmwareRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.logi.proto.FirmwareRequest.oneofGroups_[0], value);
};


proto.logi.proto.FirmwareRequest.prototype.clearUpdateAllFirmwareRequest = function() {
  this.setUpdateAllFirmwareRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.FirmwareRequest.prototype.hasUpdateAllFirmwareRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.FirmwareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.logi.proto.FirmwareResponse.oneofGroups_);
};
goog.inherits(proto.logi.proto.FirmwareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.FirmwareResponse.displayName = 'proto.logi.proto.FirmwareResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.logi.proto.FirmwareResponse.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.logi.proto.FirmwareResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  GET_FIRMWARE_UPDATE_PROGRESS_RESPONSE: 2,
  GET_LATEST_FIRMWARE_BY_PRODUCT_ID_RESPONSE: 3,
  UPDATE_FIRMWARE_BY_ID_RESPONSE: 4,
  UPDATE_ALL_FIRMWARE_RESPONSE: 5
};

/**
 * @return {proto.logi.proto.FirmwareResponse.ResponseCase}
 */
proto.logi.proto.FirmwareResponse.prototype.getResponseCase = function() {
  return /** @type {proto.logi.proto.FirmwareResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.logi.proto.FirmwareResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.FirmwareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.FirmwareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.FirmwareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.FirmwareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    getFirmwareUpdateProgressResponse: (f = msg.getGetFirmwareUpdateProgressResponse()) && proto.logi.proto.GetFirmwareUpdateProgressResponse.toObject(includeInstance, f),
    getLatestFirmwareByProductIdResponse: (f = msg.getGetLatestFirmwareByProductIdResponse()) && proto.logi.proto.GetLatestFirmwareByProductIdResponse.toObject(includeInstance, f),
    updateFirmwareByIdResponse: (f = msg.getUpdateFirmwareByIdResponse()) && proto.logi.proto.UpdateFirmwareByProductIdResponse.toObject(includeInstance, f),
    updateAllFirmwareResponse: (f = msg.getUpdateAllFirmwareResponse()) && proto.logi.proto.UpdateAllFirmwareResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.FirmwareResponse}
 */
proto.logi.proto.FirmwareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.FirmwareResponse;
  return proto.logi.proto.FirmwareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.FirmwareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.FirmwareResponse}
 */
proto.logi.proto.FirmwareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.logi.proto.GetFirmwareUpdateProgressResponse;
      reader.readMessage(value,proto.logi.proto.GetFirmwareUpdateProgressResponse.deserializeBinaryFromReader);
      msg.setGetFirmwareUpdateProgressResponse(value);
      break;
    case 3:
      var value = new proto.logi.proto.GetLatestFirmwareByProductIdResponse;
      reader.readMessage(value,proto.logi.proto.GetLatestFirmwareByProductIdResponse.deserializeBinaryFromReader);
      msg.setGetLatestFirmwareByProductIdResponse(value);
      break;
    case 4:
      var value = new proto.logi.proto.UpdateFirmwareByProductIdResponse;
      reader.readMessage(value,proto.logi.proto.UpdateFirmwareByProductIdResponse.deserializeBinaryFromReader);
      msg.setUpdateFirmwareByIdResponse(value);
      break;
    case 5:
      var value = new proto.logi.proto.UpdateAllFirmwareResponse;
      reader.readMessage(value,proto.logi.proto.UpdateAllFirmwareResponse.deserializeBinaryFromReader);
      msg.setUpdateAllFirmwareResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.FirmwareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.FirmwareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.FirmwareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.FirmwareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetFirmwareUpdateProgressResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.logi.proto.GetFirmwareUpdateProgressResponse.serializeBinaryToWriter
    );
  }
  f = message.getGetLatestFirmwareByProductIdResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.logi.proto.GetLatestFirmwareByProductIdResponse.serializeBinaryToWriter
    );
  }
  f = message.getUpdateFirmwareByIdResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.logi.proto.UpdateFirmwareByProductIdResponse.serializeBinaryToWriter
    );
  }
  f = message.getUpdateAllFirmwareResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.logi.proto.UpdateAllFirmwareResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetFirmwareUpdateProgressResponse get_firmware_update_progress_response = 2;
 * @return {?proto.logi.proto.GetFirmwareUpdateProgressResponse}
 */
proto.logi.proto.FirmwareResponse.prototype.getGetFirmwareUpdateProgressResponse = function() {
  return /** @type{?proto.logi.proto.GetFirmwareUpdateProgressResponse} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.GetFirmwareUpdateProgressResponse, 2));
};


/** @param {?proto.logi.proto.GetFirmwareUpdateProgressResponse|undefined} value */
proto.logi.proto.FirmwareResponse.prototype.setGetFirmwareUpdateProgressResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.logi.proto.FirmwareResponse.oneofGroups_[0], value);
};


proto.logi.proto.FirmwareResponse.prototype.clearGetFirmwareUpdateProgressResponse = function() {
  this.setGetFirmwareUpdateProgressResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.FirmwareResponse.prototype.hasGetFirmwareUpdateProgressResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetLatestFirmwareByProductIdResponse get_latest_firmware_by_product_id_response = 3;
 * @return {?proto.logi.proto.GetLatestFirmwareByProductIdResponse}
 */
proto.logi.proto.FirmwareResponse.prototype.getGetLatestFirmwareByProductIdResponse = function() {
  return /** @type{?proto.logi.proto.GetLatestFirmwareByProductIdResponse} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.GetLatestFirmwareByProductIdResponse, 3));
};


/** @param {?proto.logi.proto.GetLatestFirmwareByProductIdResponse|undefined} value */
proto.logi.proto.FirmwareResponse.prototype.setGetLatestFirmwareByProductIdResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.logi.proto.FirmwareResponse.oneofGroups_[0], value);
};


proto.logi.proto.FirmwareResponse.prototype.clearGetLatestFirmwareByProductIdResponse = function() {
  this.setGetLatestFirmwareByProductIdResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.FirmwareResponse.prototype.hasGetLatestFirmwareByProductIdResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional UpdateFirmwareByProductIdResponse update_firmware_by_id_response = 4;
 * @return {?proto.logi.proto.UpdateFirmwareByProductIdResponse}
 */
proto.logi.proto.FirmwareResponse.prototype.getUpdateFirmwareByIdResponse = function() {
  return /** @type{?proto.logi.proto.UpdateFirmwareByProductIdResponse} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.UpdateFirmwareByProductIdResponse, 4));
};


/** @param {?proto.logi.proto.UpdateFirmwareByProductIdResponse|undefined} value */
proto.logi.proto.FirmwareResponse.prototype.setUpdateFirmwareByIdResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.logi.proto.FirmwareResponse.oneofGroups_[0], value);
};


proto.logi.proto.FirmwareResponse.prototype.clearUpdateFirmwareByIdResponse = function() {
  this.setUpdateFirmwareByIdResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.FirmwareResponse.prototype.hasUpdateFirmwareByIdResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UpdateAllFirmwareResponse update_all_firmware_response = 5;
 * @return {?proto.logi.proto.UpdateAllFirmwareResponse}
 */
proto.logi.proto.FirmwareResponse.prototype.getUpdateAllFirmwareResponse = function() {
  return /** @type{?proto.logi.proto.UpdateAllFirmwareResponse} */ (
    jspb.Message.getWrapperField(this, proto.logi.proto.UpdateAllFirmwareResponse, 5));
};


/** @param {?proto.logi.proto.UpdateAllFirmwareResponse|undefined} value */
proto.logi.proto.FirmwareResponse.prototype.setUpdateAllFirmwareResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.logi.proto.FirmwareResponse.oneofGroups_[0], value);
};


proto.logi.proto.FirmwareResponse.prototype.clearUpdateAllFirmwareResponse = function() {
  this.setUpdateAllFirmwareResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.logi.proto.FirmwareResponse.prototype.hasUpdateAllFirmwareResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.logi.proto);
