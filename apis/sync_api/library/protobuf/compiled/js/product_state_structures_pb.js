/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.logi.proto.Device', null, global);
goog.exportSymbol('proto.logi.proto.Device.FormFactor', null, global);
goog.exportSymbol('proto.logi.proto.Device.Property', null, global);
goog.exportSymbol('proto.logi.proto.DeviceEdge', null, global);
goog.exportSymbol('proto.logi.proto.DeviceInfo', null, global);
goog.exportSymbol('proto.logi.proto.DeviceInfo.Type', null, global);
goog.exportSymbol('proto.logi.proto.Product', null, global);
goog.exportSymbol('proto.logi.proto.Product.Model', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.Product.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Product.displayName = 'proto.logi.proto.Product';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.Product.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    model: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    firmwarePackageVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastFirmwareUpdateTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.logi.proto.Device.toObject, includeInstance),
    deviceConnectionsList: jspb.Message.toObjectList(msg.getDeviceConnectionsList(),
    proto.logi.proto.DeviceEdge.toObject, includeInstance),
    serialNumber: jspb.Message.getFieldWithDefault(msg, 8, ""),
    connectionState: jspb.Message.getFieldWithDefault(msg, 9, 0),
    updateState: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Product}
 */
proto.logi.proto.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Product;
  return proto.logi.proto.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Product}
 */
proto.logi.proto.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {!proto.logi.proto.Product.Model} */ (reader.readEnum());
      msg.setModel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmwarePackageVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastFirmwareUpdateTime(value);
      break;
    case 6:
      var value = new proto.logi.proto.Device;
      reader.readMessage(value,proto.logi.proto.Device.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    case 7:
      var value = new proto.logi.proto.DeviceEdge;
      reader.readMessage(value,proto.logi.proto.DeviceEdge.deserializeBinaryFromReader);
      msg.addDeviceConnections(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerialNumber(value);
      break;
    case 9:
      var value = /** @type {!proto.logi.proto.SyncConnectionState} */ (reader.readEnum());
      msg.setConnectionState(value);
      break;
    case 10:
      var value = /** @type {!proto.logi.proto.SyncUpdateState} */ (reader.readEnum());
      msg.setUpdateState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFirmwarePackageVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastFirmwareUpdateTime();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.logi.proto.Device.serializeBinaryToWriter
    );
  }
  f = message.getDeviceConnectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.logi.proto.DeviceEdge.serializeBinaryToWriter
    );
  }
  f = message.getSerialNumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getConnectionState();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getUpdateState();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.logi.proto.Product.Model = {
  UNKNOWN: 0,
  MEETUP: 1,
  RALLY: 20,
  RALLY_CAMERA: 21
};

/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.logi.proto.Product.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.logi.proto.Product.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Model model = 2;
 * @return {!proto.logi.proto.Product.Model}
 */
proto.logi.proto.Product.prototype.getModel = function() {
  return /** @type {!proto.logi.proto.Product.Model} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.logi.proto.Product.Model} value */
proto.logi.proto.Product.prototype.setModel = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.logi.proto.Product.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.logi.proto.Product.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string firmware_package_version = 4;
 * @return {string}
 */
proto.logi.proto.Product.prototype.getFirmwarePackageVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.logi.proto.Product.prototype.setFirmwarePackageVersion = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 last_firmware_update_time = 5;
 * @return {number}
 */
proto.logi.proto.Product.prototype.getLastFirmwareUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.logi.proto.Product.prototype.setLastFirmwareUpdateTime = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Device devices = 6;
 * @return {!Array<!proto.logi.proto.Device>}
 */
proto.logi.proto.Product.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.logi.proto.Device>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.logi.proto.Device, 6));
};


/** @param {!Array<!proto.logi.proto.Device>} value */
proto.logi.proto.Product.prototype.setDevicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.logi.proto.Device=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.Device}
 */
proto.logi.proto.Product.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.logi.proto.Device, opt_index);
};


proto.logi.proto.Product.prototype.clearDevicesList = function() {
  this.setDevicesList([]);
};


/**
 * repeated DeviceEdge device_connections = 7;
 * @return {!Array<!proto.logi.proto.DeviceEdge>}
 */
proto.logi.proto.Product.prototype.getDeviceConnectionsList = function() {
  return /** @type{!Array<!proto.logi.proto.DeviceEdge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.logi.proto.DeviceEdge, 7));
};


/** @param {!Array<!proto.logi.proto.DeviceEdge>} value */
proto.logi.proto.Product.prototype.setDeviceConnectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.logi.proto.DeviceEdge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.DeviceEdge}
 */
proto.logi.proto.Product.prototype.addDeviceConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.logi.proto.DeviceEdge, opt_index);
};


proto.logi.proto.Product.prototype.clearDeviceConnectionsList = function() {
  this.setDeviceConnectionsList([]);
};


/**
 * optional string serial_number = 8;
 * @return {string}
 */
proto.logi.proto.Product.prototype.getSerialNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.logi.proto.Product.prototype.setSerialNumber = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional SyncConnectionState connection_state = 9;
 * @return {!proto.logi.proto.SyncConnectionState}
 */
proto.logi.proto.Product.prototype.getConnectionState = function() {
  return /** @type {!proto.logi.proto.SyncConnectionState} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.logi.proto.SyncConnectionState} value */
proto.logi.proto.Product.prototype.setConnectionState = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional SyncUpdateState update_state = 10;
 * @return {!proto.logi.proto.SyncUpdateState}
 */
proto.logi.proto.Product.prototype.getUpdateState = function() {
  return /** @type {!proto.logi.proto.SyncUpdateState} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.logi.proto.SyncUpdateState} value */
proto.logi.proto.Product.prototype.setUpdateState = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.logi.proto.Device.repeatedFields_, null);
};
goog.inherits(proto.logi.proto.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.Device.displayName = 'proto.logi.proto.Device';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.logi.proto.Device.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    formFactor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isConnectedToHost: jspb.Message.getFieldWithDefault(msg, 4, false),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : [],
    informationList: jspb.Message.toObjectList(msg.getInformationList(),
    proto.logi.proto.DeviceInfo.toObject, includeInstance),
    serialNumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    updateState: jspb.Message.getFieldWithDefault(msg, 8, 0),
    connectionState: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.Device}
 */
proto.logi.proto.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.Device;
  return proto.logi.proto.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.Device}
 */
proto.logi.proto.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.logi.proto.Device.FormFactor} */ (reader.readEnum());
      msg.setFormFactor(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsConnectedToHost(value);
      break;
    case 5:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readString, null, 0);
         });
      break;
    case 6:
      var value = new proto.logi.proto.DeviceInfo;
      reader.readMessage(value,proto.logi.proto.DeviceInfo.deserializeBinaryFromReader);
      msg.addInformation(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerialNumber(value);
      break;
    case 8:
      var value = /** @type {!proto.logi.proto.SyncUpdateState} */ (reader.readEnum());
      msg.setUpdateState(value);
      break;
    case 9:
      var value = /** @type {!proto.logi.proto.SyncConnectionState} */ (reader.readEnum());
      msg.setConnectionState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFormFactor();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIsConnectedToHost();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getInformationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.logi.proto.DeviceInfo.serializeBinaryToWriter
    );
  }
  f = message.getSerialNumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUpdateState();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getConnectionState();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.logi.proto.Device.FormFactor = {
  UNKNOWN: 0,
  MEETUP: 1,
  RALLY_TABLE_HUB: 20,
  RALLY_TV_HUB: 21,
  RALLY_CAMERA: 22,
  RALLY_MIC_POD: 23,
  RALLY_MIC_POD_HUB: 24,
  RALLY_SPEAKER: 25
};

/**
 * @enum {number}
 */
proto.logi.proto.Device.Property = {
  RESERVED: 0,
  AUDIO_CHANNEL: 1,
  BLE_MAC_ADDRESS: 2,
  ETHERNET_MAC_ADDRESS: 3
};

/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.logi.proto.Device.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.logi.proto.Device.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.logi.proto.Device.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.Device.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FormFactor form_factor = 3;
 * @return {!proto.logi.proto.Device.FormFactor}
 */
proto.logi.proto.Device.prototype.getFormFactor = function() {
  return /** @type {!proto.logi.proto.Device.FormFactor} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.logi.proto.Device.FormFactor} value */
proto.logi.proto.Device.prototype.setFormFactor = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool is_connected_to_host = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.logi.proto.Device.prototype.getIsConnectedToHost = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.logi.proto.Device.prototype.setIsConnectedToHost = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * map<uint32, string> properties = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.logi.proto.Device.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.logi.proto.Device.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
};


/**
 * repeated DeviceInfo information = 6;
 * @return {!Array<!proto.logi.proto.DeviceInfo>}
 */
proto.logi.proto.Device.prototype.getInformationList = function() {
  return /** @type{!Array<!proto.logi.proto.DeviceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.logi.proto.DeviceInfo, 6));
};


/** @param {!Array<!proto.logi.proto.DeviceInfo>} value */
proto.logi.proto.Device.prototype.setInformationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.logi.proto.DeviceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.logi.proto.DeviceInfo}
 */
proto.logi.proto.Device.prototype.addInformation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.logi.proto.DeviceInfo, opt_index);
};


proto.logi.proto.Device.prototype.clearInformationList = function() {
  this.setInformationList([]);
};


/**
 * optional string serial_number = 7;
 * @return {string}
 */
proto.logi.proto.Device.prototype.getSerialNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.logi.proto.Device.prototype.setSerialNumber = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional SyncUpdateState update_state = 8;
 * @return {!proto.logi.proto.SyncUpdateState}
 */
proto.logi.proto.Device.prototype.getUpdateState = function() {
  return /** @type {!proto.logi.proto.SyncUpdateState} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.logi.proto.SyncUpdateState} value */
proto.logi.proto.Device.prototype.setUpdateState = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional SyncConnectionState connection_state = 9;
 * @return {!proto.logi.proto.SyncConnectionState}
 */
proto.logi.proto.Device.prototype.getConnectionState = function() {
  return /** @type {!proto.logi.proto.SyncConnectionState} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.logi.proto.SyncConnectionState} value */
proto.logi.proto.Device.prototype.setConnectionState = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.DeviceInfo.displayName = 'proto.logi.proto.DeviceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    firmwareVersion: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.DeviceInfo}
 */
proto.logi.proto.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.DeviceInfo;
  return proto.logi.proto.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.DeviceInfo}
 */
proto.logi.proto.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.logi.proto.DeviceInfo.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirmwareVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFirmwareVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.logi.proto.DeviceInfo.Type = {
  UNKNOWN: 0,
  OTHER: 1,
  SELF: 2,
  EEPROM: 3,
  VIDEO: 4,
  AUDIO: 5,
  AUDIO_CODEC: 6,
  VIDEO_BLE: 7,
  AUDIO_BLE: 8,
  MCU: 9
};

/**
 * optional Type type = 1;
 * @return {!proto.logi.proto.DeviceInfo.Type}
 */
proto.logi.proto.DeviceInfo.prototype.getType = function() {
  return /** @type {!proto.logi.proto.DeviceInfo.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.logi.proto.DeviceInfo.Type} value */
proto.logi.proto.DeviceInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 pid = 2;
 * @return {number}
 */
proto.logi.proto.DeviceInfo.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.logi.proto.DeviceInfo.prototype.setPid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string firmware_version = 3;
 * @return {string}
 */
proto.logi.proto.DeviceInfo.prototype.getFirmwareVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.logi.proto.DeviceInfo.prototype.setFirmwareVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.logi.proto.DeviceEdge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.logi.proto.DeviceEdge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.logi.proto.DeviceEdge.displayName = 'proto.logi.proto.DeviceEdge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.logi.proto.DeviceEdge.prototype.toObject = function(opt_includeInstance) {
  return proto.logi.proto.DeviceEdge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.logi.proto.DeviceEdge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.DeviceEdge.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentDeviceUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    childDeviceUuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.logi.proto.DeviceEdge}
 */
proto.logi.proto.DeviceEdge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.logi.proto.DeviceEdge;
  return proto.logi.proto.DeviceEdge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.logi.proto.DeviceEdge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.logi.proto.DeviceEdge}
 */
proto.logi.proto.DeviceEdge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentDeviceUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChildDeviceUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.logi.proto.DeviceEdge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.logi.proto.DeviceEdge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.logi.proto.DeviceEdge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.logi.proto.DeviceEdge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentDeviceUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChildDeviceUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parent_device_uuid = 1;
 * @return {string}
 */
proto.logi.proto.DeviceEdge.prototype.getParentDeviceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.logi.proto.DeviceEdge.prototype.setParentDeviceUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string child_device_uuid = 2;
 * @return {string}
 */
proto.logi.proto.DeviceEdge.prototype.getChildDeviceUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.logi.proto.DeviceEdge.prototype.setChildDeviceUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.logi.proto);
